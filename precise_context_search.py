#!/usr/bin/env python3
"""
–¢–æ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è APARU LLM
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
"""

import json
import re
from pathlib import Path
from typing import List, Dict, Tuple

class PreciseContextSearch:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞"""
        
        # –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π
        self.knowledge_base = []
        
        # –¢–æ—á–Ω—ã–µ –º–∞–ø–ø–∏–Ω–≥–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
        self.question_mappings = self._create_question_mappings()
        
    def _create_question_mappings(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–æ—á–Ω—ã–µ –º–∞–ø–ø–∏–Ω–≥–∏ –≤–æ–ø—Ä–æ—Å–æ–≤"""
        
        return {
            # –ù–∞—Ü–µ–Ω–∫–∞ –∏ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
            "–Ω–∞—Ü–µ–Ω–∫–∞": {
                "exact": ["—á—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞—Ü–µ–Ω–∫–∞", "—á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –Ω–∞—Ü–µ–Ω–∫–∞", "—á—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞—Ü–µ–Ω–∫–∞"],
                "context": ["–ø–æ—á–µ–º—É –¥–æ—Ä–æ–≥–æ", "–ø–æ—á–µ–º—É —Ç–∞–∫ –¥–æ—Ä–æ–≥–æ", "–æ—Ç–∫—É–¥–∞ —Ü–µ–Ω–∞", "–ø–æ—á–µ–º—É –≤—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞", "–∑–∞—á–µ–º –Ω–∞—Ü–µ–Ω–∫–∞"],
                "keywords": ["–Ω–∞—Ü–µ–Ω–∫–∞", "—Ü–µ–Ω–∞", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "–¥–æ—Ä–æ–≥–æ", "—Ç–∞—Ä–∏—Ñ", "—Å–ø—Ä–æ—Å"]
            },
            "–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ": {
                "exact": ["–∫–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", "–∫–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç"],
                "context": ["–∫–∞–∫ –∑–∞–ø–ª–∞—Ç–∏—Ç—å", "–∫–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å", "–≥–¥–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å", "–∫–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏", "–∫–∞–∫ –≤–Ω–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞"],
                "keywords": ["–ø–æ–ø–æ–ª–Ω–∏—Ç—å", "–±–∞–ª–∞–Ω—Å", "—Å—á–µ—Ç", "–¥–µ–Ω—å–≥–∏", "–æ–ø–ª–∞—Ç–∏—Ç—å", "–ø–ª–∞—Ç–µ–∂"]
            },
            "–∫–æ–º—Ñ–æ—Ä—Ç": {
                "exact": ["—á—Ç–æ —Ç–∞–∫–æ–µ —Ç–∞—Ä–∏—Ñ –∫–æ–º—Ñ–æ—Ä—Ç", "—á—Ç–æ —Ç–∞–∫–æ–µ –∫–æ–º—Ñ–æ—Ä—Ç"],
                "context": ["—á—Ç–æ —Ç–∞–∫–æ–µ –∫–æ–º—Ñ–æ—Ä—Ç", "—á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –∫–æ–º—Ñ–æ—Ä—Ç", "–∫–æ–º—Ñ–æ—Ä—Ç –∫–ª–∞—Å—Å", "–ø—Ä–µ–º–∏—É–º —Ç–∞–∫—Å–∏"],
                "keywords": ["–∫–æ–º—Ñ–æ—Ä—Ç", "–ø—Ä–µ–º–∏—É–º", "–∫–ª–∞—Å—Å", "–º–∞—à–∏–Ω–∞", "–Ω–æ–≤–∞—è"]
            },
            "—Ä–∞—Å—Ü–µ–Ω–∫–∞": {
                "exact": ["–∫–∞–∫ —É–∑–Ω–∞—Ç—å —Ä–∞—Å—Ü–µ–Ω–∫—É"],
                "context": ["–∫–∞–∫ —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—É", "–≥–¥–µ –Ω–∞–π—Ç–∏ —Ü–µ–Ω—É", "–∫–∞–∫ —É–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å", "–≥–¥–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω—É"],
                "keywords": ["—Ä–∞—Å—Ü–µ–Ω–∫–∞", "—Ü–µ–Ω–∞", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—Ç–∞—Ä–∏—Ñ", "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å", "—É–∑–Ω–∞—Ç—å"]
            },
            "–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π": {
                "exact": ["–∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑"],
                "context": ["–º–æ–∂–Ω–æ –ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å –∑–∞—Ä–∞–Ω–µ–µ", "–∫–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å –∑–∞—Ä–∞–Ω–µ–µ", "–º–æ–∂–Ω–æ –ª–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", "–∫–∞–∫ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å"],
                "keywords": ["–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π", "–∑–∞—Ä–∞–Ω–µ–µ", "–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", "–∑–∞–∫–∞–∑"]
            },
            "–¥–æ—Å—Ç–∞–≤–∫–∞": {
                "exact": ["–∫–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–∫–∏"],
                "context": ["–∫–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É", "–∫–∞–∫ –¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Å—ã–ª–∫—É", "–∫—É—Ä—å–µ—Ä—Å–∫–∞—è —Å–ª—É–∂–±–∞", "–¥–æ—Å—Ç–∞–≤–∫–∞ —Ç–æ–≤–∞—Ä–∞"],
                "keywords": ["–¥–æ—Å—Ç–∞–≤–∫–∞", "–∫—É—Ä—å–µ—Ä", "—Ç–æ–≤–∞—Ä", "–ø–æ—Å—ã–ª–∫–∞", "–¥–æ—Å—Ç–∞–≤–∏—Ç—å"]
            },
            "–≤–æ–¥–∏—Ç–µ–ª—å": {
                "exact": ["–∫–∞–∫ –º–Ω–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã –∏ —á—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ"],
                "context": ["–∫–∞–∫ —Å—Ç–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª–µ–º", "–∫–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª–µ–º", "–∫–∞–∫ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å", "–∫–∞–∫ —Å—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º"],
                "keywords": ["–≤–æ–¥–∏—Ç–µ–ª—å", "–∑–∞–∫–∞–∑—ã", "—Ä–∞–±–æ—Ç–∞—Ç—å", "—Å—Ç–∞—Ç—å", "–ø–∞—Ä—Ç–Ω–µ—Ä"]
            },
            "–º–æ—Ç–æ—á–∞—Å—ã": {
                "exact": ["—á—Ç–æ —Ç–∞–∫–æ–µ –º–æ—Ç–æ—á–∞—Å—ã"],
                "context": ["–ø–æ—á–µ–º—É —Å—á–∏—Ç–∞—é—Ç –≤—Ä–µ–º—è", "–æ–ø–ª–∞—Ç–∞ –∑–∞ –≤—Ä–µ–º—è", "–≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏", "—Å—á–∏—Ç–∞—é—Ç –≤—Ä–µ–º—è"],
                "keywords": ["–º–æ—Ç–æ—á–∞—Å—ã", "–≤—Ä–µ–º—è", "–ø–æ–µ–∑–¥–∫–∞", "–æ–ø–ª–∞—Ç–∞", "—Å—á–∏—Ç–∞—é—Ç"]
            },
            "—Ç–∞–∫—Å–æ–º–µ—Ç—Ä": {
                "exact": ["–∫–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç–∞–∫—Å–æ–º–µ—Ç—Ä–æ–º"],
                "context": ["–∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–∞–∫—Å–æ–º–µ—Ç—Ä–æ–º", "–∫–∞–∫ –≤–∫–ª—é—á–∏—Ç—å —Ç–∞–∫—Å–æ–º–µ—Ç—Ä", "–∫–∞–∫ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç–∞–∫—Å–æ–º–µ—Ç—Ä–æ–º"],
                "keywords": ["—Ç–∞–∫—Å–æ–º–µ—Ç—Ä", "—Ä–∞–±–æ—Ç–∞—Ç—å", "–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", "–≤–∫–ª—é—á–∏—Ç—å", "—É–ø—Ä–∞–≤–ª—è—Ç—å"]
            },
            "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ": {
                "exact": ["–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —á—Ç–æ –¥–µ–ª–∞—Ç—å"],
                "context": ["–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∞–µ—Ç", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è", "–ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º"],
                "keywords": ["–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "–Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è", "–∑–∞–≤–∏—Å–∞–µ—Ç", "–ø—Ä–æ–±–ª–µ–º–∞"]
            }
        }
    
    def load_knowledge_base(self, kb_file: str = "database_Aparu/BZ.txt"):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"""
        
        print("üìö –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π...")
        
        # –ß–∏—Ç–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –±–∞–∑—É
        with open(kb_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü–∞—Ä—Å–∏–º –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
        sections = content.split('- question:')
        
        for section in sections[1:]:
            lines = section.strip().split('\n')
            if len(lines) >= 2:
                question = lines[0].strip()
                answer = '\n'.join(lines[1:]).strip()
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
                kb_entry = {
                    "question": question,
                    "answer": answer,
                    "similarity_score": 0.0
                }
                
                self.knowledge_base.append(kb_entry)
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.knowledge_base)} –∑–∞–ø–∏—Å–µ–π")
        return self.knowledge_base
    
    def search(self, query: str, top_k: int = 3) -> List[Dict]:
        """–¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É"""
        
        query_lower = query.lower().strip()
        results = []
        
        # –ò—â–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        for item in self.knowledge_base:
            score = 0.0
            question_lower = item['question'].lower().strip()
            
            # 1. –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
            if question_lower == query_lower:
                score = 100.0
            elif question_lower in query_lower:
                score = 50.0
            elif query_lower in question_lower:
                score = 30.0
            
            # 2. –ü–æ–∏—Å–∫ –ø–æ –º–∞–ø–ø–∏–Ω–≥–∞–º
            for category, mappings in self.question_mappings.items():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                for exact_match in mappings["exact"]:
                    if exact_match in query_lower:
                        if any(exact_match in q.lower() for q in [item['question']]):
                            score = max(score, 40.0)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                for context_match in mappings["context"]:
                    if context_match in query_lower:
                        if any(context_match in q.lower() for q in [item['question']]):
                            score = max(score, 25.0)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                for keyword in mappings["keywords"]:
                    if keyword in query_lower:
                        if any(keyword in q.lower() for q in [item['question']]):
                            score = max(score, 15.0)
            
            # 3. –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤–∞–º
            query_words = set(query_lower.split())
            question_words = set(question_lower.split())
            word_overlap = len(query_words & question_words)
            if word_overlap > 0:
                score = max(score, word_overlap * 5.0)
            
            if score > 0:
                item_copy = item.copy()
                item_copy['similarity_score'] = score
                results.append(item_copy)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ score
        results.sort(key=lambda x: x['similarity_score'], reverse=True)
        return results[:top_k]
    
    def get_contextual_answer(self, query: str) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
        
        # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –∑–∞–ø–∏—Å–∏
        results = self.search(query, top_k=3)
        
        if not results:
            return {
                "answer": "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –Ω–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.",
                "confidence": 0.0,
                "source": "fallback"
            }
        
        # –ë–µ—Ä–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        best_match = results[0]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        confidence = min(best_match["similarity_score"] / 100.0, 1.0)
        
        if confidence > 0.5:
            # –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç
            return {
                "answer": best_match["answer"],
                "confidence": confidence,
                "source": "exact_match",
                "matched_question": best_match["question"]
            }
        elif confidence > 0.2:
            # –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            return {
                "answer": best_match["answer"],
                "confidence": confidence,
                "source": "contextual_match",
                "matched_question": best_match["question"]
            }
        else:
            # –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–∏–π –æ—Ç–≤–µ—Ç
            return {
                "answer": "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —É–≤–µ—Ä–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ?",
                "confidence": confidence,
                "source": "low_confidence",
                "suggestions": [r["question"] for r in results[:3]]
            }

def test_precise_search():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç–æ—á–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ø–æ–∏—Å–∫–∞"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ—á–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ø–æ–∏—Å–∫–∞...")
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É
    precise_search = PreciseContextSearch()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
    precise_search.load_knowledge_base()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    test_queries = [
        "–ü–æ—á–µ–º—É —Ç–∞–∫ –¥–æ—Ä–æ–≥–æ?",
        "–ö–∞–∫ –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∑–∞ –ø–æ–µ–∑–¥–∫—É?",
        "–ú–æ–∂–Ω–æ –ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å –∑–∞—Ä–∞–Ω–µ–µ?",
        "–ö–∞–∫ —Å—Ç–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª–µ–º?",
        "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è",
        "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –Ω–∞—Ü–µ–Ω–∫–∞?",
        "–ì–¥–µ –Ω–∞–π—Ç–∏ —Ü–µ–Ω—É?",
        "–ö–∞–∫ –¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Å—ã–ª–∫—É?",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–æ–º—Ñ–æ—Ä—Ç?",
        "–ü–æ—á–µ–º—É —Å—á–∏—Ç–∞—é—Ç –≤—Ä–µ–º—è?"
    ]
    
    print("\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    
    for query in test_queries:
        print(f"\n‚ùì –í–æ–ø—Ä–æ—Å: {query}")
        
        result = precise_search.get_contextual_answer(query)
        
        print(f"üìù –û—Ç–≤–µ—Ç: {result['answer'][:100]}...")
        print(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.2f}")
        print(f"üìÇ –ò—Å—Ç–æ—á–Ω–∏–∫: {result['source']}")
        
        if 'matched_question' in result:
            print(f"üîó –°–æ–≤–ø–∞–≤—à–∏–π –≤–æ–ø—Ä–æ—Å: {result['matched_question']}")
        
        if 'suggestions' in result:
            print(f"üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {result['suggestions']}")

if __name__ == "__main__":
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞ APARU...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º
    test_precise_search()
    
    print("\n‚úÖ –¢–æ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ –≥–æ—Ç–æ–≤–∞!")
    print("üéØ –¢–µ–ø–µ—Ä—å –º–æ–¥–µ–ª—å —Ç–æ—á–Ω–æ –ø–æ–Ω–∏–º–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç!")
