#!/usr/bin/env python3
"""
üöÄ –ü–†–Ø–ú–û–ô LLM –ö–õ–ò–ï–ù–¢ –î–õ–Ø RAILWAY
Railway –Ω–∞–ø—Ä—è–º—É—é –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π LLM –º–æ–¥–µ–ª–∏
"""

import json
import re
import logging
import requests
from typing import Dict, Any, List, Optional
from datetime import datetime
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse
from pydantic import BaseModel
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(title="APARU Direct LLM Railway", version="4.0.0")

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ú–æ–¥–µ–ª–∏
class ChatRequest(BaseModel):
    text: str
    user_id: str
    locale: str = "ru"

class ChatResponse(BaseModel):
    response: str
    intent: str
    confidence: float
    source: str
    timestamp: str
    suggestions: List[str] = []

class HealthResponse(BaseModel):
    status: str
    architecture: str = "direct_llm_railway"
    timestamp: str
    local_llm_available: bool = False

class DirectLLMClient:
    def __init__(self):
        # URL –ª–æ–∫–∞–ª—å–Ω–æ–π LLM –º–æ–¥–µ–ª–∏
        self.local_llm_url = os.environ.get("LOCAL_LLM_URL", "http://172.20.10.5:8001")
        self.ollama_url = os.environ.get("OLLAMA_URL", "http://172.20.10.5:11434")
        self.model_name = "aparu-senior-ai"
        self.llm_available = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–π LLM
        self._check_local_llm()
        
    def _check_local_llm(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–π LLM –º–æ–¥–µ–ª–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
            response = requests.get(f"{self.local_llm_url}/health", timeout=5)
            if response.status_code == 200:
                self.llm_available = True
                logger.info("‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è LLM –º–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞")
            else:
                logger.warning(f"‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω–∞—è LLM –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {response.status_code}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π LLM –º–æ–¥–µ–ª–∏: {e}")
    
    def get_llm_response(self, question: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–π LLM –º–æ–¥–µ–ª–∏"""
        if not self.llm_available:
            logger.error("‚ùå –õ–æ–∫–∞–ª—å–Ω–∞—è LLM –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return None
        
        try:
            logger.info("üß† –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–π LLM –º–æ–¥–µ–ª–∏...")
            start_time = datetime.now()
            
            payload = {
                "text": question,
                "user_id": "railway_direct",
                "locale": "ru"
            }
            
            response = requests.post(
                f"{self.local_llm_url}/chat",
                json=payload,
                timeout=60  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è LLM
            )
            
            processing_time = (datetime.now() - start_time).total_seconds()
            
            if response.status_code == 200:
                data = response.json()
                logger.info(f"‚úÖ LLM –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ {processing_time:.2f}—Å")
                return {
                    "answer": data.get("response"),
                    "category": data.get("intent", "llm_generated"),
                    "confidence": data.get("confidence", 0.9),
                    "source": "local_llm_model",
                    "processing_time": processing_time
                }
            else:
                logger.warning(f"‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω–∞—è LLM –º–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –æ—à–∏–±–∫—É: {response.status_code}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π LLM –º–æ–¥–µ–ª–∏: {e}")
            return None
    
    def get_hybrid_response(self, question: str) -> Dict[str, Any]:
        """–ì–∏–±—Ä–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç: LLM + fallback"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å LLM –æ—Ç–≤–µ—Ç
        llm_result = self.get_llm_response(question)
        
        if llm_result:
            return llm_result
        
        # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É –ø–æ–∏—Å–∫—É
        logger.info("üîÑ Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É –ø–æ–∏—Å–∫—É...")
        return self._simple_search(question)
    
    def _simple_search(self, question: str) -> Dict[str, Any]:
        """–ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (fallback)"""
        question_lower = question.lower()
        
        # –ü—Ä–æ—Å—Ç–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π
        simple_kb = {
            "–Ω–∞—Ü–µ–Ω–∫–∞": "–ù–∞—Ü–µ–Ω–∫–∞ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–ª–∞—Ç–∞ –∑–∞ –≤—ã—Å–æ–∫–∏–π —Å–ø—Ä–æ—Å. –ü–æ–º–æ–≥–∞–µ—Ç –ø—Ä–∏–≤–ª–µ—á—å –±–æ–ª—å—à–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π.",
            "–¥–æ—Å—Ç–∞–≤–∫–∞": "–î–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏: –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ‚Üí –î–æ—Å—Ç–∞–≤–∫–∞ ‚Üí —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å–∞ ‚Üí –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑.",
            "–±–∞–ª–∞–Ω—Å": "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å: –ü—Ä–æ—Ñ–∏–ª—å ‚Üí –ü–æ–ø–æ–ª–Ω–∏—Ç—å ‚Üí –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.",
            "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ": "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç? –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç, –æ–±–Ω–æ–≤–∏—Ç–µ –≤–µ—Ä—Å–∏—é."
        }
        
        # –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        for keyword, answer in simple_kb.items():
            if keyword in question_lower:
                return {
                    "answer": answer,
                    "category": keyword,
                    "confidence": 0.8,
                    "source": "simple_search",
                    "processing_time": 0.1
                }
        
        # Fallback
        return {
            "answer": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
            "category": "unknown",
            "confidence": 0.0,
            "source": "fallback",
            "processing_time": 0.1
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
direct_llm_client = DirectLLMClient()

@app.get("/")
async def root():
    return {
        "message": "APARU Direct LLM Railway", 
        "status": "running", 
        "version": "4.0.0",
        "architecture": "direct_llm_railway",
        "local_llm_available": direct_llm_client.llm_available
    }

@app.get("/health", response_model=HealthResponse)
async def health():
    return HealthResponse(
        status="healthy",
        architecture="direct_llm_railway",
        timestamp=datetime.now().isoformat(),
        local_llm_available=direct_llm_client.llm_available
    )

@app.get("/webapp", response_class=HTMLResponse)
async def webapp():
    """Telegram WebApp –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    try:
        with open("webapp.html", "r", encoding="utf-8") as f:
            html_content = f.read()
        return HTMLResponse(content=html_content)
    except FileNotFoundError:
        return HTMLResponse(
            content="<h1>WebApp –Ω–µ –Ω–∞–π–¥–µ–Ω</h1><p>–§–∞–π–ª webapp.html –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</p>",
            status_code=404
        )

@app.post("/chat", response_model=ChatResponse)
async def chat(request: ChatRequest):
    """–û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —á–∞—Ç–∞"""
    try:
        result = direct_llm_client.get_hybrid_response(request.text)
        
        return ChatResponse(
            response=result["answer"],
            intent=result["category"],
            confidence=result["confidence"],
            source=result["source"],
            timestamp=datetime.now().isoformat(),
            suggestions=[]
        )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /chat: {e}")
        return ChatResponse(
            response="–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.",
            intent="error",
            confidence=0.0,
            source="error",
            timestamp=datetime.now().isoformat(),
            suggestions=[]
        )

if __name__ == "__main__":
    import uvicorn
    
    # Railway –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é PORT
    port = int(os.environ.get("PORT", 8000))
    uvicorn.run(app, host="0.0.0.0", port=port)
