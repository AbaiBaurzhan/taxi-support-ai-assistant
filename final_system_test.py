#!/usr/bin/env python3
"""
üß™ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã APARU
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Å–º–µ—à–∏–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
"""

import requests
import json
import time
from typing import Dict, List, Any

class APARUFinalTester:
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.test_results = []
        
    def test_question(self, question: str, expected_keywords: List[str], test_name: str) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å"""
        print(f"\nüß™ –¢–µ—Å—Ç: {test_name}")
        print(f"‚ùì –í–æ–ø—Ä–æ—Å: {question}")
        
        try:
            response = requests.post(
                f"{self.base_url}/chat",
                json={
                    "text": question,
                    "user_id": "test123",
                    "locale": "ru"
                },
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                answer = data.get('response', '')
                confidence = data.get('confidence', 0)
                source = data.get('source', 'unknown')
                
                print(f"‚úÖ –û—Ç–≤–µ—Ç: {answer[:100]}...")
                print(f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}")
                print(f"üîç –ò—Å—Ç–æ—á–Ω–∏–∫: {source}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                answer_lower = answer.lower()
                found_keywords = [kw for kw in expected_keywords if kw.lower() in answer_lower]
                
                result = {
                    'test_name': test_name,
                    'question': question,
                    'answer': answer,
                    'confidence': confidence,
                    'source': source,
                    'expected_keywords': expected_keywords,
                    'found_keywords': found_keywords,
                    'success': len(found_keywords) > 0,
                    'timestamp': time.time()
                }
                
                if result['success']:
                    print(f"‚úÖ –£—Å–ø–µ—Ö! –ù–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {found_keywords}")
                else:
                    print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ–∂–∏–¥–∞–µ–º—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {expected_keywords}")
                
                return result
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
                return {
                    'test_name': test_name,
                    'question': question,
                    'error': f"HTTP {response.status_code}",
                    'success': False
                }
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return {
                'test_name': test_name,
                'question': question,
                'error': str(e),
                'success': False
            }
    
    def run_comprehensive_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã APARU")
        print("=" * 60)
        
        # –¢–µ—Å—Ç—ã –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        tests = [
            {
                'question': '–ß—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞—Ü–µ–Ω–∫–∞?',
                'expected_keywords': ['–Ω–∞—Ü–µ–Ω–∫–∞', '—Ç–∞—Ä–∏—Ñ', '—Å–ø—Ä–æ—Å', '–ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è'],
                'test_name': '–ü–æ–Ω–∏–º–∞–Ω–∏–µ –Ω–∞—Ü–µ–Ω–∫–∏'
            },
            {
                'question': '–ü–æ—á–µ–º—É —Ç–∞–∫ –¥–æ—Ä–æ–≥–æ?',
                'expected_keywords': ['–Ω–∞—Ü–µ–Ω–∫–∞', '—Å–ø—Ä–æ—Å', '–ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è', '–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª–∏'],
                'test_name': '–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ü–µ–Ω—ã'
            },
            {
                'question': '–ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å?',
                'expected_keywords': ['–±–∞–ª–∞–Ω—Å', '–ø–æ–ø–æ–ª–Ω–∏—Ç—å', 'qiwi', 'kaspi', '–∫–∞—Ä—Ç–∞'],
                'test_name': '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞'
            },
            {
                'question': '–ì–¥–µ –º–æ–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç—å –¥–µ–Ω—å–≥–∏ –Ω–∞ —Å—á–µ—Ç?',
                'expected_keywords': ['–±–∞–ª–∞–Ω—Å', '–ø–æ–ø–æ–ª–Ω–∏—Ç—å', 'qiwi', 'kaspi', '–∫–∞—Ä—Ç–∞'],
                'test_name': '–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è'
            },
            {
                'question': '–ß—Ç–æ —Ç–∞–∫–æ–µ —Ç–∞—Ä–∏—Ñ –ö–æ–º—Ñ–æ—Ä—Ç?',
                'expected_keywords': ['–∫–æ–º—Ñ–æ—Ä—Ç', '–Ω–æ–≤–∞—è –º–∞—à–∏–Ω–∞', 'toyota camry', '20% –≤—ã—à–µ'],
                'test_name': '–ü–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤'
            },
            {
                'question': '–ö–∞–∫–æ–π —Å–∞–º—ã–π –¥–æ—Ä–æ–≥–æ–π –∫–ª–∞—Å—Å?',
                'expected_keywords': ['–∫–æ–º—Ñ–æ—Ä—Ç', '–Ω–æ–≤–∞—è –º–∞—à–∏–Ω–∞', 'toyota camry', '20% –≤—ã—à–µ'],
                'test_name': '–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤'
            },
            {
                'question': '–ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑?',
                'expected_keywords': ['–æ—Ç–º–µ–Ω–∏—Ç—å', '–∑–∞–∫–∞–∑', '–ø–æ–µ–∑–¥–∫–∞'],
                'test_name': '–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞'
            },
            {
                'question': '–ú–æ–∂–Ω–æ –ª–∏ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ø–æ–µ–∑–¥–∫–∏?',
                'expected_keywords': ['–æ—Ç–º–µ–Ω–∏—Ç—å', '–∑–∞–∫–∞–∑', '–ø–æ–µ–∑–¥–∫–∞'],
                'test_name': '–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –æ—Ç–º–µ–Ω—ã'
            },
            {
                'question': '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç',
                'expected_keywords': ['–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', '–æ–±–Ω–æ–≤–∏—Ç—å', 'google play', 'app store'],
                'test_name': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã'
            },
            {
                'question': '–ê–ø–ø–∞—Ä—É –≥–ª—é—á–∏—Ç',
                'expected_keywords': ['–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', '–æ–±–Ω–æ–≤–∏—Ç—å', 'google play', 'app store'],
                'test_name': '–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º'
            }
        ]
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        for test in tests:
            result = self.test_question(
                test['question'],
                test['expected_keywords'],
                test['test_name']
            )
            self.test_results.append(result)
            time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.analyze_results()
    
    def analyze_results(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤"""
        print("\n" + "=" * 60)
        print("üìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
        print("=" * 60)
        
        total_tests = len(self.test_results)
        successful_tests = sum(1 for r in self.test_results if r.get('success', False))
        success_rate = (successful_tests / total_tests) * 100 if total_tests > 0 else 0
        
        print(f"üìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {successful_tests}")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {total_tests - successful_tests}")
        print(f"üéØ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        kb_tests = [r for r in self.test_results if r.get('source') == 'kb']
        llm_tests = [r for r in self.test_results if r.get('source') == 'llm']
        
        print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:")
        print(f"   üìö –ò–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {len(kb_tests)} —Ç–µ—Å—Ç–æ–≤")
        print(f"   üß† –ò–∑ LLM: {len(llm_tests)} —Ç–µ—Å—Ç–æ–≤")
        
        # –ê–Ω–∞–ª–∏–∑ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        avg_confidence = sum(r.get('confidence', 0) for r in self.test_results) / total_tests if total_tests > 0 else 0
        print(f"   üìä –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence:.2f}")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:")
        for result in self.test_results:
            status = "‚úÖ" if result.get('success', False) else "‚ùå"
            print(f"   {status} {result.get('test_name', 'Unknown')}: {result.get('confidence', 0):.2f}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if success_rate >= 90:
            print("   üéâ –û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É.")
        elif success_rate >= 80:
            print("   üëç –•–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤.")
        elif success_rate >= 70:
            print("   ‚ö†Ô∏è –°—Ä–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
        else:
            print("   üö® –ù–∏–∑–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
        
        if len(kb_tests) < len(llm_tests):
            print("   üìö –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ä–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è.")
        
        if avg_confidence < 0.7:
            print("   üìä –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–≤—ã—Å–∏—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã.")
        
        print(f"\nüéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–¶–ï–ù–ö–ê: {success_rate:.1f}%")
        
        return {
            'total_tests': total_tests,
            'successful_tests': successful_tests,
            'success_rate': success_rate,
            'avg_confidence': avg_confidence,
            'kb_tests': len(kb_tests),
            'llm_tests': len(llm_tests)
        }

if __name__ == "__main__":
    tester = APARUFinalTester()
    results = tester.run_comprehensive_tests()
    print(f"\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {results}")
