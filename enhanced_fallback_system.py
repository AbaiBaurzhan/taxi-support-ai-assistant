#!/usr/bin/env python3
"""
üîß –£–õ–£–ß–®–ï–ù–ù–ê–Ø FALLBACK –°–ò–°–¢–ï–ú–ê –° –ú–û–†–§–û–õ–û–ì–ò–ï–ô
"""

import json
import re
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

class EnhancedFallbackSystem:
    def __init__(self):
        self.knowledge_base = self._load_knowledge_base()
        self.morphological_forms = self._create_morphological_forms()
        
    def _load_knowledge_base(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"""
        try:
            with open('BZ.txt', 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
            return []
    
    def _create_morphological_forms(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º"""
        return {
            # –ù–∞—Ü–µ–Ω–∫–∞
            "–Ω–∞—Ü–µ–Ω–∫–∞": ["–Ω–∞—Ü–µ–Ω–∫–∞", "–Ω–∞—Ü–µ–Ω–∫–∏", "–Ω–∞—Ü–µ–Ω–∫—É", "–Ω–∞—Ü–µ–Ω–∫–æ–π", "–Ω–∞—Ü–µ–Ω–∫–µ", "–Ω–∞—Ü–µ–Ω–∫–∞—Ö"],
            "–¥–æ–ø–ª–∞—Ç–∞": ["–¥–æ–ø–ª–∞—Ç–∞", "–¥–æ–ø–ª–∞—Ç—ã", "–¥–æ–ø–ª–∞—Ç—É", "–¥–æ–ø–ª–∞—Ç–æ–π", "–¥–æ–ø–ª–∞—Ç–µ", "–¥–æ–ø–ª–∞—Ç–∞—Ö"],
            "–Ω–∞–¥–±–∞–≤–∫–∞": ["–Ω–∞–¥–±–∞–≤–∫–∞", "–Ω–∞–¥–±–∞–≤–∫–∏", "–Ω–∞–¥–±–∞–≤–∫—É", "–Ω–∞–¥–±–∞–≤–∫–æ–π", "–Ω–∞–¥–±–∞–≤–∫–µ", "–Ω–∞–¥–±–∞–≤–∫–∞—Ö"],
            "–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç": ["–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç", "–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã", "–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞", "–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º", "–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–µ", "–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞—Ö"],
            
            # –ö–æ–º—Ñ–æ—Ä—Ç
            "–∫–æ–º—Ñ–æ—Ä—Ç": ["–∫–æ–º—Ñ–æ—Ä—Ç", "–∫–æ–º—Ñ–æ—Ä—Ç—ã", "–∫–æ–º—Ñ–æ—Ä—Ç–∞", "–∫–æ–º—Ñ–æ—Ä—Ç–æ–º", "–∫–æ–º—Ñ–æ—Ä—Ç–µ", "–∫–æ–º—Ñ–æ—Ä—Ç–∞—Ö"],
            "—Ç–∞—Ä–∏—Ñ": ["—Ç–∞—Ä–∏—Ñ", "—Ç–∞—Ä–∏—Ñ—ã", "—Ç–∞—Ä–∏—Ñ–∞", "—Ç–∞—Ä–∏—Ñ–æ–º", "—Ç–∞—Ä–∏—Ñ–µ", "—Ç–∞—Ä–∏—Ñ–∞—Ö"],
            "–∫–ª–∞—Å—Å": ["–∫–ª–∞—Å—Å", "–∫–ª–∞—Å—Å—ã", "–∫–ª–∞—Å—Å–∞", "–∫–ª–∞—Å—Å–æ–º", "–∫–ª–∞—Å—Å–µ", "–∫–ª–∞—Å—Å–∞—Ö"],
            
            # –†–∞—Å—Ü–µ–Ω–∫–∞
            "—Ä–∞—Å—Ü–µ–Ω–∫–∞": ["—Ä–∞—Å—Ü–µ–Ω–∫–∞", "—Ä–∞—Å—Ü–µ–Ω–∫–∏", "—Ä–∞—Å—Ü–µ–Ω–∫—É", "—Ä–∞—Å—Ü–µ–Ω–∫–æ–π", "—Ä–∞—Å—Ü–µ–Ω–∫–µ", "—Ä–∞—Å—Ü–µ–Ω–∫–∞—Ö"],
            "—Å—Ç–æ–∏–º–æ—Å—Ç—å": ["—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—Å—Ç–æ–∏–º–æ—Å—Ç–∏", "—Å—Ç–æ–∏–º–æ—Å—Ç—å—é", "—Å—Ç–æ–∏–º–æ—Å—Ç–∏", "—Å—Ç–æ–∏–º–æ—Å—Ç–∏", "—Å—Ç–æ–∏–º–æ—Å—Ç—è—Ö"],
            "—Ü–µ–Ω–∞": ["—Ü–µ–Ω–∞", "—Ü–µ–Ω—ã", "—Ü–µ–Ω—É", "—Ü–µ–Ω–æ–π", "—Ü–µ–Ω–µ", "—Ü–µ–Ω–∞—Ö"],
            
            # –î–æ—Å—Ç–∞–≤–∫–∞
            "–¥–æ—Å—Ç–∞–≤–∫–∞": ["–¥–æ—Å—Ç–∞–≤–∫–∞", "–¥–æ—Å—Ç–∞–≤–∫–∏", "–¥–æ—Å—Ç–∞–≤–∫—É", "–¥–æ—Å—Ç–∞–≤–∫–æ–π", "–¥–æ—Å—Ç–∞–≤–∫–µ", "–¥–æ—Å—Ç–∞–≤–∫–∞—Ö"],
            "–∑–∞–∫–∞–∑": ["–∑–∞–∫–∞–∑", "–∑–∞–∫–∞–∑—ã", "–∑–∞–∫–∞–∑–∞", "–∑–∞–∫–∞–∑–æ–º", "–∑–∞–∫–∞–∑–µ", "–∑–∞–∫–∞–∑–∞—Ö"],
            
            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑
            "–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π": ["–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π", "–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ", "–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ", "–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º", "–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–º", "–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö"],
            "–∑–∞—Ä–∞–Ω–µ–µ": ["–∑–∞—Ä–∞–Ω–µ–µ", "–∑–∞—Ä–∞–Ω–µ–µ", "–∑–∞—Ä–∞–Ω–µ–µ", "–∑–∞—Ä–∞–Ω–µ–µ", "–∑–∞—Ä–∞–Ω–µ–µ", "–∑–∞—Ä–∞–Ω–µ–µ"],
            
            # –í–æ–¥–∏—Ç–µ–ª—å
            "–≤–æ–¥–∏—Ç–µ–ª—å": ["–≤–æ–¥–∏—Ç–µ–ª—å", "–≤–æ–¥–∏—Ç–µ–ª–∏", "–≤–æ–¥–∏—Ç–µ–ª—è", "–≤–æ–¥–∏—Ç–µ–ª–µ–º", "–≤–æ–¥–∏—Ç–µ–ª–µ", "–≤–æ–¥–∏—Ç–µ–ª—è—Ö"],
            "–∑–∞–∫–∞–∑—ã": ["–∑–∞–∫–∞–∑—ã", "–∑–∞–∫–∞–∑–æ–≤", "–∑–∞–∫–∞–∑–∞–º", "–∑–∞–∫–∞–∑–∞–º–∏", "–∑–∞–∫–∞–∑–∞—Ö", "–∑–∞–∫–∞–∑–∞—Ö"],
            
            # –ë–∞–ª–∞–Ω—Å
            "–±–∞–ª–∞–Ω—Å": ["–±–∞–ª–∞–Ω—Å", "–±–∞–ª–∞–Ω—Å—ã", "–±–∞–ª–∞–Ω—Å–∞", "–±–∞–ª–∞–Ω—Å–æ–º", "–±–∞–ª–∞–Ω—Å–µ", "–±–∞–ª–∞–Ω—Å–∞—Ö"],
            "–ø–æ–ø–æ–ª–Ω–∏—Ç—å": ["–ø–æ–ø–æ–ª–Ω–∏—Ç—å", "–ø–æ–ø–æ–ª–Ω—è—é", "–ø–æ–ø–æ–ª–Ω—è–µ—à—å", "–ø–æ–ø–æ–ª–Ω—è–µ—Ç", "–ø–æ–ø–æ–ª–Ω—è–µ–º", "–ø–æ–ø–æ–ª–Ω—è–µ—Ç–µ", "–ø–æ–ø–æ–ª–Ω—è—é—Ç"],
            "–æ–ø–ª–∞—Ç–∏—Ç—å": ["–æ–ø–ª–∞—Ç–∏—Ç—å", "–æ–ø–ª–∞—á–∏–≤–∞—é", "–æ–ø–ª–∞—á–∏–≤–∞–µ—à—å", "–æ–ø–ª–∞—á–∏–≤–∞–µ—Ç", "–æ–ø–ª–∞—á–∏–≤–∞–µ–º", "–æ–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ", "–æ–ø–ª–∞—á–∏–≤–∞—é—Ç"],
            
            # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ": ["–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö"],
            "–æ–±–Ω–æ–≤–∏—Ç—å": ["–æ–±–Ω–æ–≤–∏—Ç—å", "–æ–±–Ω–æ–≤–ª—è—é", "–æ–±–Ω–æ–≤–ª—è–µ—à—å", "–æ–±–Ω–æ–≤–ª—è–µ—Ç", "–æ–±–Ω–æ–≤–ª—è–µ–º", "–æ–±–Ω–æ–≤–ª—è–µ—Ç–µ", "–æ–±–Ω–æ–≤–ª—è—é—Ç"],
            
            # –ü—Ä–æ–º–æ–∫–æ–¥
            "–ø—Ä–æ–º–æ–∫–æ–¥": ["–ø—Ä–æ–º–æ–∫–æ–¥", "–ø—Ä–æ–º–æ–∫–æ–¥—ã", "–ø—Ä–æ–º–æ–∫–æ–¥–∞", "–ø—Ä–æ–º–æ–∫–æ–¥–æ–º", "–ø—Ä–æ–º–æ–∫–æ–¥–µ", "–ø—Ä–æ–º–æ–∫–æ–¥–∞—Ö"],
            "—Å–∫–∏–¥–∫–∞": ["—Å–∫–∏–¥–∫–∞", "—Å–∫–∏–¥–∫–∏", "—Å–∫–∏–¥–∫—É", "—Å–∫–∏–¥–∫–æ–π", "—Å–∫–∏–¥–∫–µ", "—Å–∫–∏–¥–∫–∞—Ö"],
            "–±–æ–Ω—É—Å": ["–±–æ–Ω—É—Å", "–±–æ–Ω—É—Å—ã", "–±–æ–Ω—É—Å–∞", "–±–æ–Ω—É—Å–æ–º", "–±–æ–Ω—É—Å–µ", "–±–æ–Ω—É—Å–∞—Ö"],
            
            # –û—Ç–º–µ–Ω–∞
            "–æ—Ç–º–µ–Ω–∏—Ç—å": ["–æ—Ç–º–µ–Ω–∏—Ç—å", "–æ—Ç–º–µ–Ω—è—é", "–æ—Ç–º–µ–Ω—è–µ—à—å", "–æ—Ç–º–µ–Ω—è–µ—Ç", "–æ—Ç–º–µ–Ω—è–µ–º", "–æ—Ç–º–µ–Ω—è–µ—Ç–µ", "–æ—Ç–º–µ–Ω—è—é—Ç"],
            "–æ—Ç–º–µ–Ω–∞": ["–æ—Ç–º–µ–Ω–∞", "–æ—Ç–º–µ–Ω—ã", "–æ—Ç–º–µ–Ω—É", "–æ—Ç–º–µ–Ω–æ–π", "–æ—Ç–º–µ–Ω–µ", "–æ—Ç–º–µ–Ω–∞—Ö"]
        }
    
    def _enhanced_morphological_search(self, question: str) -> dict:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫"""
        question_lower = question.lower()
        
        # –ò—â–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ —Ñ–æ—Ä–º–∞–º–∏
        for base_word, forms in self.morphological_forms.items():
            for form in forms:
                if form in question_lower:
                    # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
                    category = self._find_category_by_keyword(base_word)
                    if category:
                        return {
                            "answer": category["answer"],
                            "category": f"morphological_match_{base_word}",
                            "confidence": 0.9,
                            "source": "enhanced_morphological_search"
                        }
        
        return None
    
    def _find_category_by_keyword(self, keyword: str) -> dict:
        """–ù–∞—Ö–æ–¥–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É"""
        keyword_mapping = {
            "–Ω–∞—Ü–µ–Ω–∫–∞": 0, "–¥–æ–ø–ª–∞—Ç–∞": 0, "–Ω–∞–¥–±–∞–≤–∫–∞": 0, "–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç": 0,
            "–∫–æ–º—Ñ–æ—Ä—Ç": 1, "—Ç–∞—Ä–∏—Ñ": 1, "–∫–ª–∞—Å—Å": 1,
            "—Ä–∞—Å—Ü–µ–Ω–∫–∞": 2, "—Å—Ç–æ–∏–º–æ—Å—Ç—å": 2, "—Ü–µ–Ω–∞": 2,
            "–¥–æ—Å—Ç–∞–≤–∫–∞": 3, "–∑–∞–∫–∞–∑": 3,
            "–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π": 4, "–∑–∞—Ä–∞–Ω–µ–µ": 4,
            "–≤–æ–¥–∏—Ç–µ–ª—å": 5, "–∑–∞–∫–∞–∑—ã": 5,
            "–±–∞–ª–∞–Ω—Å": 6, "–ø–æ–ø–æ–ª–Ω–∏—Ç—å": 6, "–æ–ø–ª–∞—Ç–∏—Ç—å": 6,
            "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ": 7, "–æ–±–Ω–æ–≤–∏—Ç—å": 7,
            "–ø—Ä–æ–º–æ–∫–æ–¥": 8, "—Å–∫–∏–¥–∫–∞": 8, "–±–æ–Ω—É—Å": 8,
            "–æ—Ç–º–µ–Ω–∏—Ç—å": 9, "–æ—Ç–º–µ–Ω–∞": 9
        }
        
        if keyword in keyword_mapping:
            category_index = keyword_mapping[keyword]
            if category_index < len(self.knowledge_base):
                return self.knowledge_base[category_index]
        
        return None
    
    def _partial_match_search(self, question: str) -> dict:
        """–ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º"""
        question_lower = question.lower()
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å –Ω–∞ —Å–ª–æ–≤–∞
        question_words = question_lower.split()
        
        # –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        for i, item in enumerate(self.knowledge_base):
            for keyword in item["keywords"]:
                keyword_lower = keyword.lower()
                
                # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                if keyword_lower in question_lower:
                    return {
                        "answer": item["answer"],
                        "category": f"partial_match_{i+1}",
                        "confidence": 0.8,
                        "source": "partial_match_search"
                    }
                
                # –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)
                if len(keyword_lower) >= 3:
                    for word in question_words:
                        if len(word) >= 3 and keyword_lower in word:
                            return {
                                "answer": item["answer"],
                                "category": f"partial_match_{i+1}",
                                "confidence": 0.6,
                                "source": "partial_match_search"
                            }
        
        return None
    
    def find_best_answer(self, question: str) -> dict:
        """–ù–∞—Ö–æ–¥–∏—Ç –ª—É—á—à–∏–π –æ—Ç–≤–µ—Ç —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π fallback —Å–∏—Å—Ç–µ–º–æ–π"""
        start_time = datetime.now()
        
        logger.info("üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é fallback —Å–∏—Å—Ç–µ–º—É...")
        
        # 1. –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
        result = self._enhanced_morphological_search(question)
        if result:
            processing_time = (datetime.now() - start_time).total_seconds()
            logger.info(f"‚úÖ –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {processing_time:.3f}—Å")
            return result
        
        # 2. –ß–∞—Å—Ç–∏—á–Ω—ã–π –ø–æ–∏—Å–∫
        result = self._partial_match_search(question)
        if result:
            processing_time = (datetime.now() - start_time).total_seconds()
            logger.info(f"‚úÖ –ß–∞—Å—Ç–∏—á–Ω—ã–π –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {processing_time:.3f}—Å")
            return result
        
        # 3. Fallback –æ—Ç–≤–µ—Ç
        processing_time = (datetime.now() - start_time).total_seconds()
        logger.info(f"‚ùå Fallback –æ—Ç–≤–µ—Ç –∑–∞ {processing_time:.3f}—Å")
        
        return {
            "answer": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
            "category": "unknown",
            "confidence": 0.0,
            "source": "fallback"
        }

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    enhanced_system = EnhancedFallbackSystem()
    
    test_questions = [
        "–Ω–∞—Ü–µ–Ω–∫–∏", "–Ω–∞—Ü–µ–Ω–∫—É", "–Ω–∞—Ü–µ–Ω–∫–æ–π",
        "–±–∞–ª–∞–Ω—Å—ã", "–±–∞–ª–∞–Ω—Å–∞", "–±–∞–ª–∞–Ω—Å–æ–º", 
        "–ø—Ä–æ–º–æ–∫–æ–¥—ã", "–ø—Ä–æ–º–æ–∫–æ–¥–∞", "–ø—Ä–æ–º–æ–∫–æ–¥–æ–º",
        "—Å–∫–∏–¥–∫–∏", "—Å–∫–∏–¥–∫—É", "—Å–∫–∏–¥–∫–æ–π",
        "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º"
    ]
    
    print("üß™ –¢–ï–°–¢ –£–õ–£–ß–®–ï–ù–ù–û–ô FALLBACK –°–ò–°–¢–ï–ú–´:")
    print("=" * 50)
    
    for question in test_questions:
        result = enhanced_system.find_best_answer(question)
        print(f"–í–æ–ø—Ä–æ—Å: {question}")
        print(f"–û—Ç–≤–µ—Ç: {result['answer'][:60]}...")
        print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {result['category']}")
        print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']}")
        print(f"–ò—Å—Ç–æ—á–Ω–∏–∫: {result['source']}")
        print("-" * 40)
