"""
–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä BZ.txt –≤ —Ñ–æ—Ä–º–∞—Ç kb.json –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞
"""

import json
import os
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def convert_bz_to_kb():
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç BZ.txt –≤ kb.json"""
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É BZ.txt
    bz_path = "BZ.txt"
    
    if not os.path.exists(bz_path):
        logger.error(f"–§–∞–π–ª {bz_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    try:
        # –ß–∏—Ç–∞–µ–º BZ.txt
        with open(bz_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü–∞—Ä—Å–∏–º JSON
        bz_data = json.loads(content)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç kb.json
        kb_data = {
            "faq": []
        }
        
        for item in bz_data:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            question_variations = item.get('question_variations', [])
            keywords = item.get('keywords', [])
            answer = item.get('answer', '')
            
            # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –≤–æ–ø—Ä–æ—Å –∏–∑ –ø–µ—Ä–≤–æ–π –≤–∞—Ä–∏–∞—Ü–∏–∏
            main_question = question_variations[0] if question_variations else ""
            
            # –°–æ–∑–¥–∞–µ–º FAQ —ç–ª–µ–º–µ–Ω—Ç
            faq_item = {
                "question": main_question,
                "answer": answer,
                "keywords": keywords,
                "question_variations": question_variations
            }
            
            kb_data["faq"].append(faq_item)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ kb.json
        kb_path = "backend/kb.json"
        with open(kb_path, 'w', encoding='utf-8') as f:
            json.dump(kb_data, f, ensure_ascii=False, indent=2)
        
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(kb_data['faq'])} FAQ —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        logger.info(f"üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {kb_path}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–∫–∂–µ fixtures.json –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        fixtures_path = "backend/fixtures.json"
        if not os.path.exists(fixtures_path):
            fixtures_data = {
                "rides": [
                    {
                        "id": "ride_001",
                        "user_id": "user_001",
                        "status": "completed",
                        "driver": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
                        "car": "Toyota Camry A123ABC",
                        "price": 850,
                        "distance": 5.2,
                        "duration": 15
                    }
                ],
                "receipts": [
                    {
                        "id": "receipt_001",
                        "user_id": "user_001",
                        "ride_id": "ride_001",
                        "amount": 850,
                        "date": "2024-01-15T10:30:00Z"
                    }
                ],
                "cards": [
                    {
                        "id": "card_001",
                        "user_id": "user_001",
                        "type": "Visa",
                        "last_four": "1234",
                        "is_primary": True
                    }
                ],
                "tickets": [
                    {
                        "id": "TKT_1001",
                        "user_id": "user_001",
                        "description": "–î–≤–æ–π–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤",
                        "status": "open",
                        "created_at": "2024-01-15T10:30:00Z"
                    }
                ]
            }
            
            with open(fixtures_path, 'w', encoding='utf-8') as f:
                json.dump(fixtures_data, f, ensure_ascii=False, indent=2)
            
            logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω {fixtures_path}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        return False

if __name__ == "__main__":
    success = convert_bz_to_kb()
    if success:
        print("üéâ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏!")
