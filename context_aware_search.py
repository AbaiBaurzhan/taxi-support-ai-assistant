#!/usr/bin/env python3
"""
üîç –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è APARU
–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Å–º–µ—à–∏–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –∏ —É–ª—É—á—à–∞–µ—Ç –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
"""

import json
import logging
from typing import Dict, List, Any, Tuple
from fuzzywuzzy import fuzz
import re

logger = logging.getLogger(__name__)

class ContextAwareSearch:
    def __init__(self, knowledge_base_path: str = "enhanced_aparu_knowledge.json"):
        self.knowledge_base = self._load_knowledge_base(knowledge_base_path)
        self.context_patterns = self._build_context_patterns()
        
    def _load_knowledge_base(self, path: str) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"""
        try:
            with open(path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            logger.error(f"–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {path}")
            return []
    
    def _build_context_patterns(self) -> Dict[str, List[str]]:
        """–°—Ç—Ä–æ–∏—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        return {
            'pricing': ['—Ç–∞—Ä–∏—Ñ', '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Ä–∞—Å—Ü–µ–Ω–∫–∞', '–Ω–∞—Ü–µ–Ω–∫–∞', '–¥–æ—Ä–æ–≥–æ', '–¥–µ—à–µ–≤–æ'],
            'booking': ['–∑–∞–∫–∞–∑', '–ø–æ–µ–∑–¥–∫–∞', '—Ç–∞–∫—Å–∏', '–≤—ã–∑–æ–≤', '–≤—ã–∑–≤–∞—Ç—å', '–∑–∞–∫–∞–∑–∞—Ç—å'],
            'payment': ['–±–∞–ª–∞–Ω—Å', '–ø–æ–ø–æ–ª–Ω–∏—Ç—å', '–æ–ø–ª–∞—Ç–∞', '–ø–ª–∞—Ç–µ–∂', '–∫–∞—Ä—Ç–∞', '–Ω–∞–ª–∏—á–Ω—ã–µ'],
            'technical': ['–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', '—Ç–∞–∫—Å–æ–º–µ—Ç—Ä', '–º–æ—Ç–æ—á–∞—Å—ã', 'gps', '–æ—à–∏–±–∫–∞', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'],
            'delivery': ['–¥–æ—Å—Ç–∞–≤–∫–∞', '–∫—É—Ä—å–µ—Ä', '–ø–æ—Å—ã–ª–∫–∞', '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å', '–ø–µ—Ä–µ–¥–∞—Ç—å'],
            'driver': ['–≤–æ–¥–∏—Ç–µ–ª—å', '—Ç–∞–∫—Å–∏—Å—Ç', '–∫–æ–Ω—Ç–∞–∫—Ç—ã', '—Å–≤—è–∑—å', '–Ω–æ–º–µ—Ä'],
            'cancellation': ['–æ—Ç–º–µ–Ω–∏—Ç—å', '–æ—Ç–º–µ–Ω–∞', '–æ—Ç–∫–∞–∑', '–æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑'],
            'complaint': ['–∂–∞–ª–æ–±–∞', '–ø—Ä–æ–±–ª–µ–º–∞', '–Ω–µ–¥–æ–≤–æ–ª–µ–Ω', '–ø–ª–æ—Ö–æ', '–≥—Ä—É–±–æ'],
            'general': ['—á—Ç–æ', '–∫–∞–∫', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–ø–æ—á–µ–º—É']
        }
    
    def get_contextual_answer(self, question: str, threshold: float = 0.4) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
        –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Å–º–µ—à–∏–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        """
        question_lower = question.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–∞
        question_category = self._categorize_question(question_lower)
        
        # –ò—â–µ–º –æ—Ç–≤–µ—Ç—ã —Ç–æ–ª—å–∫–æ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_items = [item for item in self.knowledge_base if item.get('category') == question_category]
        
        if not category_items:
            # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—â–µ–º –≤–æ –≤—Å–µ—Ö
            category_items = self.knowledge_base
        
        best_match = None
        best_score = 0
        
        for item in category_items:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –≤–æ–ø—Ä–æ—Å
            score = fuzz.ratio(question_lower, item['question'].lower())
            if score > best_score:
                best_score = score
                best_match = item
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—Ä–∏–∞—Ü–∏–∏
            for variation in item.get('variations', []):
                score = fuzz.ratio(question_lower, variation.lower())
                if score > best_score:
                    best_score = score
                    best_match = item
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            for keyword in item.get('context_keywords', []):
                if keyword.lower() in question_lower:
                    score = fuzz.ratio(question_lower, keyword.lower()) + 20
                    if score > best_score:
                        best_score = score
                        best_match = item
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º score
        normalized_score = best_score / 100.0
        
        if normalized_score >= threshold and best_match:
            return {
                'answer': best_match['answer'],
                'confidence': normalized_score,
                'source': 'knowledge_base',
                'category': question_category,
                'context_keywords': best_match.get('context_keywords', []),
                'prevented_mixing': True
            }
        else:
            return {
                'answer': "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –Ω–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
                'confidence': 0.0,
                'source': 'fallback',
                'category': question_category,
                'context_keywords': [],
                'prevented_mixing': True
            }
    
    def _categorize_question(self, question: str) -> str:
        """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É"""
        for category, keywords in self.context_patterns.items():
            if any(keyword in question for keyword in keywords):
                return category
        return 'general'
    
    def validate_answer_consistency(self, question: str, answer: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞"""
        question_category = self._categorize_question(question.lower())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–∞
        if question_category == 'pricing' and not any(word in answer.lower() for word in ['—Ç–∞—Ä–∏—Ñ', '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å']):
            return False
        elif question_category == 'booking' and not any(word in answer.lower() for word in ['–∑–∞–∫–∞–∑', '–ø–æ–µ–∑–¥–∫–∞', '—Ç–∞–∫—Å–∏']):
            return False
        elif question_category == 'payment' and not any(word in answer.lower() for word in ['–±–∞–ª–∞–Ω—Å', '–æ–ø–ª–∞—Ç–∞', '–ø–ª–∞—Ç–µ–∂']):
            return False
        
        return True

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ main.py
_context_aware_search = ContextAwareSearch()

def get_contextual_answer(question: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç"""
    result = _context_aware_search.get_contextual_answer(question)
    return result['answer']
