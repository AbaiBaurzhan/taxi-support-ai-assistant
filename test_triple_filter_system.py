#!/usr/bin/env python3
"""
üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –¢–†–ï–•–£–†–û–í–ù–ï–í–û–ô –°–ò–°–¢–ï–ú–´ –ü–û–ò–°–ö–ê

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞:
- Filter 1: Question Variations (50% –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
- Filter 2: Keywords (30% –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)  
- Filter 3: Answer Content (20% –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
- –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π fallback
"""

import requests
import json
import time
from typing import Dict, List, Tuple

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
API_BASE = "http://localhost:8000"
TEST_USER_ID = "test_user_triple_filter"
TEST_LOCALE = "ru"

class TripleFilterTester:
    def __init__(self):
        self.results = []
        self.total_tests = 0
        self.passed_tests = 0
        self.failed_tests = 0
        
    def wait_for_server(self, max_attempts=10):
        """–ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        print("üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
        for i in range(max_attempts):
            try:
                response = requests.get(f"{API_BASE}/health", timeout=2)
                if response.status_code == 200:
                    print("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é")
                    return True
            except requests.exceptions.RequestException:
                pass
            time.sleep(1)
            print(f"   –ü–æ–ø—ã—Ç–∫–∞ {i+1}/{max_attempts}...")
        
        print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è")
        return False
    
    def test_chat_endpoint(self, query: str, expected_keywords: List[str] = None, 
                          test_name: str = None) -> Dict:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –∫ API"""
        if not test_name:
            test_name = query
            
        print(f"\nüß™ –¢–µ—Å—Ç: {test_name}")
        print(f"üìù –ó–∞–ø—Ä–æ—Å: '{query}'")
        
        try:
            response = requests.post(
                f"{API_BASE}/chat",
                json={
                    "text": query,
                    "user_id": TEST_USER_ID,
                    "locale": TEST_LOCALE
                },
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                
                result = {
                    "test_name": test_name,
                    "query": query,
                    "success": True,
                    "response": data.get("response", ""),
                    "confidence": data.get("confidence", 0),
                    "source": data.get("source", ""),
                    "intent": data.get("intent", ""),
                    "expected_keywords": expected_keywords
                }
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–∂–∏–¥–∞–µ–º—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                if expected_keywords:
                    response_text = data.get("response", "").lower()
                    found_keywords = [kw for kw in expected_keywords if kw.lower() in response_text]
                    result["found_keywords"] = found_keywords
                    result["keyword_match"] = len(found_keywords) > 0
                
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ")
                print(f"   üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {data.get('confidence', 0):.2f}")
                print(f"   üîç –ò—Å—Ç–æ—á–Ω–∏–∫: {data.get('source', '')}")
                print(f"   üéØ Intent: {data.get('intent', '')}")
                print(f"   üí¨ –û—Ç–≤–µ—Ç: {data.get('response', '')[:100]}...")
                
                if expected_keywords and result.get("keyword_match"):
                    print(f"   üîë –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {result['found_keywords']}")
                
                self.passed_tests += 1
                
            else:
                result = {
                    "test_name": test_name,
                    "query": query,
                    "success": False,
                    "error": f"HTTP {response.status_code}: {response.text}"
                }
                print(f"‚ùå –û—à–∏–±–∫–∞: HTTP {response.status_code}")
                self.failed_tests += 1
                
        except Exception as e:
            result = {
                "test_name": test_name,
                "query": query,
                "success": False,
                "error": str(e)
            }
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            self.failed_tests += 1
        
        self.total_tests += 1
        self.results.append(result)
        return result
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã —Ç—Ä–µ—Ö—É—Ä–æ–≤–Ω–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        print("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –¢–†–ï–•–£–†–û–í–ù–ï–í–û–ô –°–ò–°–¢–ï–ú–´ –ü–û–ò–°–ö–ê")
        print("=" * 80)
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        if not self.wait_for_server():
            return False
        
        # –ì—Ä—É–ø–ø–∞ 1: –¢–µ—Å—Ç—ã –Ω–∞ —Ä–∞–∑–ª–∏—á–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        print("\nüéØ –ì–†–£–ü–ü–ê 1: –¢–ï–°–¢–´ –ù–ê –†–ê–ó–õ–ò–ß–ï–ù–ò–ï –ü–û–•–û–ñ–ò–• –í–û–ü–†–û–°–û–í")
        print("-" * 60)
        
        self.test_chat_endpoint(
            "–¥–æ—Å—Ç–∞–≤–∫–∞",
            ["–¥–æ—Å—Ç–∞–≤–∫–∞", "–∫—É—Ä—å–µ—Ä", "–ø–æ—Å—ã–ª–∫–∞"],
            "–ö–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å '–¥–æ—Å—Ç–∞–≤–∫–∞'"
        )
        
        self.test_chat_endpoint(
            "—á—Ç–æ —Ç–∞–∫–æ–µ –¥–æ—Å—Ç–∞–≤–∫–∞",
            ["–¥–æ—Å—Ç–∞–≤–∫–∞", "—É—Å–ª—É–≥–∞", "–∫—É—Ä—å–µ—Ä"],
            "–í–æ–ø—Ä–æ—Å '—á—Ç–æ —Ç–∞–∫–æ–µ –¥–æ—Å—Ç–∞–≤–∫–∞'"
        )
        
        self.test_chat_endpoint(
            "–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∞",
            ["—Ä–∞–±–æ—Ç–∞–µ—Ç", "—Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"],
            "–í–æ–ø—Ä–æ—Å '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∞'"
        )
        
        # –ì—Ä—É–ø–ø–∞ 2: –¢–µ—Å—Ç—ã —Ç—Ä–µ—Ö—É—Ä–æ–≤–Ω–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞
        print("\nüîç –ì–†–£–ü–ü–ê 2: –¢–ï–°–¢–´ –¢–†–ï–•–£–†–û–í–ù–ï–í–û–ô –°–ò–°–¢–ï–ú–´ –ü–û–ò–°–ö–ê")
        print("-" * 60)
        
        self.test_chat_endpoint(
            "–∫–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
            ["–±–∞–ª–∞–Ω—Å", "–ø–æ–ø–æ–ª–Ω–∏—Ç—å", "–ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã"],
            "–í–æ–ø—Ä–æ—Å –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞"
        )
        
        self.test_chat_endpoint(
            "—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –ø–æ–µ–∑–¥–∫–∞",
            ["—Ü–µ–Ω–∞", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—Ç–∞—Ä–∏—Ñ", "—Ä–∞—Å—á–µ—Ç"],
            "–í–æ–ø—Ä–æ—Å –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–µ–∑–¥–∫–∏"
        )
        
        self.test_chat_endpoint(
            "–∫–∞–∫–∏–µ –∫–∞—Ä—Ç—ã —É –º–µ–Ω—è –µ—Å—Ç—å",
            ["–∫–∞—Ä—Ç–∞", "–∫–∞—Ä—Ç—ã", "–ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ"],
            "–í–æ–ø—Ä–æ—Å –æ –∫–∞—Ä—Ç–∞—Ö"
        )
        
        # –ì—Ä—É–ø–ø–∞ 3: –¢–µ—Å—Ç—ã –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        print("\nüß† –ì–†–£–ü–ü–ê 3: –¢–ï–°–¢–´ –ú–û–†–§–û–õ–û–ì–ò–ß–ï–°–ö–û–ì–û –ê–ù–ê–õ–ò–ó–ê")
        print("-" * 60)
        
        self.test_chat_endpoint(
            "–¥–æ—Å—Ç–∞–≤–∫–∏",
            ["–¥–æ—Å—Ç–∞–≤–∫–∞"],
            "–°–ª–æ–≤–æ —Å –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º '–¥–æ—Å—Ç–∞–≤–∫–∏'"
        )
        
        self.test_chat_endpoint(
            "–≤–æ–¥–∏—Ç–µ–ª—å",
            ["–≤–æ–¥–∏—Ç–µ–ª—å", "—à–æ—Ñ–µ—Ä", "—Ç–∞–∫—Å–∏—Å—Ç"],
            "–°–ª–æ–≤–æ '–≤–æ–¥–∏—Ç–µ–ª—å'"
        )
        
        self.test_chat_endpoint(
            "–≤–æ–¥–∏—Ç–µ–ª–∏",
            ["–≤–æ–¥–∏—Ç–µ–ª—å"],
            "–°–ª–æ–≤–æ —Å –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º '–≤–æ–¥–∏—Ç–µ–ª–∏'"
        )
        
        # –ì—Ä—É–ø–ø–∞ 4: –¢–µ—Å—Ç—ã —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        print("\nüé™ –ì–†–£–ü–ü–ê 4: –¢–ï–°–¢–´ –°–õ–û–ñ–ù–´–• –ó–ê–ü–†–û–°–û–í")
        print("-" * 60)
        
        self.test_chat_endpoint(
            "–∫–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ —Ç–∞–∫—Å–∏",
            ["–æ—Ç–º–µ–Ω–∏—Ç—å", "–∑–∞–∫–∞–∑"],
            "–°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞"
        )
        
        self.test_chat_endpoint(
            "–≥–¥–µ –º–æ–π –≤–æ–¥–∏—Ç–µ–ª—å —Å–µ–π—á–∞—Å",
            ["–≤–æ–¥–∏—Ç–µ–ª—å", "—Å—Ç–∞—Ç—É—Å", "–ø–æ–µ–∑–¥–∫–∞"],
            "–ó–∞–ø—Ä–æ—Å –æ —Å—Ç–∞—Ç—É—Å–µ –ø–æ–µ–∑–¥–∫–∏"
        )
        
        self.test_chat_endpoint(
            "–ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —á–µ–∫ –∑–∞ –ø–æ–µ–∑–¥–∫—É",
            ["—á–µ–∫", "–∫–≤–∏—Ç–∞–Ω—Ü–∏—è", "–¥–æ–∫—É–º–µ–Ω—Ç"],
            "–ó–∞–ø—Ä–æ—Å —á–µ–∫–∞"
        )
        
        # –ì—Ä—É–ø–ø–∞ 5: –¢–µ—Å—Ç—ã edge cases
        print("\n‚ö†Ô∏è –ì–†–£–ü–ü–ê 5: –¢–ï–°–¢–´ EDGE CASES")
        print("-" * 60)
        
        self.test_chat_endpoint(
            "—Ö–µ–ª–ª–æ",
            [],
            "–ù–µ–ø–æ–Ω—è—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å"
        )
        
        self.test_chat_endpoint(
            "—Å–ø–∞—Å–∏–±–æ",
            [],
            "–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å"
        )
        
        self.test_chat_endpoint(
            "123456",
            [],
            "–ß–∏—Å–ª–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å"
        )
        
        return True
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        print("\n" + "=" * 80)
        print("üìä –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –¢–†–ï–•–£–†–û–í–ù–ï–í–û–ô –°–ò–°–¢–ï–ú–´ –ü–û–ò–°–ö–ê")
        print("=" * 80)
        
        print(f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {self.total_tests}")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {self.passed_tests}")
        print(f"   ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {self.failed_tests}")
        print(f"   üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(self.passed_tests/self.total_tests*100):.1f}%")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –≥—Ä—É–ø–ø–∞–º
        print(f"\nüéØ –ê–Ω–∞–ª–∏–∑ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –æ—Ç–≤–µ—Ç–æ–≤:")
        sources = {}
        for result in self.results:
            if result.get("success"):
                source = result.get("source", "unknown")
                sources[source] = sources.get(source, 0) + 1
        
        for source, count in sources.items():
            percentage = (count / self.passed_tests * 100) if self.passed_tests > 0 else 0
            print(f"   {source}: {count} ({percentage:.1f}%)")
        
        # –ê–Ω–∞–ª–∏–∑ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        print(f"\nüìä –ê–Ω–∞–ª–∏–∑ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:")
        confidences = [r.get("confidence", 0) for r in self.results if r.get("success")]
        if confidences:
            avg_confidence = sum(confidences) / len(confidences)
            min_confidence = min(confidences)
            max_confidence = max(confidences)
            print(f"   –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence:.3f}")
            print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {min_confidence:.3f}")
            print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {max_confidence:.3f}")
        
        # –ù–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã
        failed_tests = [r for r in self.results if not r.get("success")]
        if failed_tests:
            print(f"\n‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã:")
            for test in failed_tests:
                print(f"   - {test['test_name']}: {test.get('error', 'Unknown error')}")
        
        # –£—Å–ø–µ—à–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
        low_confidence_tests = [r for r in self.results 
                               if r.get("success") and r.get("confidence", 0) < 0.3]
        if low_confidence_tests:
            print(f"\n‚ö†Ô∏è –¢–µ—Å—Ç—ã —Å –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é (< 0.3):")
            for test in low_confidence_tests:
                print(f"   - {test['test_name']}: {test.get('confidence', 0):.3f}")
        
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
        report_data = {
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
            "summary": {
                "total_tests": self.total_tests,
                "passed_tests": self.passed_tests,
                "failed_tests": self.failed_tests,
                "success_rate": (self.passed_tests/self.total_tests*100) if self.total_tests > 0 else 0
            },
            "results": self.results
        }
        
        with open("triple_filter_test_results.json", "w", encoding="utf-8") as f:
            json.dump(report_data, f, ensure_ascii=False, indent=2)
        
        print(f"üìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: triple_filter_test_results.json")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = TripleFilterTester()
    
    try:
        success = tester.run_all_tests()
        if success:
            tester.generate_report()
        else:
            print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å")
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
