#!/usr/bin/env python3
"""
üöÄ RAILWAY-–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –í–´–ë–û–†–ê –û–¢–í–ï–¢–û–í
–ë–µ–∑ LLM, —Ç–æ–ª—å–∫–æ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ + fallback
"""

import json
import logging
from typing import Dict, Any, List, Optional
from datetime import datetime
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse
from pydantic import BaseModel
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(title="APARU Railway Optimized", version="11.0.0")

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ú–æ–¥–µ–ª–∏
class ChatRequest(BaseModel):
    text: str
    user_id: str
    locale: str = "ru"

class ChatResponse(BaseModel):
    response: str
    intent: str
    confidence: float
    source: str
    timestamp: str
    suggestions: List[str] = []

class HealthResponse(BaseModel):
    status: str
    architecture: str = "railway_optimized"
    timestamp: str

class RailwayOptimizedClient:
    def __init__(self):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        self.knowledge_base = self._load_knowledge_base()
        
        # –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
        self.morphological_forms = {
            "–Ω–∞—Ü–µ–Ω–∫–∞": ["–Ω–∞—Ü–µ–Ω–∫–∞", "–Ω–∞—Ü–µ–Ω–∫–∏", "–Ω–∞—Ü–µ–Ω–∫—É", "–Ω–∞—Ü–µ–Ω–∫–æ–π", "–¥–æ–ø–ª–∞—Ç–∞", "–¥–æ–ø–ª–∞—Ç—ã", "–Ω–∞–¥–±–∞–≤–∫–∞", "–Ω–∞–¥–±–∞–≤–∫–∏", "–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç", "–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞"],
            "–∫–æ–º—Ñ–æ—Ä—Ç": ["–∫–æ–º—Ñ–æ—Ä—Ç", "–∫–æ–º—Ñ–æ—Ä—Ç–∞", "—Ç–∞—Ä–∏—Ñ", "—Ç–∞—Ä–∏—Ñ–∞", "–∫–ª–∞—Å—Å", "–∫–ª–∞—Å—Å–∞"],
            "—Ä–∞—Å—Ü–µ–Ω–∫–∞": ["—Ä–∞—Å—Ü–µ–Ω–∫–∞", "—Ä–∞—Å—Ü–µ–Ω–∫–∏", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—Å—Ç–æ–∏–º–æ—Å—Ç–∏", "—Ü–µ–Ω–∞", "—Ü–µ–Ω—ã", "—Ü–µ–Ω—É"],
            "–¥–æ—Å—Ç–∞–≤–∫–∞": ["–¥–æ—Å—Ç–∞–≤–∫–∞", "–¥–æ—Å—Ç–∞–≤–∫–∏", "–∫—É—Ä—å–µ—Ä", "–∫—É—Ä—å–µ—Ä–∞", "–ø–æ—Å—ã–ª–∫–∞", "–ø–æ—Å—ã–ª–∫–∏"],
            "–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π": ["–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π", "–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ", "–∑–∞–∫–∞–∑", "–∑–∞–∫–∞–∑–∞", "–∑–∞—Ä–∞–Ω–µ–µ"],
            "–≤–æ–¥–∏—Ç–µ–ª—å": ["–≤–æ–¥–∏—Ç–µ–ª—å", "–≤–æ–¥–∏—Ç–µ–ª—è", "—Ä–∞–±–æ—Ç–∞", "—Ä–∞–±–æ—Ç—ã", "–∑–∞–∫–∞–∑—ã", "–∑–∞–∫–∞–∑"],
            "–±–∞–ª–∞–Ω—Å": ["–±–∞–ª–∞–Ω—Å", "–±–∞–ª–∞–Ω—Å–∞", "–ø–æ–ø–æ–ª–Ω–∏—Ç—å", "–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è", "–æ–ø–ª–∞—Ç–∞", "–æ–ø–ª–∞—Ç—ã", "—Å—á–µ—Ç", "—Å—á–µ—Ç–∞", "–¥–µ–Ω—å–≥–∏"],
            "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ": ["–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "–æ—à–∏–±–∫–∞", "–æ—à–∏–±–∫–∏", "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "–≥–ª—é—á–∏—Ç", "—Ç–æ—Ä–º–æ–∑–∏—Ç", "–æ–±–Ω–æ–≤–∏—Ç—å"],
            "–ø—Ä–æ–º–æ–∫–æ–¥": ["–ø—Ä–æ–º–æ–∫–æ–¥", "–ø—Ä–æ–º–æ–∫–æ–¥–∞", "—Å–∫–∏–¥–∫–∞", "—Å–∫–∏–¥–∫–∏", "–±–æ–Ω—É—Å", "–±–æ–Ω—É—Å–∞"],
            "–æ—Ç–º–µ–Ω–∞": ["–æ—Ç–º–µ–Ω–∞", "–æ—Ç–º–µ–Ω—ã", "–æ—Ç–º–µ–Ω–∏—Ç—å", "–æ—Ç–º–µ–Ω—ã"]
        }
        
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: {len(self.knowledge_base)} –æ—Ç–≤–µ—Ç–æ–≤")
    
    def _load_knowledge_base(self) -> List[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤"""
        try:
            with open("BZ.txt", "r", encoding="utf-8") as f:
                data = json.load(f)
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: BZ.txt ({len(data)} –æ—Ç–≤–µ—Ç–æ–≤)")
                return data
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
            return []
    
    def find_best_answer(self, question: str) -> Dict[str, Any]:
        """–ù–∞—Ö–æ–¥–∏—Ç –ª—É—á—à–∏–π –æ—Ç–≤–µ—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        start_time = datetime.now()
        
        try:
            # 1. –ü—Ä–æ–±—É–µ–º –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
            logger.info("üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫...")
            result = self._enhanced_morphological_search(question)
            
            if result:
                processing_time = (datetime.now() - start_time).total_seconds()
                logger.info(f"‚úÖ –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {processing_time:.2f}—Å")
                return result
            
            # 2. Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É –ø–æ–∏—Å–∫—É –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            logger.info("üîÑ Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É –ø–æ–∏—Å–∫—É...")
            result = self._enhanced_simple_search(question)
            processing_time = (datetime.now() - start_time).total_seconds()
            logger.info(f"‚úÖ Fallback –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {processing_time:.2f}—Å")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            return {
                "answer": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.",
                "category": "error",
                "confidence": 0.0,
                "source": "error"
            }
    
    def _enhanced_morphological_search(self, question: str) -> Optional[Dict[str, Any]]:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫"""
        question_lower = question.lower()
        
        # –ò—â–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ —Ñ–æ—Ä–º–∞–º–∏
        for base_word, forms in self.morphological_forms.items():
            for form in forms:
                if form in question_lower:
                    # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
                    category = self._find_category_by_keyword(base_word)
                    if category:
                        return {
                            "answer": category["answer"],
                            "category": f"morphological_match_{base_word}",
                            "confidence": 0.9,
                            "source": "morphological_search"
                        }
        
        return None
    
    def _find_category_by_keyword(self, keyword: str) -> Optional[Dict[str, Any]]:
        """–ù–∞—Ö–æ–¥–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É"""
        keyword_mapping = {
            "–Ω–∞—Ü–µ–Ω–∫–∞": 0, "–¥–æ–ø–ª–∞—Ç–∞": 0, "–Ω–∞–¥–±–∞–≤–∫–∞": 0, "–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç": 0,
            "–∫–æ–º—Ñ–æ—Ä—Ç": 1, "—Ç–∞—Ä–∏—Ñ": 1, "–∫–ª–∞—Å—Å": 1,
            "—Ä–∞—Å—Ü–µ–Ω–∫–∞": 2, "—Å—Ç–æ–∏–º–æ—Å—Ç—å": 2, "—Ü–µ–Ω–∞": 2,
            "–¥–æ—Å—Ç–∞–≤–∫–∞": 3, "–∑–∞–∫–∞–∑": 3,
            "–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π": 4, "–∑–∞—Ä–∞–Ω–µ–µ": 4,
            "–≤–æ–¥–∏—Ç–µ–ª—å": 5, "—Ä–∞–±–æ—Ç–∞": 5,
            "–±–∞–ª–∞–Ω—Å": 6, "–ø–æ–ø–æ–ª–Ω–∏—Ç—å": 6, "–æ–ø–ª–∞—Ç–∞": 6, "—Å—á–µ—Ç": 6, "–¥–µ–Ω—å–≥–∏": 6,
            "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ": 7, "–æ—à–∏–±–∫–∞": 7, "–≥–ª—é—á–∏—Ç": 7, "—Ç–æ—Ä–º–æ–∑–∏—Ç": 7,
            "–ø—Ä–æ–º–æ–∫–æ–¥": 8, "—Å–∫–∏–¥–∫–∞": 8, "–±–æ–Ω—É—Å": 8,
            "–æ—Ç–º–µ–Ω–∞": 9, "–æ—Ç–º–µ–Ω–∏—Ç—å": 9
        }
        
        category_index = keyword_mapping.get(keyword)
        if category_index is not None and category_index < len(self.knowledge_base):
            return self.knowledge_base[category_index]
        
        return None
    
    def _enhanced_simple_search(self, question: str) -> Dict[str, Any]:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (fallback)"""
        question_lower = question.lower()
        
        best_match = None
        best_score = 0
        
        for item in self.knowledge_base:
            keywords = item.get("keywords", [])
            variations = item.get("question_variations", [])
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            keyword_matches = 0
            for keyword in keywords:
                if keyword.lower() in question_lower:
                    keyword_matches += 1
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤–∞—Ä–∏–∞—Ü–∏–π
            variation_matches = 0
            for variation in variations:
                if variation.lower() in question_lower:
                    variation_matches += 1
            
            # –û–±—â–∏–π —Å—á–µ—Ç
            total_score = keyword_matches + variation_matches
            
            if total_score > best_score:
                best_score = total_score
                best_match = item
        
        if best_match and best_score > 0:
            return {
                "answer": best_match.get("answer", "–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"),
                "category": "keyword_match",
                "confidence": min(0.9, best_score * 0.2),
                "source": "keyword_search"
            }
        
        # Fallback
        return {
            "answer": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
            "category": "unknown",
            "confidence": 0.0,
            "source": "fallback"
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
railway_client = RailwayOptimizedClient()

@app.get("/")
async def root():
    return {
        "message": "APARU Railway Optimized", 
        "status": "running", 
        "version": "11.0.0",
        "architecture": "railway_optimized"
    }

@app.get("/health", response_model=HealthResponse)
async def health():
    return HealthResponse(
        status="healthy",
        architecture="railway_optimized",
        timestamp=datetime.now().isoformat()
    )

@app.get("/webapp", response_class=HTMLResponse)
async def webapp():
    """Telegram WebApp –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    try:
        with open("webapp.html", "r", encoding="utf-8") as f:
            html_content = f.read()
        return HTMLResponse(content=html_content)
    except FileNotFoundError:
        return HTMLResponse(
            content="<h1>WebApp –Ω–µ –Ω–∞–π–¥–µ–Ω</h1><p>–§–∞–π–ª webapp.html –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</p>",
            status_code=404
        )

@app.post("/chat", response_model=ChatResponse)
async def chat(request: ChatRequest):
    """–û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —á–∞—Ç–∞"""
    try:
        result = railway_client.find_best_answer(request.text)
        
        return ChatResponse(
            response=result["answer"],
            intent=result["category"],
            confidence=result["confidence"],
            source=result["source"],
            timestamp=datetime.now().isoformat(),
            suggestions=[]
        )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /chat: {e}")
        return ChatResponse(
            response="–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.",
            intent="error",
            confidence=0.0,
            source="error",
            timestamp=datetime.now().isoformat(),
            suggestions=[]
        )

if __name__ == "__main__":
    import uvicorn
    
    # Railway –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é PORT
    port = int(os.environ.get("PORT", 8000))
    uvicorn.run(app, host="0.0.0.0", port=port)
