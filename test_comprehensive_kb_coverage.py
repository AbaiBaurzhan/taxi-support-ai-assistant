#!/usr/bin/env python3
"""
üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –ü–û–ö–†–´–¢–ò–Ø –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ (keywords) –∏ –∫–∞–∂–¥—É—é –≤–∞—Ä–∏–∞—Ü–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤ (question_variations)
–∏–∑ kb.json –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤
"""

import requests
import json
import time
from typing import Dict, List, Tuple

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
API_BASE = "http://localhost:8000"
TEST_USER_ID = "test_kb_coverage"
TEST_LOCALE = "ru"

class KnowledgeBaseCoverageTester:
    def __init__(self):
        self.results = []
        self.total_tests = 0
        self.passed_tests = 0
        self.failed_tests = 0
        self.kb_data = None
        
    def load_kb_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        try:
            with open('backend/kb.json', 'r', encoding='utf-8') as f:
                self.kb_data = json.load(f)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: {len(self.kb_data.get('faq', []))} FAQ –∑–∞–ø–∏—Å–µ–π")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ kb.json: {e}")
            return False
    
    def wait_for_server(self, max_attempts=10):
        """–ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        print("üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
        for i in range(max_attempts):
            try:
                response = requests.get(f"{API_BASE}/health", timeout=2)
                if response.status_code == 200:
                    print("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é")
                    return True
            except requests.exceptions.RequestException:
                pass
            time.sleep(1)
            print(f"   –ü–æ–ø—ã—Ç–∫–∞ {i+1}/{max_attempts}...")
        
        print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è")
        return False
    
    def test_query(self, query: str, expected_answer_snippet: str = None, test_type: str = "unknown") -> Dict:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –∫ API"""
        print(f"   üß™ –¢–µ—Å—Ç–∏—Ä—É—é: '{query}'")
        
        try:
            response = requests.post(
                f"{API_BASE}/chat",
                json={
                    "text": query,
                    "user_id": TEST_USER_ID,
                    "locale": TEST_LOCALE
                },
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                
                result = {
                    "query": query,
                    "test_type": test_type,
                    "success": True,
                    "response": data.get("response", ""),
                    "confidence": data.get("confidence", 0),
                    "source": data.get("source", ""),
                    "intent": data.get("intent", ""),
                    "expected_answer_snippet": expected_answer_snippet
                }
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–º—É –æ—Ç–≤–µ—Ç—É
                if expected_answer_snippet:
                    response_text = data.get("response", "").lower()
                    expected_snippet = expected_answer_snippet.lower()
                    if expected_snippet in response_text:
                        result["answer_match"] = True
                        print(f"      ‚úÖ –û—Ç–≤–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É")
                    else:
                        result["answer_match"] = False
                        print(f"      ‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É")
                        print(f"      üìù –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_answer_snippet[:50]}...")
                        print(f"      üí¨ –ü–æ–ª—É—á–µ–Ω–æ: {data.get('response', '')[:50]}...")
                
                print(f"      üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {data.get('confidence', 0):.2f}")
                print(f"      üîç –ò—Å—Ç–æ—á–Ω–∏–∫: {data.get('source', '')}")
                
                self.passed_tests += 1
                
            else:
                result = {
                    "query": query,
                    "test_type": test_type,
                    "success": False,
                    "error": f"HTTP {response.status_code}: {response.text}"
                }
                print(f"      ‚ùå HTTP {response.status_code}")
                self.failed_tests += 1
                
        except Exception as e:
            result = {
                "query": query,
                "test_type": test_type,
                "success": False,
                "error": str(e)
            }
            print(f"      ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            self.failed_tests += 1
        
        self.total_tests += 1
        self.results.append(result)
        return result
    
    def test_keywords_coverage(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        print("\nüîë –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–õ–Æ–ß–ï–í–´–• –°–õ–û–í (KEYWORDS)")
        print("=" * 60)
        
        if not self.kb_data:
            print("‚ùå –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return
        
        faq_items = self.kb_data.get("faq", [])
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(faq_items)} FAQ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        for i, item in enumerate(faq_items, 1):
            question = item.get("question", "")
            answer = item.get("answer", "")
            keywords = item.get("keywords", [])
            
            print(f"\nüìã FAQ {i}/{len(faq_items)}: {question}")
            print(f"üîë –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {len(keywords)}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
            for keyword in keywords:
                if keyword.strip():  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 30 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
                    answer_snippet = answer[:100] if answer else ""
                    self.test_query(
                        keyword, 
                        answer_snippet, 
                        f"keyword_for_{question[:30]}"
                    )
    
    def test_question_variations_coverage(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        print("\nüìù –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–ê–†–ò–ê–¶–ò–ô –í–û–ü–†–û–°–û–í (QUESTION_VARIATIONS)")
        print("=" * 60)
        
        if not self.kb_data:
            print("‚ùå –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return
        
        faq_items = self.kb_data.get("faq", [])
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(faq_items)} FAQ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        for i, item in enumerate(faq_items, 1):
            question = item.get("question", "")
            answer = item.get("answer", "")
            variations = item.get("question_variations", [])
            
            print(f"\nüìã FAQ {i}/{len(faq_items)}: {question}")
            print(f"üìù –í–∞—Ä–∏–∞—Ü–∏–π –≤–æ–ø—Ä–æ—Å–æ–≤: {len(variations)}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –≤–∞—Ä–∏–∞—Ü–∏—é –≤–æ–ø—Ä–æ—Å–∞
            for variation in variations:
                if variation.strip():  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
                    answer_snippet = answer[:100] if answer else ""
                    self.test_query(
                        variation, 
                        answer_snippet, 
                        f"variation_for_{question[:30]}"
                    )
    
    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        print("üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–ö–†–´–¢–ò–Ø –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô")
        print("=" * 80)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        if not self.load_kb_data():
            return False
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        if not self.wait_for_server():
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        self.test_keywords_coverage()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
        self.test_question_variations_coverage()
        
        return True
    
    def generate_detailed_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        print("\n" + "=" * 80)
        print("üìä –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –ü–û–ö–†–´–¢–ò–Ø –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô")
        print("=" * 80)
        
        print(f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {self.total_tests}")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {self.passed_tests}")
        print(f"   ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {self.failed_tests}")
        print(f"   üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(self.passed_tests/self.total_tests*100):.1f}%")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º —Ç–µ—Å—Ç–æ–≤
        print(f"\nüéØ –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º —Ç–µ—Å—Ç–æ–≤:")
        test_types = {}
        for result in self.results:
            if result.get("success"):
                test_type = result.get("test_type", "unknown")
                test_types[test_type] = test_types.get(test_type, 0) + 1
        
        for test_type, count in test_types.items():
            percentage = (count / self.passed_tests * 100) if self.passed_tests > 0 else 0
            print(f"   {test_type}: {count} ({percentage:.1f}%)")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –æ—Ç–≤–µ—Ç–æ–≤
        print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –æ—Ç–≤–µ—Ç–æ–≤:")
        sources = {}
        for result in self.results:
            if result.get("success"):
                source = result.get("source", "unknown")
                sources[source] = sources.get(source, 0) + 1
        
        for source, count in sources.items():
            percentage = (count / self.passed_tests * 100) if self.passed_tests > 0 else 0
            print(f"   {source}: {count} ({percentage:.1f}%)")
        
        # –ê–Ω–∞–ª–∏–∑ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        print(f"\nüìä –ê–Ω–∞–ª–∏–∑ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:")
        confidences = [r.get("confidence", 0) for r in self.results if r.get("success")]
        if confidences:
            avg_confidence = sum(confidences) / len(confidences)
            min_confidence = min(confidences)
            max_confidence = max(confidences)
            print(f"   –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence:.3f}")
            print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {min_confidence:.3f}")
            print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {max_confidence:.3f}")
        
        # –ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –æ—Ç–≤–µ—Ç–æ–≤
        print(f"\nüéØ –ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –æ—Ç–≤–µ—Ç–æ–≤:")
        answer_matches = [r.get("answer_match", False) for r in self.results if r.get("success")]
        if answer_matches:
            match_count = sum(answer_matches)
            match_percentage = (match_count / len(answer_matches) * 100) if answer_matches else 0
            print(f"   –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–µ–º—ã–º –æ—Ç–≤–µ—Ç–∞–º: {match_count}/{len(answer_matches)} ({match_percentage:.1f}%)")
        
        # –ù–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã
        failed_tests = [r for r in self.results if not r.get("success")]
        if failed_tests:
            print(f"\n‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã:")
            for test in failed_tests[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                print(f"   - {test['query'][:50]}...: {test.get('error', 'Unknown error')}")
            if len(failed_tests) > 10:
                print(f"   ... –∏ –µ—â–µ {len(failed_tests) - 10} –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")
        
        # –¢–µ—Å—Ç—ã —Å –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
        low_confidence_tests = [r for r in self.results 
                               if r.get("success") and r.get("confidence", 0) < 0.5]
        if low_confidence_tests:
            print(f"\n‚ö†Ô∏è –¢–µ—Å—Ç—ã —Å –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é (< 0.5):")
            for test in low_confidence_tests[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                print(f"   - {test['query'][:50]}...: {test.get('confidence', 0):.3f}")
            if len(low_confidence_tests) > 10:
                print(f"   ... –∏ –µ—â–µ {len(low_confidence_tests) - 10} —Ç–µ—Å—Ç–æ–≤ —Å –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é")
        
        print("\nüéâ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
        report_data = {
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
            "summary": {
                "total_tests": self.total_tests,
                "passed_tests": self.passed_tests,
                "failed_tests": self.failed_tests,
                "success_rate": (self.passed_tests/self.total_tests*100) if self.total_tests > 0 else 0
            },
            "kb_coverage": {
                "total_faq_items": len(self.kb_data.get("faq", [])) if self.kb_data else 0,
                "total_keywords_tested": len([r for r in self.results if "keyword" in r.get("test_type", "")]),
                "total_variations_tested": len([r for r in self.results if "variation" in r.get("test_type", "")])
            },
            "results": self.results
        }
        
        with open("kb_coverage_test_results.json", "w", encoding="utf-8") as f:
            json.dump(report_data, f, ensure_ascii=False, indent=2)
        
        print(f"üìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: kb_coverage_test_results.json")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = KnowledgeBaseCoverageTester()
    
    try:
        success = tester.run_comprehensive_test()
        if success:
            tester.generate_detailed_report()
        else:
            print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å")
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
