#!/usr/bin/env python3
"""
üß™ APARU LLM Test Script
–ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LLM —Å ngrok
"""

import subprocess
import time
import requests
import json
import os

def test_llm():
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LLM –¥–ª—è APARU")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Ollama
    print("üîç –ü—Ä–æ–≤–µ—Ä—è—é Ollama...")
    try:
        result = subprocess.run(["ollama", "--version"], 
                              capture_output=True, text=True, timeout=5)
        if result.returncode == 0:
            print("‚úÖ Ollama —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            print("‚ùå Ollama –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
    except:
        print("‚ùå Ollama –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Ollama
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é Ollama...")
    ollama_process = subprocess.Popen(["ollama", "serve"])
    time.sleep(3)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    try:
        response = requests.get("http://localhost:11434/api/tags", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Ollama –∑–∞–ø—É—â–µ–Ω")
        else:
            print("‚ùå Ollama –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
            return
    except:
        print("‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º ngrok
    print("üåê –ó–∞–ø—É—Å–∫–∞—é ngrok...")
    ngrok_process = subprocess.Popen(["ngrok", "http", "11434"])
    time.sleep(3)
    
    # –ü–æ–ª—É—á–∞–µ–º URL —Ç—É–Ω–Ω–µ–ª—è
    try:
        response = requests.get("http://localhost:4040/api/tunnels", timeout=5)
        if response.status_code == 200:
            data = response.json()
            tunnels = data.get("tunnels", [])
            if tunnels:
                tunnel_url = tunnels[0]["public_url"]
                print(f"‚úÖ –¢—É–Ω–Ω–µ–ª—å —Å–æ–∑–¥–∞–Ω: {tunnel_url}")
            else:
                print("‚ùå –¢—É–Ω–Ω–µ–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω")
                return
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL —Ç—É–Ω–Ω–µ–ª—è")
            return
    except:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL —Ç—É–Ω–Ω–µ–ª—è")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º LLM
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é LLM...")
    
    test_cases = [
        {
            "name": "–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–≤–µ—Ç",
            "prompt": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
            "model": "llama2:7b"
        },
        {
            "name": "–í–æ–ø—Ä–æ—Å –æ —Ç–∞–∫—Å–∏",
            "prompt": "–ì–¥–µ –º–æ–π –≤–æ–¥–∏—Ç–µ–ª—å?",
            "model": "llama2:7b"
        },
        {
            "name": "–¶–µ–Ω–∞ –ø–æ–µ–∑–¥–∫–∏",
            "prompt": "–ö–∞–∫ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ü–µ–Ω–∞ –ø–æ–µ–∑–¥–∫–∏?",
            "model": "llama2:7b"
        }
    ]
    
    for test_case in test_cases:
        print(f"\nüìù –¢–µ—Å—Ç: {test_case['name']}")
        
        payload = {
            "model": test_case["model"],
            "prompt": test_case["prompt"],
            "stream": False,
            "options": {
                "temperature": 0.7,
                "max_tokens": 100
            }
        }
        
        try:
            response = requests.post(
                f"{tunnel_url}/api/generate",
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                answer = result.get("response", "")
                print(f"‚úÖ –û—Ç–≤–µ—Ç: {answer[:100]}...")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º APARU API
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä—É—é APARU API...")
    
    aparu_tests = [
        {
            "text": "–ì–¥–µ –≤–æ–¥–∏—Ç–µ–ª—å?",
            "user_id": "test123",
            "locale": "RU"
        },
        {
            "text": "–ü—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫",
            "user_id": "test123", 
            "locale": "RU"
        },
        {
            "text": "–ö–∞–∫ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ü–µ–Ω–∞?",
            "user_id": "test123",
            "locale": "RU"
        }
    ]
    
    for test in aparu_tests:
        print(f"\nüìù APARU —Ç–µ—Å—Ç: {test['text']}")
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
            response = requests.post(
                "http://localhost:8000/chat",
                json=test,
                timeout=10
            )
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ –û—Ç–≤–µ—Ç: {result['response'][:100]}...")
                print(f"   Intent: {result['intent']}, Source: {result['source']}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è Railway
    print(f"\n‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Railway:")
    print(f"LLM_URL={tunnel_url}")
    print(f"LLM_MODEL=llama2:7b")
    print(f"LLM_ENABLED=true")
    
    print(f"\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üåê –¢—É–Ω–Ω–µ–ª—å: {tunnel_url}")
    print(f"‚èπÔ∏è –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é...")
        ollama_process.terminate()
        ngrok_process.terminate()
        print("‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

if __name__ == "__main__":
    test_llm()
