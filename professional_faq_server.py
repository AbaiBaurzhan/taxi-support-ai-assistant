#!/usr/bin/env python3
"""
üöÄ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π FAQ-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç APARU - FastAPI —Å–µ—Ä–≤–µ—Ä
API endpoints: POST /ask, GET /health
"""

import logging
from typing import Dict, Any, Optional
from datetime import datetime
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from professional_faq_assistant import ProfessionalFAQAssistant, ask_question, expand_knowledge, get_statistics

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="Professional FAQ Assistant APARU",
    description="–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π FAQ-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –≥–∏–±—Ä–∏–¥–Ω—ã–º –ø–æ–∏—Å–∫–æ–º",
    version="1.0.0"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class AskRequest(BaseModel):
    question: str
    user_id: Optional[str] = None
    locale: str = "ru"

class AskResponse(BaseModel):
    answer: str
    confidence: float
    category: Optional[str] = None
    suggestions: list = []
    request_id: str
    source: str
    timestamp: str

class ExpandRequest(BaseModel):
    question: str
    answer: str
    category: str = "general"

class HealthResponse(BaseModel):
    status: str
    timestamp: str
    statistics: Dict[str, Any]

class StatisticsResponse(BaseModel):
    statistics: Dict[str, Any]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç
assistant = ProfessionalFAQAssistant()

@app.get("/health", response_model=HealthResponse)
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    try:
        stats = get_statistics()
        return HealthResponse(
            status="healthy",
            timestamp=datetime.now().isoformat(),
            statistics=stats
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
        raise HTTPException(status_code=500, detail="Service unhealthy")

@app.post("/ask", response_model=AskResponse)
async def ask_faq(request: AskRequest):
    """–û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤"""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å: {request.question}")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        result = ask_question(request.question)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = AskResponse(
            answer=result['answer'],
            confidence=result['confidence'],
            category=result.get('category'),
            suggestions=result.get('suggestions', []),
            request_id=result['request_id'],
            source=result.get('source', 'unknown'),
            timestamp=datetime.now().isoformat()
        )
        
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: confidence={result['confidence']:.2f}")
        return response
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@app.post("/expand")
async def expand_knowledge_base(request: ExpandRequest):
    """–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    try:
        logger.info(f"–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã: {request.question[:50]}...")
        
        expand_knowledge(request.question, request.answer, request.category)
        
        return {
            "status": "success",
            "message": "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –¥–æ–ø–æ–ª–Ω–µ–Ω–∞",
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@app.get("/statistics", response_model=StatisticsResponse)
async def get_system_statistics():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        stats = get_statistics()
        return StatisticsResponse(statistics=stats)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint"""
    return {
        "service": "Professional FAQ Assistant APARU",
        "version": "1.0.0",
        "endpoints": {
            "ask": "POST /ask - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å",
            "health": "GET /health - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è",
            "expand": "POST /expand - –î–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π",
            "statistics": "GET /statistics - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
        },
        "timestamp": datetime.now().isoformat()
    }

if __name__ == "__main__":
    import uvicorn
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ FAQ-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ APARU")
    logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:")
    
    stats = get_statistics()
    logger.info(f"   –ó–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ: {stats['total_records']}")
    logger.info(f"   –≠–º–±–µ–¥–¥–∏–Ω–≥–∏: {'‚úÖ' if stats['embeddings_available'] else '‚ùå'}")
    logger.info(f"   Fuzzy search: {'‚úÖ' if stats['fuzzy_available'] else '‚ùå'}")
    
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=8001,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å main.py
        log_level="info"
    )
