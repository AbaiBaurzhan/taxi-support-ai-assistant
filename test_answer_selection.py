#!/usr/bin/env python3
"""
üéØ –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –í–´–ë–û–†–ê –ì–û–¢–û–í–´–• –û–¢–í–ï–¢–û–í
"""

from main import answer_selection_client
import time

print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –í–´–ë–û–†–ê –ì–û–¢–û–í–´–• –û–¢–í–ï–¢–û–í:")
print("=" * 60)

# –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –≤–∞—Ä–∏–∞—Ü–∏–π
test_questions = [
    "–ß—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞—Ü–µ–Ω–∫–∞?",
    "–ü–æ—á–µ–º—É —É –º–µ–Ω—è –ø–æ—è–≤–∏–ª–∞—Å—å –¥–æ–ø–ª–∞—Ç–∞ –≤ –∑–∞–∫–∞–∑–µ?",
    "–ß—Ç–æ —Ç–∞–∫–æ–µ –¢–∞—Ä–∏—Ñ –ö–æ–º—Ñ–æ—Ä—Ç?",
    "–ß–µ–º –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ö–æ–º—Ñ–æ—Ä—Ç –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞?",
    "–ö–∞–∫ —É–∑–Ω–∞—Ç—å —Ä–∞—Å—Ü–µ–Ω–∫—É?",
    "–ö–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏?",
    "–ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É?",
    "–ö–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–∫–∏?",
    "–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑?",
    "–ö–∞–∫ –º–Ω–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã –∏ —á—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ?"
]

results = []
for i, question in enumerate(test_questions, 1):
    print(f"{i:2d}. {question}")
    start_time = time.time()
    result = answer_selection_client.find_best_answer(question)
    processing_time = time.time() - start_time
    
    print(f"    ‚úÖ –û—Ç–≤–µ—Ç: {result['answer'][:80]}...")
    print(f"    üìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {result['category']}")
    print(f"    üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']}")
    print(f"    üîß –ò—Å—Ç–æ—á–Ω–∏–∫: {result['source']}")
    print(f"    ‚è±Ô∏è –í—Ä–µ–º—è: {processing_time:.2f}—Å")
    print("-" * 50)
    
    results.append({
        'question': question,
        'answer': result['answer'],
        'category': result['category'],
        'confidence': result['confidence'],
        'source': result['source'],
        'time': processing_time
    })

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
print("=" * 40)

llm_selection_count = sum(1 for r in results if r['source'] == 'llm_answer_selection')
keyword_search_count = sum(1 for r in results if r['source'] == 'keyword_search')
fallback_count = sum(1 for r in results if r['source'] == 'fallback')

print(f"üéØ LLM –≤—ã–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤: {llm_selection_count}/{len(results)} ({llm_selection_count/len(results)*100:.1f}%)")
print(f"üîç –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: {keyword_search_count}/{len(results)} ({keyword_search_count/len(results)*100:.1f}%)")
print(f"‚ùå Fallback: {fallback_count}/{len(results)} ({fallback_count/len(results)*100:.1f}%)")

avg_time = sum(r['time'] for r in results) / len(results)
print(f"‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.2f}—Å")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤
good_answers = sum(1 for r in results if r['confidence'] > 0.8)
print(f"‚úÖ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {good_answers}/{len(results)} ({good_answers/len(results)*100:.1f}%)")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤
correct_selections = 0
for i, result in enumerate(results):
    question = result['question'].lower()
    category = result['category'].lower()
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤—ã–±–æ—Ä–∞
    if '–Ω–∞—Ü–µ–Ω–∫–∞' in question or '–¥–æ–ø–ª–∞—Ç–∞' in question:
        if '–æ—Ç–≤–µ—Ç 1' in category or 'keyword_match' in category:
            correct_selections += 1
    elif '–∫–æ–º—Ñ–æ—Ä—Ç' in question or '—Ç–∞—Ä–∏—Ñ' in question:
        if '–æ—Ç–≤–µ—Ç 2' in category or 'keyword_match' in category:
            correct_selections += 1
    elif '—Ä–∞—Å—Ü–µ–Ω–∫–∞' in question or '—Å—Ç–æ–∏–º–æ—Å—Ç—å' in question:
        if '–æ—Ç–≤–µ—Ç 3' in category or 'keyword_match' in category:
            correct_selections += 1
    elif '–¥–æ—Å—Ç–∞–≤–∫–∞' in question or '–∑–∞–∫–∞–∑' in question:
        if '–æ—Ç–≤–µ—Ç 4' in category or 'keyword_match' in category:
            correct_selections += 1
    elif '–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π' in question:
        if '–æ—Ç–≤–µ—Ç 5' in category or 'keyword_match' in category:
            correct_selections += 1
    elif '–ø—Ä–∏–Ω–∏–º–∞—Ç—å' in question or '–≤–æ–¥–∏—Ç–µ–ª—å' in question:
        if '–æ—Ç–≤–µ—Ç 6' in category or 'keyword_match' in category:
            correct_selections += 1

print(f"üéØ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤—ã–±–æ—Ä–æ–≤: {correct_selections}/{len(results)} ({correct_selections/len(results)*100:.1f}%)")

print("\nüéØ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")
