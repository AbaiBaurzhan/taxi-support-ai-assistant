#!/usr/bin/env python3
"""
üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ LLM –ú–û–î–ï–õ–ò APARU
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
"""

import requests
import json
import time
from datetime import datetime

class LLMModelTester:
    def __init__(self):
        self.local_server_url = "http://172.20.10.5:8001"
        self.railway_url = "https://taxi-support-ai-assistant-production.up.railway.app"
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        self.test_questions = [
            # –ù–∞—Ü–µ–Ω–∫–∏ –∏ —Ç–∞—Ä–∏—Ñ—ã
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞—Ü–µ–Ω–∫–∞?",
            "–ü–æ—á–µ–º—É –ø–æ—è–≤–∏–ª–∞—Å—å –Ω–∞—Ü–µ–Ω–∫–∞?",
            "–ö–∞–∫ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞—Ü–µ–Ω–∫–∞?",
            "–ö–æ–≥–¥–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –Ω–∞—Ü–µ–Ω–∫–∞?",
            "–ú–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞—Ü–µ–Ω–∫—É?",
            
            # –î–æ—Å—Ç–∞–≤–∫–∞
            "–ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É?",
            "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –¥–æ—Å—Ç–∞–≤–∫–∞?",
            "–ö–∞–∫–∏–µ –µ—Å—Ç—å —Å–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏?",
            "–ú–æ–∂–Ω–æ –ª–∏ –æ—Ç—Å–ª–µ–¥–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É?",
            "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –µ—Å–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∞ –æ–ø–æ–∑–¥–∞–ª–∞?",
            
            # –ë–∞–ª–∞–Ω—Å –∏ –ø–ª–∞—Ç–µ–∂–∏
            "–ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å?",
            "–ö–∞–∫–∏–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –µ—Å—Ç—å?",
            "–ü–æ—á–µ–º—É –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–ª–∞—Ç–µ–∂?",
            "–ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å?",
            "–ú–æ–∂–Ω–æ –ª–∏ –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏?",
            
            # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç",
            "–ö–∞–∫ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ?",
            "–ü–æ—á–µ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ç–æ—Ä–º–æ–∑–∏—Ç?",
            "–ö–∞–∫ –≤–æ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ?",
            "–ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å –æ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
            
            # –†–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
            "–Ω–∞—Ü–µ–Ω–∫–∏",
            "–¥–æ—Å—Ç–∞–≤–∫–∞",
            "–±–∞–ª–∞–Ω—Å",
            "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
            "—Ç–∞—Ä–∏—Ñ –∫–æ–º—Ñ–æ—Ä—Ç–∞"
        ]
        
        # –û–∂–∏–¥–∞–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
        self.expected_categories = {
            "–Ω–∞—Ü–µ–Ω–∫–∞": ["–Ω–∞—Ü–µ–Ω–∫–∞", "—Ç–∞—Ä–∏—Ñ", "—Ü–µ–Ω–∞", "—Å—Ç–æ–∏–º–æ—Å—Ç—å"],
            "–¥–æ—Å—Ç–∞–≤–∫–∞": ["–¥–æ—Å—Ç–∞–≤–∫–∞", "–∫—É—Ä—å–µ—Ä", "–∑–∞–∫–∞–∑"],
            "–±–∞–ª–∞–Ω—Å": ["–±–∞–ª–∞–Ω—Å", "–ø–ª–∞—Ç–µ–∂", "–æ–ø–ª–∞—Ç–∞", "–ø–æ–ø–æ–ª–Ω–∏—Ç—å"],
            "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ": ["–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "–æ–±–Ω–æ–≤–∏—Ç—å", "–≤–æ–π—Ç–∏", "–ø–∞—Ä–æ–ª—å"]
        }
    
    def test_local_server(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä —Å LLM"""
        print("üß™ –¢–ï–°–¢–ò–†–£–Æ –õ–û–ö–ê–õ–¨–ù–´–ô –°–ï–†–í–ï–† –° LLM –ú–û–î–ï–õ–¨–Æ")
        print("=" * 60)
        
        results = []
        total_questions = len(self.test_questions)
        
        for i, question in enumerate(self.test_questions, 1):
            print(f"\nüìù –í–æ–ø—Ä–æ—Å {i}/{total_questions}: {question}")
            
            try:
                start_time = time.time()
                
                payload = {
                    "text": question,
                    "user_id": f"test_{i}",
                    "locale": "ru"
                }
                
                response = requests.post(
                    f"{self.local_server_url}/chat",
                    json=payload,
                    timeout=180  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è LLM
                )
                
                processing_time = time.time() - start_time
                
                if response.status_code == 200:
                    data = response.json()
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                    answer = data.get("response", "")
                    category = data.get("intent", "unknown")
                    confidence = data.get("confidence", 0.0)
                    source = data.get("source", "unknown")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞
                    quality_score = self._analyze_answer_quality(question, answer, category)
                    
                    result = {
                        "question": question,
                        "answer": answer[:100] + "..." if len(answer) > 100 else answer,
                        "category": category,
                        "confidence": confidence,
                        "source": source,
                        "processing_time": round(processing_time, 2),
                        "quality_score": quality_score,
                        "status": "success"
                    }
                    
                    print(f"‚úÖ –û—Ç–≤–µ—Ç: {answer[:50]}...")
                    print(f"üìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}, –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f}")
                    print(f"‚è±Ô∏è –í—Ä–µ–º—è: {processing_time:.2f}—Å, –ö–∞—á–µ—Å—Ç–≤–æ: {quality_score:.2f}")
                    
                else:
                    result = {
                        "question": question,
                        "answer": f"–û—à–∏–±–∫–∞: {response.status_code}",
                        "category": "error",
                        "confidence": 0.0,
                        "source": "error",
                        "processing_time": processing_time,
                        "quality_score": 0.0,
                        "status": "error"
                    }
                    
                    print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                
                results.append(result)
                
            except Exception as e:
                result = {
                    "question": question,
                    "answer": f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}",
                    "category": "error",
                    "confidence": 0.0,
                    "source": "error",
                    "processing_time": 0.0,
                    "quality_score": 0.0,
                    "status": "exception"
                }
                
                print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
                results.append(result)
        
        return results
    
    def test_railway_server(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Railway —Å–µ—Ä–≤–µ—Ä"""
        print("\nüåê –¢–ï–°–¢–ò–†–£–Æ RAILWAY –°–ï–†–í–ï–†")
        print("=" * 60)
        
        results = []
        total_questions = len(self.test_questions)
        
        for i, question in enumerate(self.test_questions, 1):
            print(f"\nüìù –í–æ–ø—Ä–æ—Å {i}/{total_questions}: {question}")
            
            try:
                start_time = time.time()
                
                payload = {
                    "text": question,
                    "user_id": f"test_{i}",
                    "locale": "ru"
                }
                
                response = requests.post(
                    f"{self.railway_url}/chat",
                    json=payload,
                    timeout=60
                )
                
                processing_time = time.time() - start_time
                
                if response.status_code == 200:
                    data = response.json()
                    
                    answer = data.get("response", "")
                    category = data.get("intent", "unknown")
                    confidence = data.get("confidence", 0.0)
                    source = data.get("source", "unknown")
                    
                    quality_score = self._analyze_answer_quality(question, answer, category)
                    
                    result = {
                        "question": question,
                        "answer": answer[:100] + "..." if len(answer) > 100 else answer,
                        "category": category,
                        "confidence": confidence,
                        "source": source,
                        "processing_time": round(processing_time, 2),
                        "quality_score": quality_score,
                        "status": "success"
                    }
                    
                    print(f"‚úÖ –û—Ç–≤–µ—Ç: {answer[:50]}...")
                    print(f"üìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}, –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f}")
                    print(f"‚è±Ô∏è –í—Ä–µ–º—è: {processing_time:.2f}—Å, –ö–∞—á–µ—Å—Ç–≤–æ: {quality_score:.2f}")
                    
                else:
                    result = {
                        "question": question,
                        "answer": f"–û—à–∏–±–∫–∞: {response.status_code}",
                        "category": "error",
                        "confidence": 0.0,
                        "source": "error",
                        "processing_time": processing_time,
                        "quality_score": 0.0,
                        "status": "error"
                    }
                    
                    print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                
                results.append(result)
                
            except Exception as e:
                result = {
                    "question": question,
                    "answer": f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}",
                    "category": "error",
                    "confidence": 0.0,
                    "source": "error",
                    "processing_time": 0.0,
                    "quality_score": 0.0,
                    "status": "exception"
                }
                
                print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
                results.append(result)
        
        return results
    
    def _analyze_answer_quality(self, question, answer, category):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞"""
        score = 0.0
        
        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if answer and len(answer) > 10:
            score += 0.3
        
        if category != "unknown" and category != "error":
            score += 0.3
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        question_lower = question.lower()
        answer_lower = answer.lower()
        
        if "–Ω–∞—Ü–µ–Ω–∫–∞" in question_lower and "–Ω–∞—Ü–µ–Ω–∫–∞" in answer_lower:
            score += 0.2
        elif "–¥–æ—Å—Ç–∞–≤–∫–∞" in question_lower and "–¥–æ—Å—Ç–∞–≤–∫–∞" in answer_lower:
            score += 0.2
        elif "–±–∞–ª–∞–Ω—Å" in question_lower and "–±–∞–ª–∞–Ω—Å" in answer_lower:
            score += 0.2
        elif "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" in question_lower and "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" in answer_lower:
            score += 0.2
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ—Ç—É –æ—Ç–≤–µ—Ç–∞
        if len(answer) > 50:
            score += 0.2
        
        return min(score, 1.0)
    
    def generate_report(self, local_results, railway_results):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        print("\nüìä –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò LLM –ú–û–î–ï–õ–ò")
        print("=" * 80)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        local_success = sum(1 for r in local_results if r["status"] == "success")
        local_avg_time = sum(r["processing_time"] for r in local_results) / len(local_results)
        local_avg_quality = sum(r["quality_score"] for r in local_results) / len(local_results)
        local_llm_count = sum(1 for r in local_results if r["source"] == "local_ollama")
        
        print(f"\nüè† –õ–û–ö–ê–õ–¨–ù–´–ô –°–ï–†–í–ï–†:")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {local_success}/{len(local_results)} ({local_success/len(local_results)*100:.1f}%)")
        print(f"   üß† LLM –æ—Ç–≤–µ—Ç–æ–≤: {local_llm_count}/{len(local_results)} ({local_llm_count/len(local_results)*100:.1f}%)")
        print(f"   ‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {local_avg_time:.2f}—Å")
        print(f"   üìä –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {local_avg_quality:.2f}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Railway —Å–µ—Ä–≤–µ—Ä–∞
        railway_success = sum(1 for r in railway_results if r["status"] == "success")
        railway_avg_time = sum(r["processing_time"] for r in railway_results) / len(railway_results)
        railway_avg_quality = sum(r["quality_score"] for r in railway_results) / len(railway_results)
        railway_llm_count = sum(1 for r in railway_results if r["source"] == "local_llm_server")
        
        print(f"\nüåê RAILWAY –°–ï–†–í–ï–†:")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {railway_success}/{len(railway_results)} ({railway_success/len(railway_results)*100:.1f}%)")
        print(f"   üß† LLM –æ—Ç–≤–µ—Ç–æ–≤: {railway_llm_count}/{len(railway_results)} ({railway_llm_count/len(railway_results)*100:.1f}%)")
        print(f"   ‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {railway_avg_time:.2f}—Å")
        print(f"   üìä –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {railway_avg_quality:.2f}")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:")
        print(f"   üè† –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if local_success > 0 else '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
        print(f"   üåê Railway —Å–µ—Ä–≤–µ—Ä: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if railway_success > 0 else '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
        print(f"   üß† LLM –º–æ–¥–µ–ª—å: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if local_llm_count > 0 or railway_llm_count > 0 else '‚ùå –ù–µ –∞–∫—Ç–∏–≤–Ω–∞'}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if local_llm_count == 0 and railway_llm_count == 0:
            print("   ‚ö†Ô∏è LLM –º–æ–¥–µ–ª—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Ollama –∏ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä")
        elif local_avg_time > 60:
            print("   ‚ö†Ô∏è LLM –º–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ (>60—Å). –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é")
        elif local_avg_quality < 0.7:
            print("   ‚ö†Ô∏è –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∏–∑–∫–æ–µ (<0.7). –£–ª—É—á—à–∏—Ç–µ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π")
        else:
            print("   ‚úÖ LLM –º–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ!")
        
        return {
            "local": {
                "success_rate": local_success/len(local_results),
                "llm_rate": local_llm_count/len(local_results),
                "avg_time": local_avg_time,
                "avg_quality": local_avg_quality
            },
            "railway": {
                "success_rate": railway_success/len(railway_results),
                "llm_rate": railway_llm_count/len(railway_results),
                "avg_time": railway_avg_time,
                "avg_quality": railway_avg_quality
            }
        }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ê LLM –ú–û–î–ï–õ–ò APARU")
    print("=" * 80)
    
    tester = LLMModelTester()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
    local_results = tester.test_local_server()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Railway —Å–µ—Ä–≤–µ—Ä
    railway_results = tester.test_railway_server()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = tester.generate_report(local_results, railway_results)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    with open(f"llm_test_results_{timestamp}.json", "w", encoding="utf-8") as f:
        json.dump({
            "timestamp": timestamp,
            "local_results": local_results,
            "railway_results": railway_results,
            "report": report
        }, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: llm_test_results_{timestamp}.json")
    print("\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")

if __name__ == "__main__":
    main()
