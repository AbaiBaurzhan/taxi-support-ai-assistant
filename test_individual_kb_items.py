#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –∏ –∫–∞–∂–¥–æ–π –≤–∞—Ä–∏–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
"""

import requests
import json
import time
from typing import Dict, List, Any

def load_kb() -> List[Dict]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"""
    try:
        with open('backend/kb.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            if isinstance(data, list):
                return data
            elif isinstance(data, dict) and 'faq' in data:
                return data['faq']
            else:
                return []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ kb.json: {e}")
        return []

def test_api(query: str) -> Dict[str, Any]:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API —Å –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º"""
    try:
        response = requests.post(
            "http://localhost:8000/chat",
            json={
                "text": query,
                "user_id": "test_individual",
                "locale": "ru"
            },
            timeout=10
        )
        
        if response.status_code == 200:
            return response.json()
        else:
            return {
                "error": f"HTTP {response.status_code}: {response.text}",
                "success": False
            }
    except Exception as e:
        return {
            "error": f"Exception: {str(e)}",
            "success": False
        }

def check_answer_match(expected_answer: str, actual_answer: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–≤–µ—Ç–æ–≤"""
    if not expected_answer or not actual_answer:
        return False
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    expected = expected_answer.lower().strip()
    actual = actual_answer.lower().strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö 100 —Å–∏–º–≤–æ–ª–æ–≤
    if expected == actual:
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—Ç–∞ (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤)
    if len(expected) > 100 and len(actual) > 100:
        return expected[:100] == actual[:100]
    
    return False

def test_keywords(faq_item: Dict, results: List[Dict]):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ FAQ"""
    question = faq_item.get('question', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    expected_answer = faq_item.get('answer', '')
    keywords = faq_item.get('keywords', [])
    
    print(f"\nüîë –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–õ–Æ–ß–ï–í–´–• –°–õ–û–í –î–õ–Ø: '{question}'")
    print(f"üìù –û–∂–∏–¥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç: {expected_answer[:100]}...")
    print(f"üîç –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {len(keywords)}")
    
    for keyword in keywords:
        print(f"   üß™ –¢–µ—Å—Ç–∏—Ä—É—é –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: '{keyword}'")
        
        result = test_api(keyword)
        
        if 'error' in result:
            print(f"      ‚ùå –û—à–∏–±–∫–∞: {result['error']}")
            results.append({
                "type": "keyword",
                "faq_question": question,
                "keyword": keyword,
                "success": False,
                "error": result['error']
            })
        else:
            actual_answer = result.get('response', '')
            confidence = result.get('confidence', 0)
            source = result.get('source', 'unknown')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–≤–µ—Ç–∞
            answer_matches = check_answer_match(expected_answer, actual_answer)
            
            if answer_matches:
                print(f"      ‚úÖ –û—Ç–≤–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É")
                print(f"      üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}")
                print(f"      üîç –ò—Å—Ç–æ—á–Ω–∏–∫: {source}")
            else:
                print(f"      ‚ö†Ô∏è –û—Ç–≤–µ—Ç –ù–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É")
                print(f"      üìù –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_answer[:100]}...")
                print(f"      üí¨ –ü–æ–ª—É—á–µ–Ω–æ: {actual_answer[:100]}...")
                print(f"      üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}")
                print(f"      üîç –ò—Å—Ç–æ—á–Ω–∏–∫: {source}")
            
            results.append({
                "type": "keyword",
                "faq_question": question,
                "keyword": keyword,
                "success": answer_matches,
                "expected_answer": expected_answer,
                "actual_answer": actual_answer,
                "confidence": confidence,
                "source": source,
                "answer_matches": answer_matches
            })

def test_variations(faq_item: Dict, results: List[Dict]):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ FAQ"""
    question = faq_item.get('question', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    expected_answer = faq_item.get('answer', '')
    variations = faq_item.get('question_variations', [])
    
    print(f"\nüìù –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–ê–†–ò–ê–¶–ò–ô –í–û–ü–†–û–°–û–í –î–õ–Ø: '{question}'")
    print(f"üìù –û–∂–∏–¥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç: {expected_answer[:100]}...")
    print(f"üîç –í–∞—Ä–∏–∞—Ü–∏–π –≤–æ–ø—Ä–æ—Å–æ–≤: {len(variations)}")
    
    for variation in variations:
        print(f"   üß™ –¢–µ—Å—Ç–∏—Ä—É—é –≤–∞—Ä–∏–∞—Ü–∏—é: '{variation}'")
        
        result = test_api(variation)
        
        if 'error' in result:
            print(f"      ‚ùå –û—à–∏–±–∫–∞: {result['error']}")
            results.append({
                "type": "variation",
                "faq_question": question,
                "variation": variation,
                "success": False,
                "error": result['error']
            })
        else:
            actual_answer = result.get('response', '')
            confidence = result.get('confidence', 0)
            source = result.get('source', 'unknown')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–≤–µ—Ç–∞
            answer_matches = check_answer_match(expected_answer, actual_answer)
            
            if answer_matches:
                print(f"      ‚úÖ –û—Ç–≤–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É")
                print(f"      üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}")
                print(f"      üîç –ò—Å—Ç–æ—á–Ω–∏–∫: {source}")
            else:
                print(f"      ‚ö†Ô∏è –û—Ç–≤–µ—Ç –ù–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É")
                print(f"      üìù –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_answer[:100]}...")
                print(f"      üí¨ –ü–æ–ª—É—á–µ–Ω–æ: {actual_answer[:100]}...")
                print(f"      üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}")
                print(f"      üîç –ò—Å—Ç–æ—á–Ω–∏–∫: {source}")
            
            results.append({
                "type": "variation",
                "faq_question": question,
                "variation": variation,
                "success": answer_matches,
                "expected_answer": expected_answer,
                "actual_answer": actual_answer,
                "confidence": confidence,
                "source": source,
                "answer_matches": answer_matches
            })

def wait_for_server():
    """–ñ–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
    max_attempts = 30
    for attempt in range(max_attempts):
        try:
            response = requests.get("http://localhost:8000/health", timeout=2)
            if response.status_code == 200:
                print("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é")
                return True
        except:
            pass
        time.sleep(1)
    
    print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∑–∞ 30 —Å–µ–∫—É–Ω–¥")
    return False

def generate_report(results: List[Dict]):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
    total_tests = len(results)
    successful_tests = sum(1 for r in results if r.get('success', False))
    failed_tests = total_tests - successful_tests
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
    keyword_tests = [r for r in results if r['type'] == 'keyword']
    variation_tests = [r for r in results if r['type'] == 'variation']
    
    keyword_success = sum(1 for r in keyword_tests if r.get('success', False))
    variation_success = sum(1 for r in variation_tests if r.get('success', False))
    
    print(f"\n{'='*80}")
    print(f"üìä –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –ö–ê–ñ–î–û–ì–û –≠–õ–ï–ú–ï–ù–¢–ê –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô")
    print(f"{'='*80}")
    
    print(f"\nüìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {successful_tests}")
    print(f"   ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed_tests}")
    print(f"   üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful_tests/total_tests*100):.1f}%")
    
    print(f"\nüéØ –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º —Ç–µ—Å—Ç–æ–≤:")
    print(f"   –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {len(keyword_tests)} (—É—Å–ø–µ—à–Ω–æ: {keyword_success}, {keyword_success/len(keyword_tests)*100:.1f}%)")
    print(f"   –í–∞—Ä–∏–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(variation_tests)} (—É—Å–ø–µ—à–Ω–æ: {variation_success}, {variation_success/len(variation_tests)*100:.1f}%)")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ FAQ
    faq_stats = {}
    for result in results:
        faq = result['faq_question']
        if faq not in faq_stats:
            faq_stats[faq] = {'total': 0, 'success': 0}
        faq_stats[faq]['total'] += 1
        if result.get('success', False):
            faq_stats[faq]['success'] += 1
    
    print(f"\nüìã –ê–Ω–∞–ª–∏–∑ –ø–æ FAQ:")
    for faq, stats in faq_stats.items():
        success_rate = stats['success'] / stats['total'] * 100
        print(f"   '{faq}': {stats['success']}/{stats['total']} ({success_rate:.1f}%)")
    
    # –°–ø–∏—Å–æ–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    failed_tests_list = [r for r in results if not r.get('success', False)]
    if failed_tests_list:
        print(f"\n‚ùå –ù–ï–£–î–ê–ß–ù–´–ï –¢–ï–°–¢–´ ({len(failed_tests_list)}):")
        for test in failed_tests_list[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            if test['type'] == 'keyword':
                print(f"   üîë '{test['keyword']}' –¥–ª—è '{test['faq_question']}'")
            else:
                print(f"   üìù '{test['variation']}' –¥–ª—è '{test['faq_question']}'")
        
        if len(failed_tests_list) > 10:
            print(f"   ... –∏ –µ—â–µ {len(failed_tests_list) - 10} –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
    with open('individual_kb_test_results.json', 'w', encoding='utf-8') as f:
        json.dump({
            'summary': {
                'total_tests': total_tests,
                'successful_tests': successful_tests,
                'failed_tests': failed_tests,
                'success_rate': successful_tests/total_tests*100,
                'keyword_tests': len(keyword_tests),
                'keyword_success': keyword_success,
                'variation_tests': len(variation_tests),
                'variation_success': variation_success
            },
            'faq_stats': faq_stats,
            'results': results
        }, f, ensure_ascii=False, indent=2)
    
    print(f"\nüìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: individual_kb_test_results.json")
    print(f"üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–ê–ñ–î–û–ì–û –≠–õ–ï–ú–ï–ù–¢–ê –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô")
    print("="*80)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
    kb_data = load_kb()
    if not kb_data:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π")
        return
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: {len(kb_data)} FAQ –∑–∞–ø–∏—Å–µ–π")
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    if not wait_for_server():
        return
    
    results = []
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π FAQ
    for i, faq_item in enumerate(kb_data, 1):
        print(f"\n{'='*80}")
        print(f"üìã FAQ {i}/{len(kb_data)}: {faq_item.get('question', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        test_keywords(faq_item, results)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
        test_variations(faq_item, results)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    generate_report(results)

if __name__ == "__main__":
    main()
