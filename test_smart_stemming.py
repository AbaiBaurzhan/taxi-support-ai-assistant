"""
–¢–µ—Å—Ç —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ—Ä–Ω—é —Å–ª–æ–≤–∞
"""

import sys
import os
sys.path.append('backend')

import json
import re

def extract_word_root(word):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ—Ä–µ–Ω—å —Å–ª–æ–≤–∞, —É–±–∏—Ä–∞—è –æ–∫–æ–Ω—á–∞–Ω–∏—è, —Å—É—Ñ—Ñ–∏–∫—Å—ã –∏ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏"""
    if len(word) < 4:
        return word
    
    root = word.lower()
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–ª–æ–≤
    special_cases = {
        '–¥–æ—Å—Ç–∞–≤–∫–∞': '–¥–æ—Å—Ç–∞–≤', '–¥–æ—Å—Ç–∞–≤–∫–∏': '–¥–æ—Å—Ç–∞–≤', '–¥–æ—Å—Ç–∞–≤–∫—É': '–¥–æ—Å—Ç–∞–≤', '–¥–æ—Å—Ç–∞–≤–∫–µ': '–¥–æ—Å—Ç–∞–≤',
        '–¥–æ—Å—Ç–∞–≤—â–∏–∫': '–¥–æ—Å—Ç–∞–≤', '–¥–æ—Å—Ç–∞–≤—â–∏—Ü–∞': '–¥–æ—Å—Ç–∞–≤', '–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å': '–¥–æ—Å—Ç–∞–≤',
        '–ø–µ—Ä–µ–¥–æ—Å—Ç–∞–≤–∫–∞': '–¥–æ—Å—Ç–∞–≤', '–ø–æ–¥–¥–æ—Å—Ç–∞–≤–∫–∞': '–¥–æ—Å—Ç–∞–≤',
        '–≤–æ–¥–∏—Ç–µ–ª—å': '–≤–æ–¥–∏', '–≤–æ–¥–∏—Ç–µ–ª–∏': '–≤–æ–¥–∏', '–≤–æ–¥–∏—Ç–µ–ª—å–Ω–∏—Ü–∞': '–≤–æ–¥–∏', '–≤–æ–¥–∏—Ç—å': '–≤–æ–¥–∏',
        '–≤–æ–¥–∏—Ç': '–≤–æ–¥–∏', '–≤–æ–¥–∏–ª–∞': '–≤–æ–¥–∏', '–≤–æ–¥–∏–ª–æ': '–≤–æ–¥–∏', '–≤–æ–¥–∏–ª–∏': '–≤–æ–¥–∏',
        '–∑–∞–∫–∞–∑': '–∑–∞–∫–∞–∑', '–∑–∞–∫–∞–∑—ã': '–∑–∞–∫–∞–∑', '–∑–∞–∫–∞–∑—ã–≤–∞—Ç—å': '–∑–∞–∫–∞–∑', '–∑–∞–∫–∞–∑—á–∏–∫': '–∑–∞–∫–∞–∑',
        '–∑–∞–∫–∞–∑—á–∏—Ü–∞': '–∑–∞–∫–∞–∑', '–ø–µ—Ä–µ–∑–∞–∫–∞–∑': '–∑–∞–∫–∞–∑', '–ø–æ–¥–∑–∞–∫–∞–∑': '–∑–∞–∫–∞–∑',
        '—Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': '—Ü–µ–Ω', '–ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞': '—Ü–µ–Ω', '–æ—Ü–µ–Ω–∫–∞': '—Ü–µ–Ω',
        '–∫–∞—Ä—Ç–æ—á–∫–∞': '–∫–∞—Ä—Ç', '–∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π': '–∫–∞—Ä—Ç', '–∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ': '–∫–∞—Ä—Ç',
        '–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞': '–±–∞–ª–∞–Ω—Å', '–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å': '–±–∞–ª–∞–Ω—Å',
        '—Ç–∞—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è': '—Ç–∞—Ä–∏—Ñ', '—Ç–∞—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å': '—Ç–∞—Ä–∏—Ñ'
    }
    
    if root in special_cases:
        return special_cases[root]
    
    # –†—É—Å—Å–∫–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–ø–æ –¥–ª–∏–Ω–µ –æ—Ç –¥–ª–∏–Ω–Ω—ã—Ö –∫ –∫–æ—Ä–æ—Ç–∫–∏–º)
    russian_endings = [
        '–æ–≤–∞—Ç—å—Å—è', '–∏–≤–∞—Ç—å—Å—è', '–µ–≤–∞—Ç—å—Å—è', '–∞—Ç—å—Å—è', '–∏—Ç—å—Å—è', '–µ—Ç—å—Å—è', '—É—Ç—å—Å—è',
        '–æ–≤–∞–Ω–∏–µ', '–∏—Ä–æ–≤–∞–Ω–∏–µ', '–µ–≤–∞–Ω–∏–µ', '–∞–Ω–∏–µ', '–µ–Ω–∏–µ', '–µ–Ω–∏–µ',
        '—Å–∫–∏–π', '—Å–∫–∞—è', '—Å–∫–æ–µ', '—Å–∫–∏–µ', '—Å–∫–æ–≥–æ', '—Å–∫–æ–π', '—Å–∫—É—é', '—Å–∫–∏–º', '—Å–∫–æ–º', '—Å–∫–∏—Ö', '—Å–∫–∏–º–∏',
        '–æ—Å—Ç—å', '–µ—Å—Ç—å', '—Å—Ç–≤–æ', '—Ç–µ–ª—å', '—Ç–µ–ª—å–Ω–∏—Ü–∞',
        '—ã–π', '–∞—è', '–æ–µ', '—ã–µ', '–æ–≥–æ', '–æ–π', '—É—é', '—ã–º', '–æ–º', '–∏—Ö', '—ã–º–∏',
        '–∏—è', '–∏–π', '–∏–µ', '–∏—é', '–∏–µ–º', '–∏–∏', '–∏—è–º–∏', '–∏—è—Ö',
        '–∏–∫', '–∏—Ü', '–∏—á', '–∏—â', '–Ω–∏–∫', '–Ω–∏—Ü', '—â–∏–∫', '—â–∏—Ü',
        '–∞', '–æ', '—É', '—ã', '–∏', '–µ', '—é', '–µ–º', '–æ–º', '–∞—Ö', '—è–º–∏', '—è—Ö',
        '—Ç—å', '—Ç–∏', '–ª', '–ª–∞', '–ª–æ', '–ª–∏', '–Ω', '–Ω–∞', '–Ω–æ', '–Ω—ã'
    ]
    
    # –ü—Ä–∏—Å—Ç–∞–≤–∫–∏ (–ø–æ –¥–ª–∏–Ω–µ –æ—Ç –¥–ª–∏–Ω–Ω—ã—Ö –∫ –∫–æ—Ä–æ—Ç–∫–∏–º)
    prefixes = [
        '–ø–µ—Ä–µ', '–ø—Ä–µ–¥', '–ø–æ–¥', '–Ω–∞–¥', '–ø—Ä–∏', '—Ä–∞–∑', '—Ä–∞—Å', '–∏–∑', '–∏—Å',
        '–æ—Ç', '–æ–±', '–≤', '–≤–æ', '–∑–∞', '–Ω–∞', '–¥–æ', '–ø–æ', '—Å–æ', '–≤—ã', '—É'
    ]
    
    # –£–±–∏—Ä–∞–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è (–æ—Ç –¥–ª–∏–Ω–Ω—ã—Ö –∫ –∫–æ—Ä–æ—Ç–∫–∏–º)
    for ending in russian_endings:
        if root.endswith(ending) and len(root) > len(ending) + 2:
            root = root[:-len(ending)]
            break
    
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–∏—Å—Ç–∞–≤–∫–∏ (–æ—Ç –¥–ª–∏–Ω–Ω—ã—Ö –∫ –∫–æ—Ä–æ—Ç–∫–∏–º)
    for prefix in prefixes:
        if root.startswith(prefix) and len(root) > len(prefix) + 3:
            root = root[len(prefix):]
            break
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–æ—Ä–Ω—è
    return root if len(root) >= 3 else word.lower()

def test_stemming():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–º–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–π —Å–ª–æ–≤"""
    print("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–º–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ—Ä–Ω–µ–π —Å–ª–æ–≤")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª–æ–≤–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è–º–∏, —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏ –∏ –ø—Ä–∏—Å—Ç–∞–≤–∫–∞–º–∏
    test_words = [
        # –î–æ—Å—Ç–∞–≤–∫–∞
        "–¥–æ—Å—Ç–∞–≤–∫–∞", "–¥–æ—Å—Ç–∞–≤–∫–∏", "–¥–æ—Å—Ç–∞–≤–∫—É", "–¥–æ—Å—Ç–∞–≤–∫–µ", "–¥–æ—Å—Ç–∞–≤–∫–æ–π", "–¥–æ—Å—Ç–∞–≤–æ–∫",
        "–¥–æ—Å—Ç–∞–≤—â–∏–∫", "–¥–æ—Å—Ç–∞–≤—â–∏—Ü–∞", "–¥–æ—Å—Ç–∞–≤—â–∏–∫–∏", "–¥–æ—Å—Ç–∞–≤—â–∏—Ü—ã",
        "–ø–µ—Ä–µ–¥–æ—Å—Ç–∞–≤–∫–∞", "–ø–æ–¥–¥–æ—Å—Ç–∞–≤–∫–∞", "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ", "–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å",
        
        # –¶–µ–Ω–∞
        "—Ü–µ–Ω–∞", "—Ü–µ–Ω—ã", "—Ü–µ–Ω—É", "—Ü–µ–Ω–µ", "—Ü–µ–Ω–æ–π", "—Ü–µ–Ω–∞—Ö", "—Ü–µ–Ω–∞–º–∏",
        "—Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "—Ü–µ–Ω–æ–æ–±—Ä–∞–∑—É—é—â–∏–π", "—Ü–µ–Ω–æ–æ–±—Ä–∞–∑—É—é—â–∞—è",
        "–ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞", "–æ—Ü–µ–Ω–∫–∞", "–æ—Ü–µ–Ω–∏–≤–∞—Ç—å", "–æ—Ü–µ–Ω–æ—á–Ω—ã–π",
        
        # –ö–∞—Ä—Ç–∞
        "–∫–∞—Ä—Ç–∞", "–∫–∞—Ä—Ç—ã", "–∫–∞—Ä—Ç—É", "–∫–∞—Ä—Ç–µ", "–∫–∞—Ä—Ç–æ–π", "–∫–∞—Ä—Ç–∞—Ö", "–∫–∞—Ä—Ç–∞–º–∏",
        "–∫–∞—Ä—Ç–æ—á–∫–∞", "–∫–∞—Ä—Ç–æ—á–∫–∏", "–∫–∞—Ä—Ç–æ—á–∫—É", "–∫–∞—Ä—Ç–æ—á–∫–µ",
        "–ø–µ—Ä–µ–∫–∞—Ä—Ç–∞", "–ø–æ–¥–∫–∞—Ä—Ç–∞", "–∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π", "–∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ",
        
        # –ë–∞–ª–∞–Ω—Å
        "–±–∞–ª–∞–Ω—Å", "–±–∞–ª–∞–Ω—Å—ã", "–±–∞–ª–∞–Ω—Å—É", "–±–∞–ª–∞–Ω—Å–µ", "–±–∞–ª–∞–Ω—Å–æ–º", "–±–∞–ª–∞–Ω—Å–∞—Ö", "–±–∞–ª–∞–Ω—Å–∞–º–∏",
        "–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞", "–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–æ—á–Ω—ã–π", "–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å",
        "–ø–µ—Ä–µ–±–∞–ª–∞–Ω—Å", "—Ä–∞–∑–±–∞–ª–∞–Ω—Å", "–±–∞–ª–∞–Ω—Å–∏—Ä", "–±–∞–ª–∞–Ω—Å–∏—Ä–Ω—ã–π",
        
        # –¢–∞—Ä–∏—Ñ
        "—Ç–∞—Ä–∏—Ñ", "—Ç–∞—Ä–∏—Ñ—ã", "—Ç–∞—Ä–∏—Ñ—É", "—Ç–∞—Ä–∏—Ñ–µ", "—Ç–∞—Ä–∏—Ñ–æ–º", "—Ç–∞—Ä–∏—Ñ–∞—Ö", "—Ç–∞—Ä–∏—Ñ–∞–º–∏",
        "—Ç–∞—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è", "—Ç–∞—Ä–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π", "—Ç–∞—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å",
        "–ø–µ—Ä–µ—Ç–∞—Ä–∏—Ñ", "–ø–æ–¥—Ç–∞—Ä–∏—Ñ", "—Ç–∞—Ä–∏—Ñ–Ω—ã–π", "—Ç–∞—Ä–∏—Ñ—á–∏–∫",
        
        # –í–æ–¥–∏—Ç–µ–ª—å
        "–≤–æ–¥–∏—Ç–µ–ª—å", "–≤–æ–¥–∏—Ç–µ–ª–∏", "–≤–æ–¥–∏—Ç–µ–ª—è", "–≤–æ–¥–∏—Ç–µ–ª—é", "–≤–æ–¥–∏—Ç–µ–ª–µ–º", "–≤–æ–¥–∏—Ç–µ–ª—è—Ö", "–≤–æ–¥–∏—Ç–µ–ª—è–º–∏",
        "–≤–æ–¥–∏—Ç–µ–ª—å–Ω–∏—Ü–∞", "–≤–æ–¥–∏—Ç–µ–ª—å–Ω–∏—Ü—ã", "–≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π", "–≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ",
        "–≤–æ–¥–∏—Ç—å", "–≤–æ–¥–∏—Ç", "–≤–æ–¥–∏–ª–∞", "–≤–æ–¥–∏–ª–æ", "–≤–æ–¥–∏–ª–∏",
        
        # –ó–∞–∫–∞–∑
        "–∑–∞–∫–∞–∑", "–∑–∞–∫–∞–∑—ã", "–∑–∞–∫–∞–∑–∞", "–∑–∞–∫–∞–∑—É", "–∑–∞–∫–∞–∑–æ–º", "–∑–∞–∫–∞–∑–∞—Ö", "–∑–∞–∫–∞–∑–∞–º–∏",
        "–∑–∞–∫–∞–∑—ã–≤–∞—Ç—å", "–∑–∞–∫–∞–∑–∞—Ç—å", "–∑–∞–∫–∞–∑—ã–≤–∞—é—â–∏–π", "–∑–∞–∫–∞–∑—ã–≤–∞—é—â–∞—è",
        "–ø–µ—Ä–µ–∑–∞–∫–∞–∑", "–ø–æ–¥–∑–∞–∫–∞–∑", "–∑–∞–∫–∞–∑—á–∏–∫", "–∑–∞–∫–∞–∑—á–∏—Ü–∞"
    ]
    
    # –û–∂–∏–¥–∞–µ–º—ã–µ –∫–æ—Ä–Ω–∏
    expected_roots = {
        # –î–æ—Å—Ç–∞–≤–∫–∞
        "–¥–æ—Å—Ç–∞–≤–∫–∞": "–¥–æ—Å—Ç–∞–≤", "–¥–æ—Å—Ç–∞–≤–∫–∏": "–¥–æ—Å—Ç–∞–≤", "–¥–æ—Å—Ç–∞–≤–∫—É": "–¥–æ—Å—Ç–∞–≤", "–¥–æ—Å—Ç–∞–≤–∫–µ": "–¥–æ—Å—Ç–∞–≤", 
        "–¥–æ—Å—Ç–∞–≤—â–∏–∫": "–¥–æ—Å—Ç–∞–≤", "–¥–æ—Å—Ç–∞–≤—â–∏—Ü–∞": "–¥–æ—Å—Ç–∞–≤", "–ø–µ—Ä–µ–¥–æ—Å—Ç–∞–≤–∫–∞": "–¥–æ—Å—Ç–∞–≤",
        
        # –¶–µ–Ω–∞
        "—Ü–µ–Ω–∞": "—Ü–µ–Ω", "—Ü–µ–Ω—ã": "—Ü–µ–Ω", "—Ü–µ–Ω—É": "—Ü–µ–Ω", "—Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": "—Ü–µ–Ω", "–ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞": "—Ü–µ–Ω",
        
        # –ö–∞—Ä—Ç–∞
        "–∫–∞—Ä—Ç–∞": "–∫–∞—Ä—Ç", "–∫–∞—Ä—Ç—ã": "–∫–∞—Ä—Ç", "–∫–∞—Ä—Ç–æ—á–∫–∞": "–∫–∞—Ä—Ç", "–ø–µ—Ä–µ–∫–∞—Ä—Ç–∞": "–∫–∞—Ä—Ç",
        
        # –ë–∞–ª–∞–Ω—Å
        "–±–∞–ª–∞–Ω—Å": "–±–∞–ª–∞–Ω—Å", "–±–∞–ª–∞–Ω—Å—ã": "–±–∞–ª–∞–Ω—Å", "–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞": "–±–∞–ª–∞–Ω—Å", "–ø–µ—Ä–µ–±–∞–ª–∞–Ω—Å": "–±–∞–ª–∞–Ω—Å",
        
        # –¢–∞—Ä–∏—Ñ
        "—Ç–∞—Ä–∏—Ñ": "—Ç–∞—Ä–∏—Ñ", "—Ç–∞—Ä–∏—Ñ—ã": "—Ç–∞—Ä–∏—Ñ", "—Ç–∞—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è": "—Ç–∞—Ä–∏—Ñ", "–ø–µ—Ä–µ—Ç–∞—Ä–∏—Ñ": "—Ç–∞—Ä–∏—Ñ",
        
        # –í–æ–¥–∏—Ç–µ–ª—å
        "–≤–æ–¥–∏—Ç–µ–ª—å": "–≤–æ–¥–∏", "–≤–æ–¥–∏—Ç–µ–ª–∏": "–≤–æ–¥–∏", "–≤–æ–¥–∏—Ç–µ–ª—å–Ω–∏—Ü–∞": "–≤–æ–¥–∏", "–≤–æ–¥–∏—Ç—å": "–≤–æ–¥–∏",
        
        # –ó–∞–∫–∞–∑
        "–∑–∞–∫–∞–∑": "–∑–∞–∫–∞–∑", "–∑–∞–∫–∞–∑—ã": "–∑–∞–∫–∞–∑", "–∑–∞–∫–∞–∑—ã–≤–∞—Ç—å": "–∑–∞–∫–∞–∑", "–∑–∞–∫–∞–∑—á–∏–∫": "–∑–∞–∫–∞–∑"
    }
    
    print("–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–π:")
    print()
    
    success_count = 0
    total_tests = 0
    
    for word in test_words:
        root = extract_word_root(word)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–∂–∏–¥–∞–µ–º—ã–π –∫–æ—Ä–µ–Ω—å
        expected = None
        for key, value in expected_roots.items():
            if word == key:
                expected = value
                break
        
        if expected:
            total_tests += 1
            if root == expected:
                print(f"‚úÖ '{word}' ‚Üí '{root}' (–æ–∂–∏–¥–∞–ª–æ—Å—å: '{expected}')")
                success_count += 1
            else:
                print(f"‚ùå '{word}' ‚Üí '{root}' (–æ–∂–∏–¥–∞–ª–æ—Å—å: '{expected}')")
        else:
            print(f"üìù '{word}' ‚Üí '{root}'")
    
    if total_tests > 0:
        success_rate = (success_count / total_tests) * 100
        print()
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ –∫–æ—Ä–Ω–µ–π: {success_count}/{total_tests} ({success_rate:.1f}%)")
        
        if success_rate >= 80:
            print("üéâ –û—Ç–ª–∏—á–Ω–æ! –°–∏—Å—Ç–µ–º–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ—Ä–Ω–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ!")
        elif success_rate >= 60:
            print("‚úÖ –•–æ—Ä–æ—à–æ! –°–∏—Å—Ç–µ–º–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ—Ä–Ω–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ!")
        else:
            print("‚ùå –ù—É–∂–Ω—ã —É–ª—É—á—à–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ—Ä–Ω–µ–π")

def test_keyword_matching():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º —Å —Ä–∞–∑–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞–º–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞–º–∏ —Å–ª–æ–≤
    test_cases = [
        # –î–æ—Å—Ç–∞–≤–∫–∞ - —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º—ã
        ("–¥–æ—Å—Ç–∞–≤–∫–∞", "–¥–æ—Å—Ç–∞–≤–∫–∞"),
        ("–¥–æ—Å—Ç–∞–≤–∫–∏", "–¥–æ—Å—Ç–∞–≤–∫–∞"),
        ("–¥–æ—Å—Ç–∞–≤–∫—É", "–¥–æ—Å—Ç–∞–≤–∫–∞"),
        ("–¥–æ—Å—Ç–∞–≤—â–∏–∫", "–¥–æ—Å—Ç–∞–≤–∫–∞"),
        ("–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å", "–¥–æ—Å—Ç–∞–≤–∫–∞"),
        
        # –¶–µ–Ω–∞ - —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º—ã
        ("—Ü–µ–Ω–∞", "—Ü–µ–Ω–∞"),
        ("—Ü–µ–Ω—ã", "—Ü–µ–Ω–∞"),
        ("—Ü–µ–Ω—É", "—Ü–µ–Ω–∞"),
        ("—Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "—Ü–µ–Ω–∞"),
        ("–æ—Ü–µ–Ω–∫–∞", "—Ü–µ–Ω–∞"),
        
        # –ö–∞—Ä—Ç–∞ - —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º—ã
        ("–∫–∞—Ä—Ç–∞", "–∫–∞—Ä—Ç–∞"),
        ("–∫–∞—Ä—Ç—ã", "–∫–∞—Ä—Ç–∞"),
        ("–∫–∞—Ä—Ç–æ—á–∫–∞", "–∫–∞—Ä—Ç–∞"),
        ("–∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π", "–∫–∞—Ä—Ç–∞"),
        
        # –ë–∞–ª–∞–Ω—Å - —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º—ã
        ("–±–∞–ª–∞–Ω—Å", "–±–∞–ª–∞–Ω—Å"),
        ("–±–∞–ª–∞–Ω—Å—ã", "–±–∞–ª–∞–Ω—Å"),
        ("–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞", "–±–∞–ª–∞–Ω—Å"),
        ("–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å", "–±–∞–ª–∞–Ω—Å"),
        
        # –¢–∞—Ä–∏—Ñ - —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º—ã
        ("—Ç–∞—Ä–∏—Ñ", "—Ç–∞—Ä–∏—Ñ"),
        ("—Ç–∞—Ä–∏—Ñ—ã", "—Ç–∞—Ä–∏—Ñ"),
        ("—Ç–∞—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è", "—Ç–∞—Ä–∏—Ñ"),
        ("—Ç–∞—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å", "—Ç–∞—Ä–∏—Ñ"),
        
        # –í–æ–¥–∏—Ç–µ–ª—å - —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º—ã
        ("–≤–æ–¥–∏—Ç–µ–ª—å", "–≤–æ–¥–∏—Ç–µ–ª—å"),
        ("–≤–æ–¥–∏—Ç–µ–ª–∏", "–≤–æ–¥–∏—Ç–µ–ª—å"),
        ("–≤–æ–¥–∏—Ç–µ–ª—å–Ω–∏—Ü–∞", "–≤–æ–¥–∏—Ç–µ–ª—å"),
        ("–≤–æ–¥–∏—Ç—å", "–≤–æ–¥–∏—Ç–µ–ª—å"),
        
        # –ó–∞–∫–∞–∑ - —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º—ã
        ("–∑–∞–∫–∞–∑", "–∑–∞–∫–∞–∑"),
        ("–∑–∞–∫–∞–∑—ã", "–∑–∞–∫–∞–∑"),
        ("–∑–∞–∫–∞–∑—ã–≤–∞—Ç—å", "–∑–∞–∫–∞–∑"),
        ("–∑–∞–∫–∞–∑—á–∏–∫", "–∑–∞–∫–∞–∑")
    ]
    
    print("–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º:")
    print()
    
    success_count = 0
    
    for query_word, keyword in test_cases:
        query_root = extract_word_root(query_word)
        keyword_root = extract_word_root(keyword)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–π
        if query_root == keyword_root:
            print(f"‚úÖ '{query_word}' —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å '{keyword}' (–∫–æ—Ä–µ–Ω—å: '{query_root}')")
            success_count += 1
        else:
            print(f"‚ùå '{query_word}' –ù–ï —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å '{keyword}' (–∫–æ—Ä–Ω–∏: '{query_root}' vs '{keyword_root}')")
    
    success_rate = (success_count / len(test_cases)) * 100
    print()
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"–£—Å–ø–µ—à–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {success_count}/{len(test_cases)} ({success_rate:.1f}%)")
    
    if success_rate >= 90:
        print("üéâ –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –ü–æ–∏—Å–∫ –ø–æ –∫–æ—Ä–Ω—è–º —Å–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ!")
    elif success_rate >= 80:
        print("üöÄ –û—Ç–ª–∏—á–Ω–æ! –û—á–µ–Ω—å –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–∞!")
    elif success_rate >= 70:
        print("‚úÖ –•–æ—Ä–æ—à–æ! –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è!")
    else:
        print("‚ùå –ù—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è")

if __name__ == "__main__":
    test_stemming()
    test_keyword_matching()
