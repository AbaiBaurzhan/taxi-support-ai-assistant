#!/usr/bin/env python3
"""
üß† APARU LLM Trainer
–û–±—É—á–∞–µ—Ç LLM –º–æ–¥–µ–ª—å –Ω–∞ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π APARU –∏–∑ BZ.txt
"""

import json
import logging
import subprocess
import time
import requests
from pathlib import Path
from parse_aparu_bz import APARUBZParser
from knowledge_base_trainer import TaxiKnowledgeBase

logger = logging.getLogger(__name__)

class APARULLMTrainer:
    def __init__(self):
        self.knowledge_base = None
        self.ollama_process = None
        
    def setup_training_environment(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å—Ä–µ–¥—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ä–µ–¥—ã –æ–±—É—á–µ–Ω–∏—è...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Ollama
        try:
            result = subprocess.run(["ollama", "--version"], 
                                  capture_output=True, text=True, timeout=5)
            if result.returncode == 0:
                logger.info("‚úÖ Ollama —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            else:
                logger.error("‚ùå Ollama –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        except:
            logger.error("‚ùå Ollama –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
        
        return True
    
    def load_aparu_data(self, bz_file: str = "database_Aparu/BZ.txt"):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ APARU –∏–∑ BZ.txt"""
        logger.info(f"–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ APARU –∏–∑ {bz_file}")
        
        if not Path(bz_file).exists():
            logger.error(f"–§–∞–π–ª {bz_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False
        
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
            parser = APARUBZParser()
            knowledge_base = parser.parse_bz_file(bz_file)
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
            self.knowledge_base = TaxiKnowledgeBase()
            self.knowledge_base.knowledge_base = knowledge_base
            
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(knowledge_base)} –≤–æ–ø—Ä–æ—Å–æ–≤-–æ—Ç–≤–µ—Ç–æ–≤")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def build_knowledge_index(self):
        """–°—Ç—Ä–æ–∏—Ç –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"""
        logger.info("–°—Ç—Ä–æ—é –∏–Ω–¥–µ–∫—Å –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...")
        
        try:
            self.knowledge_base.build_embeddings_index()
            self.knowledge_base.save_index("aparu_knowledge_index.pkl")
            logger.info("‚úÖ –ò–Ω–¥–µ–∫—Å –ø–æ—Å—Ç—Ä–æ–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞: {e}")
            return False
    
    def generate_training_prompts(self, output_file: str = "aparu_training_prompts.json"):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è LLM"""
        logger.info("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è...")
        
        try:
            training_prompts = []
            
            for item in self.knowledge_base.knowledge_base:
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –≤ —Å—Ç–∏–ª–µ APARU
                prompt = f"""–¢—ã - –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–∞–∫—Å–∏-—Å–µ—Ä–≤–∏—Å–∞ APARU.

–ü—Ä–∞–≤–∏–ª–∞ –æ—Ç–≤–µ—Ç–∞:
- –û—Ç–≤–µ—á–∞–π –≤–µ–∂–ª–∏–≤–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ
- –ù–∞—á–∏–Ω–∞–π —Å "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ"
- –ó–∞–∫–∞–Ω—á–∏–≤–∞–π "–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ –ê–ü–ê–†–£"
- –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É
- –ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π APARU
- –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç–∞, –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º

–í–æ–ø—Ä–æ—Å: {item['question']}
–û—Ç–≤–µ—Ç: {item['answer']}

–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item['category']}
–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(item['keywords'])}

–¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–æ–º –∂–µ —Å—Ç–∏–ª–µ."""
                
                training_prompts.append({
                    'prompt': prompt,
                    'question': item['question'],
                    'answer': item['answer'],
                    'category': item['category'],
                    'keywords': item['keywords'],
                    'id': item['id']
                })
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç—ã
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(training_prompts, f, ensure_ascii=False, indent=2)
            
            logger.info(f"‚úÖ –ü—Ä–æ–º–ø—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
            return training_prompts
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤: {e}")
            return []
    
    def create_aparu_modelfile(self, model_name: str = "aparu-support"):
        """–°–æ–∑–¥–∞–µ—Ç Modelfile –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ APARU"""
        logger.info("–°–æ–∑–¥–∞—é Modelfile –¥–ª—è APARU...")
        
        modelfile_content = f"""FROM llama2:7b

SYSTEM "–¢—ã - –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–∞–∫—Å–∏-—Å–µ—Ä–≤–∏—Å–∞ APARU. 

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ:
- –¢–∞—Ä–∏—Ñ–∞—Ö –∏ —Ü–µ–Ω–∞—Ö (–Ω–∞—Ü–µ–Ω–∫–∞, –∫–æ–º—Ñ–æ—Ä—Ç, –º–æ—Ç–æ—á–∞—Å—ã, —Ç–∞–∫—Å–æ–º–µ—Ç—Ä)
- –ó–∞–∫–∞–∑–∞—Ö –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑, –¥–æ—Å—Ç–∞–≤–∫–∞)
- –†–∞–±–æ—Ç–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –±–∞–ª–∞–Ω—Å, –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ)
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö (–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, GPS, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)

–ü—Ä–∞–≤–∏–ª–∞ –æ—Ç–≤–µ—Ç–∞:
- –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–π —Å '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ'
- –û—Ç–≤–µ—á–∞–π –≤–µ–∂–ª–∏–≤–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ
- –ó–∞–∫–∞–Ω—á–∏–≤–∞–π '–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ –ê–ü–ê–†–£'
- –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É
- –ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π APARU
- –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç–∞, –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
- –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"

PARAMETER temperature 0.7
PARAMETER top_p 0.9
PARAMETER top_k 40
PARAMETER repeat_penalty 1.1
"""
        
        try:
            with open("Modelfile", 'w', encoding='utf-8') as f:
                f.write(modelfile_content)
            
            logger.info("‚úÖ Modelfile —Å–æ–∑–¥–∞–Ω")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Modelfile: {e}")
            return False
    
    def train_aparu_model(self, model_name: str = "aparu-support"):
        """–û–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å APARU"""
        logger.info(f"–û–±—É—á–∞—é –º–æ–¥–µ–ª—å {model_name}...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑ Modelfile
            result = subprocess.run(
                ["ollama", "create", model_name, "-f", "Modelfile"],
                capture_output=True, text=True, timeout=300
            )
            
            if result.returncode == 0:
                logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å {model_name} —Å–æ–∑–¥–∞–Ω–∞")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏: {result.stderr}")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
            return False
    
    def test_aparu_model(self, model_name: str = "aparu-support"):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å APARU"""
        logger.info(f"–¢–µ—Å—Ç–∏—Ä—É—é –º–æ–¥–µ–ª—å {model_name}...")
        
        test_questions = [
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞—Ü–µ–Ω–∫–∞?",
            "–ö–∞–∫ —É–∑–Ω–∞—Ç—å —Ä–∞—Å—Ü–µ–Ω–∫—É?",
            "–ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å?",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–æ—Ç–æ—á–∞—Å—ã?",
            "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–∞–∫—Å–æ–º–µ—Ç—Ä?"
        ]
        
        results = []
        
        for question in test_questions:
            logger.info(f"–¢–µ—Å—Ç–∏—Ä—É—é: {question}")
            
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏
                payload = {
                    "model": model_name,
                    "prompt": question,
                    "stream": False,
                    "options": {
                        "temperature": 0.7,
                        "max_tokens": 200
                    }
                }
                
                response = requests.post(
                    "http://localhost:11434/api/generate",
                    json=payload,
                    timeout=30
                )
                
                if response.status_code == 200:
                    result = response.json()
                    answer = result.get("response", "")
                    
                    results.append({
                        'question': question,
                        'answer': answer,
                        'status': 'success'
                    })
                    
                    logger.info(f"‚úÖ –û—Ç–≤–µ—Ç: {answer[:100]}...")
                else:
                    results.append({
                        'question': question,
                        'answer': f"–û—à–∏–±–∫–∞: {response.status_code}",
                        'status': 'error'
                    })
                    
            except Exception as e:
                results.append({
                    'question': question,
                    'answer': f"–û—à–∏–±–∫–∞: {e}",
                    'status': 'error'
                })
        
        return results
    
    def save_test_results(self, results: list, output_file: str = "aparu_test_results.json"):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(results, f, ensure_ascii=False, indent=2)
            
            logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
    
    def run_full_training(self, bz_file: str = "database_Aparu/BZ.txt", model_name: str = "aparu-support"):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è APARU LLM")
        
        # 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ä–µ–¥—ã
        if not self.setup_training_environment():
            return False
        
        # 2. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if not self.load_aparu_data(bz_file):
            return False
        
        # 3. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞
        if not self.build_knowledge_index():
            return False
        
        # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤
        training_prompts = self.generate_training_prompts()
        if not training_prompts:
            return False
        
        # 5. –°–æ–∑–¥–∞–Ω–∏–µ Modelfile
        if not self.create_aparu_modelfile(model_name):
            return False
        
        # 6. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        if not self.train_aparu_model(model_name):
            return False
        
        # 7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        test_results = self.test_aparu_model(model_name)
        self.save_test_results(test_results)
        
        logger.info("üéâ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logging.basicConfig(level=logging.INFO)
    
    trainer = APARULLMTrainer()
    
    print("üß† APARU LLM Trainer")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
    success = trainer.run_full_training()
    
    if success:
        print("\nüéâ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print("üìÅ –§–∞–π–ª—ã:")
        print("  - aparu_knowledge_index.pkl (–∏–Ω–¥–µ–∫—Å –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π)")
        print("  - aparu_training_prompts.json (–ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è)")
        print("  - aparu_test_results.json (—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)")
        print("  - Modelfile (–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏)")
        print("\nü§ñ –ú–æ–¥–µ–ª—å: aparu-support")
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ollama run aparu-support '–ß—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞—Ü–µ–Ω–∫–∞?'")
    else:
        print("\n‚ùå –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")

if __name__ == "__main__":
    main()
