#!/usr/bin/env python3
"""
üöÄ –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ APARU
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–∏—Å–∫–æ–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–µ–π
"""

import json
import logging
import re
from typing import Dict, List, Any, Optional
from pathlib import Path
from datetime import datetime

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ImprovedSearchClient:
    def __init__(self, knowledge_base_path: str = "senior_ai_knowledge_base.json"):
        self.knowledge_base_path = knowledge_base_path
        self.knowledge_base = []
        self.stop_words = set([
            '–∏', '–≤', '–≤–æ', '–Ω–µ', '—á—Ç–æ', '–æ–Ω', '–Ω–∞', '—è', '—Å', '—Å–æ', '–∫–∞–∫', '–∞', '—Ç–æ', '–≤—Å–µ', '–æ–Ω–∞', '—Ç–∞–∫', '–µ–≥–æ', '–Ω–æ', '–¥–∞', '—Ç—ã', '–∫', '—É', '–∂–µ', '–≤—ã', '–∑–∞', '–±—ã', '–ø–æ', '—Ç–æ–ª—å–∫–æ', '–µ–µ', '–º–Ω–µ', '–±—ã–ª–æ', '–≤–æ—Ç', '–æ—Ç', '–º–µ–Ω—è', '–µ—â–µ', '–Ω–µ—Ç', '–æ', '–∏–∑', '–µ–º—É', '—Ç–µ–ø–µ—Ä—å', '–∫–æ–≥–¥–∞', '–¥–∞–∂–µ', '–Ω—É', '–≤–¥—Ä—É–≥', '–ª–∏', '–µ—Å–ª–∏', '—É–∂–µ', '–∏–ª–∏', '–Ω–∏', '–±—ã—Ç—å', '–±—ã–ª', '–Ω–µ–≥–æ', '–¥–æ', '–≤–∞—Å', '–Ω–∏–±—É–¥—å', '–æ–ø—è—Ç—å', '—É–∂', '–≤–∞–º', '–≤–µ–¥—å', '—Ç–∞–º', '–ø–æ—Ç–æ–º', '—Å–µ–±—è', '–Ω–∏—á–µ–≥–æ', '–µ–π', '–º–æ–∂–µ—Ç', '–æ–Ω–∏', '—Ç—É—Ç', '–≥–¥–µ', '–µ—Å—Ç—å', '–Ω–∞–¥–æ', '–Ω–µ–π', '–¥–ª—è', '–º—ã', '—Ç–µ–±—è', '–∏—Ö', '—á–µ–º', '–±—ã–ª–∞', '—Å–∞–º', '—á—Ç–æ–±', '–±–µ–∑', '–±—É–¥—Ç–æ', '—á–µ–≥–æ', '—Ä–∞–∑', '—Ç–æ–∂–µ', '—Å–µ–±–µ', '–ø–æ–¥', '–±—É–¥–µ—Ç', '–∂', '—Ç–æ–≥–¥–∞', '–∫—Ç–æ', '—ç—Ç–æ—Ç', '—Ç–æ–≥–æ', '–ø–æ—Ç–æ–º—É', '—ç—Ç–æ–≥–æ', '–∫–∞–∫–æ–π', '—Å–æ–≤—Å–µ–º', '–Ω–∏–º', '–∑–¥–µ—Å—å', '—ç—Ç–æ–º', '–æ–¥–∏–Ω', '–ø–æ—á—Ç–∏', '–º–æ–π', '—Ç–µ–º', '—á—Ç–æ–±—ã', '–Ω–µ–µ', '—Å–µ–π—á–∞—Å', '–±—ã–ª–∏', '–∫—É–¥–∞', '–∑–∞—á–µ–º', '–≤—Å–µ—Ö', '–Ω–∏–∫–æ–≥–¥–∞', '–º–æ–∂–Ω–æ', '–ø—Ä–∏', '–Ω–∞–∫–æ–Ω–µ—Ü', '–¥–≤–∞', '–æ–±', '–¥—Ä—É–≥–æ–π', '—Ö–æ—Ç—å', '–ø–æ—Å–ª–µ', '–Ω–∞–¥', '–±–æ–ª—å—à–µ', '—Ç–æ—Ç', '—á–µ—Ä–µ–∑', '—ç—Ç–∏', '–Ω–∞—Å', '–ø—Ä–æ', '–≤—Å–µ–≥–æ', '–Ω–∏—Ö', '–∫–∞–∫–∞—è', '–º–Ω–æ–≥–æ', '—Ä–∞–∑–≤–µ', '—Ç—Ä–∏', '—ç—Ç—É', '–º–æ—è', '–≤–ø—Ä–æ—á–µ–º', '—Ö–æ—Ä–æ—à–æ', '—Å–≤–æ—é', '—ç—Ç–æ–π', '–ø–µ—Ä–µ–¥', '–∏–Ω–æ–≥–¥–∞', '–ª—É—á—à–µ', '—á—É—Ç—å', '—Ç–æ–º', '–Ω–µ–ª—å–∑—è', '—Ç–∞–∫–æ–π', '–∏–º', '–±–æ–ª–µ–µ', '–≤—Å–µ–≥–¥–∞', '–∫–æ–Ω–µ—á–Ω–æ', '–≤—Å—é', '–º–µ–∂–¥—É'
        ])
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–∏–Ω–æ–Ω–∏–º—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞
        self.synonyms = {
            '–Ω–∞—Ü–µ–Ω–∫–∞': ['–¥–æ—Ä–æ–≥–æ', '–¥–æ—Ä–æ–≥–æ–µ', '–¥–æ—Ä–æ–≥–∞—è', '–¥–æ—Ä–æ–≥–∏–µ', '–ø–æ–¥–æ—Ä–æ–∂–∞–Ω–∏–µ', '–ø–æ–≤—ã—à–µ–Ω–∏–µ', '–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç', '–¥–æ–ø–ª–∞—Ç–∞', '–Ω–∞–¥–±–∞–≤–∫–∞', '—Å–ø—Ä–æ—Å', '–ø–æ–≤—ã—à–µ–Ω–Ω—ã–π —Å–ø—Ä–æ—Å'],
            '–¥–æ—Å—Ç–∞–≤–∫–∞': ['–∫—É—Ä—å–µ—Ä', '–ø–æ—Å—ã–ª–∫–∞', '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å', '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—ã–ª–∫—É', '–∑–∞–∫–∞–∑–∞—Ç—å –∫—É—Ä—å–µ—Ä–∞', '–≤—ã–∑–≤–∞—Ç—å –∫—É—Ä—å–µ—Ä–∞'],
            '–±–∞–ª–∞–Ω—Å': ['–ø–æ–ø–æ–ª–Ω–∏—Ç—å', '–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ', '–¥–µ–Ω—å–≥–∏', '—Å—á–µ—Ç', '–∫–æ—à–µ–ª–µ–∫', '–ø–ª–∞—Ç–µ–∂'],
            '–∫–æ–º—Ñ–æ—Ä—Ç': ['–∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π', '–∫–æ–º—Ñ–æ—Ä—Ç –∫–ª–∞—Å—Å', '–∫–∞–º—Ä–∏', '–ø—Ä–µ–º–∏—É–º', '–¥–æ—Ä–æ–≥–æ–π —Ç–∞—Ä–∏—Ñ'],
            '–º–æ—Ç–æ—á–∞—Å—ã': ['–≤—Ä–µ–º—è', '–º–∏–Ω—É—Ç—ã', '–¥–ª–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞', '–æ–ø–ª–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏'],
            '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ': ['–ø—Ä–æ–≥—Ä–∞–º–º–∞', '–∞–ø–ø', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–≤—ã–ª–µ—Ç–∞–µ—Ç', '–∑–∞–≤–∏—Å–∞–µ—Ç', '–æ–±–Ω–æ–≤–∏—Ç—å']
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self._load_knowledge_base()
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        self.quality_metrics = {
            'total_requests': 0,
            'successful_matches': 0,
            'high_confidence_matches': 0,
            'category_distribution': {},
            'avg_response_time': 0.0
        }
    
    def _load_knowledge_base(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"""
        try:
            with open(self.knowledge_base_path, 'r', encoding='utf-8') as f:
                self.knowledge_base = json.load(f)
            logger.info(f"‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {len(self.knowledge_base)} –∑–∞–ø–∏—Å–µ–π")
        except FileNotFoundError:
            logger.error(f"‚ùå –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.knowledge_base_path}")
            self.knowledge_base = []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
            self.knowledge_base = []
    
    def normalize_text_improved(self, text: str) -> str:
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞"""
        if not text:
            return ""
        
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        text = text.lower()
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
        text = re.sub(r'[^\w\s]', ' ', text)
        text = re.sub(r'\s+', ' ', text)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞
        words = text.split()
        
        # –£–±–∏—Ä–∞–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
        words = [word for word in words if word not in self.stop_words and len(word) > 2]
        
        return ' '.join(words)
    
    def expand_query_with_synonyms(self, query: str) -> List[str]:
        """–†–∞—Å—à–∏—Ä—è–µ—Ç –∑–∞–ø—Ä–æ—Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏"""
        expanded_queries = [query]
        normalized_query = self.normalize_text_improved(query)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
        for word in normalized_query.split():
            if word in self.synonyms:
                for synonym in self.synonyms[word]:
                    expanded_query = query.replace(word, synonym)
                    expanded_queries.append(expanded_query)
        
        return expanded_queries
    
    def calculate_similarity_improved(self, text1: str, text2: str) -> float:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç–∏"""
        words1 = set(self.normalize_text_improved(text1).split())
        words2 = set(self.normalize_text_improved(text2).split())
        
        if not words1 or not words2:
            return 0.0
        
        # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–ª–æ–≤
        intersection = words1.intersection(words2)
        union = words1.union(words2)
        base_similarity = len(intersection) / len(union) if union else 0.0
        
        # –ë–æ–Ω—É—Å –∑–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        bonus = 0.0
        for word in intersection:
            if word in ['–Ω–∞—Ü–µ–Ω–∫–∞', '–∫–æ–º—Ñ–æ—Ä—Ç', '–±–∞–ª–∞–Ω—Å', '–¥–æ—Å—Ç–∞–≤–∫–∞', '–º–æ—Ç–æ—á–∞—Å—ã', '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ']:
                bonus += 0.2
        
        return min(base_similarity + bonus, 1.0)
    
    def search_improved(self, query: str, top_k: int = 3) -> List[Dict[str, Any]]:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"""
        start_time = datetime.now()
        
        results = []
        
        # –†–∞—Å—à–∏—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏
        expanded_queries = self.expand_query_with_synonyms(query)
        
        for idx, item in enumerate(self.knowledge_base):
            max_score = 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –≤–æ–ø—Ä–æ—Å
            for expanded_query in expanded_queries:
                question_similarity = self.calculate_similarity_improved(expanded_query, item['question'])
                max_score = max(max_score, question_similarity * 3.0)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—Ä–∏–∞—Ü–∏–∏
            for variation in item.get('variations', []):
                for expanded_query in expanded_queries:
                    variation_similarity = self.calculate_similarity_improved(expanded_query, variation)
                    max_score = max(max_score, variation_similarity * 2.0)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            query_words = set()
            for expanded_query in expanded_queries:
                query_words.update(self.normalize_text_improved(expanded_query).split())
            
            keyword_matches = 0
            for keyword in item.get('keywords', []):
                keyword_normalized = self.normalize_text_improved(keyword)
                if keyword_normalized in query_words:
                    keyword_matches += 1
            
            if keyword_matches > 0:
                max_score = max(max_score, keyword_matches * 1.5)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
            for expanded_query in expanded_queries:
                answer_similarity = self.calculate_similarity_improved(expanded_query, item['answer'])
                max_score = max(max_score, answer_similarity * 0.5)
            
            if max_score > 0:
                results.append({
                    'id': item.get('id', idx),
                    'question': item['question'],
                    'answer': item['answer'],
                    'category': item.get('category', 'general'),
                    'confidence': min(max_score / 5.0, 1.0),  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ 0-1
                    'keywords': item.get('keywords', []),
                    'variations': item.get('variations', []),
                    'metadata': item.get('metadata', {})
                })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é score
        results.sort(key=lambda x: x['confidence'], reverse=True)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        response_time = (datetime.now() - start_time).total_seconds()
        logger.info(f"üîç –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {response_time:.3f} —Å–µ–∫—É–Ω–¥")
        
        return results[:top_k]
    
    def get_enhanced_answer(self, question: str) -> str:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞"""
        start_time = datetime.now()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        self.quality_metrics['total_requests'] += 1
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
        results = self.search_improved(question, top_k=3)
        
        response_time = (datetime.now() - start_time).total_seconds()
        self.quality_metrics['avg_response_time'] = (
            (self.quality_metrics['avg_response_time'] * (self.quality_metrics['total_requests'] - 1) + response_time) 
            / self.quality_metrics['total_requests']
        )
        
        if not results:
            return "–ù—É–∂–Ω–∞ —É—Ç–æ—á–Ω—è—é—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        best_result = results[0]
        
        if best_result['confidence'] >= 0.5:  # –°–Ω–∏–∂–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            self.quality_metrics['successful_matches'] += 1
            if best_result['confidence'] >= 0.8:
                self.quality_metrics['high_confidence_matches'] += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            category = best_result['category']
            self.quality_metrics['category_distribution'][category] = self.quality_metrics['category_distribution'].get(category, 0) + 1
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç
            return best_result['answer']
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Ç–æ—á–Ω–µ–Ω–∏–µ
            return "–ù—É–∂–Ω–∞ —É—Ç–æ—á–Ω—è—é—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
    
    def get_statistics(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
        base_metrics = {
            **self.quality_metrics,
            'total_knowledge_records': len(self.knowledge_base),
            'improved_search_available': True
        }
        
        if self.quality_metrics['total_requests'] == 0:
            return base_metrics
        
        success_rate = self.quality_metrics['successful_matches'] / self.quality_metrics['total_requests']
        high_confidence_rate = self.quality_metrics['high_confidence_matches'] / self.quality_metrics['total_requests']
        
        return {
            **base_metrics,
            'success_rate': success_rate,
            'high_confidence_rate': high_confidence_rate
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
improved_search_client = ImprovedSearchClient()

def get_enhanced_answer(question: str) -> str:
    """–û—Å–Ω–æ–≤–Ω–æ–π API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å main.py"""
    return improved_search_client.get_enhanced_answer(question)

def get_improved_statistics() -> Dict[str, Any]:
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    return improved_search_client.get_statistics()

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    client = ImprovedSearchClient()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = client.get_statistics()
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞:")
    print(f"   –ó–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ: {stats['total_knowledge_records']}")
    print(f"   –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫: {'‚úÖ' if stats['improved_search_available'] else '‚ùå'}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
    test_questions = [
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞—Ü–µ–Ω–∫–∞?",
        "–ü–æ—á–µ–º—É —Ç–∞–∫ –¥–æ—Ä–æ–≥–æ?",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ç–∞—Ä–∏—Ñ –ö–æ–º—Ñ–æ—Ä—Ç?",
        "–ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å?",
        "–ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É?",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–æ—Ç–æ—á–∞—Å—ã?"
    ]
    
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:")
    for question in test_questions:
        answer = client.get_enhanced_answer(question)
        print(f"‚ùì {question}")
        print(f"‚úÖ {answer[:100]}...")
        print()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    final_stats = client.get_statistics()
    print(f"\nüìà –§–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞:")
    print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {final_stats.get('success_rate', 0):.1%}")
    print(f"   –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {final_stats.get('high_confidence_rate', 0):.1%}")
    print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {final_stats.get('avg_response_time', 0):.3f}s")
