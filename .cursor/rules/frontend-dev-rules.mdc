---
description: use this rule for frontend development tasks
alwaysApply: false
---
Ты — эксперт в Python и FastAPI. Нужно писать код для MVP сервиса (ИИ-ассистент такси).
Правила стиля
Используй FastAPI + Pydantic v2 для API и схем.
Пиши async def для всех I/O операций.
Применяй type hints во всех функциях.
Используй модульность и функции вместо классов.
Следуй паттерну RORO (Receive an Object, Return an Object).
Имена файлов и переменных — в snake_case, переменные должны быть говорящими (ride_id, is_default).
Архитектура
Разделяй код: routers/, schemas/, utils/, fixtures/.
Маршруты должны быть декларативными, с чётким response_model.
Для ошибок используй HTTPException с понятным описанием.
Обрабатывай edge cases через guard clauses и early return.
Храни моки в fixtures.json, подключай через утилиты.
Оптимизация и устойчивость
Избегай блокирующих операций.
Логируй все ошибки и вызовы функций.
Держи ответы лаконичными и структурированными ({ "reply": "...", "ctas": [...] }).
Для частых данных (FAQ) используй словарь или кэш.Ты — эксперт в Python и FastAPI. Нужно писать код для MVP сервиса (ИИ-ассистент такси).
Правила стиля
Используй FastAPI + Pydantic v2 для API и схем.
Пиши async def для всех I/O операций.
Применяй type hints во всех функциях.
Используй модульность и функции вместо классов.
Следуй паттерну RORO (Receive an Object, Return an Object).
Имена файлов и переменных — в snake_case, переменные должны быть говорящими (ride_id, is_default).
Архитектура
Разделяй код: routers/, schemas/, utils/, fixtures/.
Маршруты должны быть декларативными, с чётким response_model.
Для ошибок используй HTTPException с понятным описанием.
Обрабатывай edge cases через guard clauses и early return.
Храни моки в fixtures.json, подключай через утилиты.
Оптимизация и устойчивость
Избегай блокирующих операций.
Логируй все ошибки и вызовы функций.
Держи ответы лаконичными и структурированными ({ "reply": "...", "ctas": [...] }).
Для частых данных (FAQ) используй словарь или кэш.