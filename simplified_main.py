#!/usr/bin/env python3
"""
üöÄ –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –î–õ–Ø RAILWAY
–ë–µ–∑ –≥–∏–±—Ä–∏–¥–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã - —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞
"""

import json
import re
import logging
from typing import Dict, Any, List, Optional
from datetime import datetime
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse
from pydantic import BaseModel
from langdetect import detect
from langdetect.lang_detect_exception import LangDetectException

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –õ–û–ö–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ü–û–ò–°–ö–ê: enhanced_search_client —Å 100% —Ç–æ—á–Ω–æ—Å—Ç—å—é
try:
    from enhanced_search_client import get_enhanced_answer
    logger.info("‚úÖ Enhanced search client –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (100% —Ç–æ—á–Ω–æ—Å—Ç—å)")
except ImportError:
    try:
        from morphological_search_client import get_enhanced_answer
        logger.info("‚úÖ Morphological search client –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    except ImportError:
        try:
            from railway_optimized_client import get_enhanced_answer
            logger.info("‚úÖ Railway optimized client –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        except ImportError:
            logger.error("‚ùå –ù–∏ –æ–¥–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")
            def get_enhanced_answer(text: str) -> str:
                return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."

app = FastAPI(title="APARU Simplified AI Assistant", version="2.3.0")

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount("/static", StaticFiles(directory="."), name="static")

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class ChatRequest(BaseModel):
    text: str
    user_id: str
    locale: str = "ru"

class ChatResponse(BaseModel):
    response: str
    intent: str
    confidence: float
    source: str
    timestamp: str
    architecture: str = "simplified"

class HealthResponse(BaseModel):
    status: str
    architecture: str = "simplified"
    timestamp: str

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_json_file(filename: str) -> Dict[str, Any]:
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        logger.error(f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return {}
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ {filename}: {e}")
        return {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
fixtures = load_json_file("fixtures.json")
kb_data = load_json_file("kb.json")

# –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
def preprocess_text(text: str) -> str:
    """–£–±–∏—Ä–∞–µ—Ç —ç–º–æ–¥–∑–∏ –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã"""
    # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
    emoji_pattern = re.compile("["
        u"\U0001F600-\U0001F64F"  # emoticons
        u"\U00002500-\U000025FF"  # Box Drawing & Block Elements
        u"\U00002702-\U000027B0"  # Dingbats
        u"\U000024C2-\U0001F251"
        "]+", flags=re.UNICODE)

    text = emoji_pattern.sub(r'', text)

    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    text = re.sub(r'\s+', ' ', text).strip()

    return text

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
def detect_language(text: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞"""
    try:
        lang = detect(text)
        return lang if lang in ['ru', 'kz', 'en'] else 'ru'
    except LangDetectException:
        return 'ru'

# –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏–π
def classify_intent(text: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    text_lower = text.lower()

    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –Ω–∞–º–µ—Ä–µ–Ω–∏–π
    faq_keywords = ['—á—Ç–æ', '–∫–∞–∫', '–≥–¥–µ', '–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º', '–∫–æ–≥–¥–∞', '—Å–∫–æ–ª—å–∫–æ', '–º–æ–∂–Ω–æ –ª–∏']
    ride_status_keywords = ['–≤–æ–¥–∏—Ç–µ–ª—å', '–º–∞—à–∏–Ω–∞', '–ø–æ–µ–∑–¥–∫–∞', '–∑–∞–∫–∞–∑', '—Å—Ç–∞—Ç—É—Å', '–≥–¥–µ']
    receipt_keywords = ['—á–µ–∫', '—Å—á–µ—Ç', '–∫–≤–∏—Ç–∞–Ω—Ü–∏—è', '–¥–æ–∫—É–º–µ–Ω—Ç']
    cards_keywords = ['–∫–∞—Ä—Ç–∞', '–∫–∞—Ä—Ç—ã', '–æ—Å–Ω–æ–≤–Ω–∞—è', '–ø–ª–∞—Ç–µ–∂']
    complaint_keywords = ['–∂–∞–ª–æ–±–∞', '–ø—Ä–æ–±–ª–µ–º–∞', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–ø–ª–æ—Ö–æ', '—Å–ø–∏—Å–∞–ª–∏', '–¥–≤–∞–∂–¥—ã']

    if any(keyword in text_lower for keyword in faq_keywords):
        return "faq"
    elif any(keyword in text_lower for keyword in ride_status_keywords):
        return "ride_status"
    elif any(keyword in text_lower for keyword in receipt_keywords):
        return "receipt"
    elif any(keyword in text_lower for keyword in cards_keywords):
        return "cards"
    elif any(keyword in text_lower for keyword in complaint_keywords):
        return "complaint"
    else:
        return "unknown"

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI —Å–∏—Å—Ç–µ–º—ã
def get_ai_response(text: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç AI —Å–∏—Å—Ç–µ–º—ã"""
    try:
        answer = get_enhanced_answer(text)
        logger.info("‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –æ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞")
        return answer
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ AI —Å–∏—Å—Ç–µ–º–µ: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."

# API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
@app.get("/")
async def root():
    return {
        "message": "APARU Simplified AI Assistant", 
        "architecture": "simplified",
        "version": "2.3.0"
    }

@app.get("/health", response_model=HealthResponse)
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    return HealthResponse(
        status="healthy",
        architecture="simplified",
        timestamp=datetime.now().isoformat()
    )

@app.post("/chat", response_model=ChatResponse)
async def chat(request: ChatRequest):
    """–û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —á–∞—Ç–∞"""
    try:
        # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
        processed_text = preprocess_text(request.text)

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
        detected_lang = detect_language(processed_text)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
        intent = classify_intent(processed_text)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏—è
        if intent == "faq":
            response_text = get_ai_response(processed_text)
            source = "local"
        elif intent == "ride_status":
            # –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–µ–∑–¥–∫–∏
            ride_data = fixtures.get("rides", [{}])[0]
            response_text = f"–í–∞—à –≤–æ–¥–∏—Ç–µ–ª—å {ride_data.get('driver_name', '–ê–ª–µ–∫—Å–µ–π')} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ {ride_data.get('location', '5 –º–∏–Ω—É—Ç–∞—Ö')} –æ—Ç –≤–∞—Å. –ù–æ–º–µ—Ä –º–∞—à–∏–Ω—ã: {ride_data.get('car_number', '123ABC')}"
            source = "mock"
        elif intent == "receipt":
            # –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —á–µ–∫–∞
            receipt_data = fixtures.get("receipts", [{}])[0]
            response_text = f"–ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email {receipt_data.get('email', 'user@example.com')}. –°—É–º–º–∞: {receipt_data.get('amount', '500')} —Ç–µ–Ω–≥–µ"
            source = "mock"
        elif intent == "cards":
            # –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç
            cards_data = fixtures.get("cards", [])
            if cards_data:
                response_text = f"–£ –≤–∞—Å {len(cards_data)} –∫–∞—Ä—Ç. –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞: {cards_data[0].get('number', '****1234')}"
            else:
                response_text = "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç"
            source = "mock"
        elif intent == "complaint":
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞
            ticket_id = f"TICKET-{datetime.now().strftime('%Y%m%d-%H%M%S')}"
            response_text = f"–í–∞—à–∞ –∂–∞–ª–æ–±–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞. –ù–æ–º–µ—Ä —Ç–∏–∫–µ—Ç–∞: {ticket_id}. –û–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤."
            source = "ticket"
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º AI
            response_text = get_ai_response(processed_text)
            source = "local"

        return ChatResponse(
            response=response_text,
            intent=intent,
            confidence=0.9 if source == "local" else 1.0,
            source=source,
            timestamp=datetime.now().isoformat(),
            architecture="simplified"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /chat: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/webapp")
async def webapp():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    return FileResponse("webapp.html")

@app.get("/fixtures")
async def get_fixtures():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    return fixtures

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
