#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã APARU
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
"""

import requests
import json
import time
from typing import List, Dict

class APARUComprehensiveTest:
    def __init__(self, base_url: str = "http://localhost:8000"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        self.base_url = base_url
        self.test_results = []
        
    def test_question(self, question: str, expected_keywords: List[str] = None) -> Dict:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å"""
        
        try:
            response = requests.post(
                f"{self.base_url}/chat",
                json={
                    "text": question,
                    "user_id": "test123",
                    "locale": "ru"
                },
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                answer = data.get("response", "")
                source = data.get("source", "unknown")
                confidence = data.get("confidence", 0.0)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞
                is_good_answer = self._evaluate_answer(answer, expected_keywords)
                
                result = {
                    "question": question,
                    "answer": answer,
                    "source": source,
                    "confidence": confidence,
                    "is_good": is_good_answer,
                    "status": "success"
                }
            else:
                result = {
                    "question": question,
                    "answer": "",
                    "source": "error",
                    "confidence": 0.0,
                    "is_good": False,
                    "status": "error",
                    "error": f"HTTP {response.status_code}"
                }
                
        except Exception as e:
            result = {
                "question": question,
                "answer": "",
                "source": "error",
                "confidence": 0.0,
                "is_good": False,
                "status": "error",
                "error": str(e)
            }
        
        self.test_results.append(result)
        return result
    
    def _evaluate_answer(self, answer: str, expected_keywords: List[str] = None) -> bool:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞"""
        
        answer_lower = answer.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–ª–æ—Ö–∏–µ –æ—Ç–≤–µ—Ç—ã
        bad_indicators = [
            "–∏–∑–≤–∏–Ω–∏—Ç–µ", "–Ω–µ —É–≤–µ—Ä–µ–Ω", "–Ω–µ –Ω–∞—à–µ–ª", "–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å",
            "—Å–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ", "–ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç"
        ]
        
        for indicator in bad_indicators:
            if indicator in answer_lower:
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ö–æ—Ä–æ—à–∏–µ –æ—Ç–≤–µ—Ç—ã
        good_indicators = [
            "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "—Å —É–≤–∞–∂–µ–Ω–∏–µ–º", "–∫–æ–º–∞–Ω–¥–∞ –∞–ø–∞—Ä—É",
            "–º–æ–∂–Ω–æ", "–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ", "—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º"
        ]
        
        good_count = sum(1 for indicator in good_indicators if indicator in answer_lower)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        if expected_keywords:
            keyword_count = sum(1 for keyword in expected_keywords if keyword.lower() in answer_lower)
            if keyword_count > 0:
                return True
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ä–æ—à–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏ –æ—Ç–≤–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–π
        return good_count > 0 and len(answer) > 50
    
    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç"""
        
        print("üß™ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å–∏—Å—Ç–µ–º—ã APARU...")
        print("=" * 60)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        test_cases = [
            {
                "question": "–ü–æ—á–µ–º—É —Ç–∞–∫ –¥–æ—Ä–æ–≥–æ?",
                "keywords": ["–Ω–∞—Ü–µ–Ω–∫–∞", "—Ç–∞—Ä–∏—Ñ", "—Å–ø—Ä–æ—Å"]
            },
            {
                "question": "–ö–∞–∫ –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∑–∞ –ø–æ–µ–∑–¥–∫—É?",
                "keywords": ["–ø–æ–ø–æ–ª–Ω–∏—Ç—å", "–±–∞–ª–∞–Ω—Å", "qiwi", "kaspi"]
            },
            {
                "question": "–ú–æ–∂–Ω–æ –ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å –∑–∞—Ä–∞–Ω–µ–µ?",
                "keywords": ["–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π", "–∑–∞—Ä–∞–Ω–µ–µ", "—Å–≤–æ–±–æ–¥–Ω—ã–µ"]
            },
            {
                "question": "–ö–∞–∫ —Å—Ç–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª–µ–º?",
                "keywords": ["–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–≤–æ–¥–∏—Ç–µ–ª—å"]
            },
            {
                "question": "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è",
                "keywords": ["–æ–±–Ω–æ–≤–∏—Ç—å", "google play", "app store"]
            },
            {
                "question": "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –Ω–∞—Ü–µ–Ω–∫–∞?",
                "keywords": ["–Ω–∞—Ü–µ–Ω–∫–∞", "—Ç–∞—Ä–∏—Ñ", "—Å–ø—Ä–æ—Å"]
            },
            {
                "question": "–ì–¥–µ –Ω–∞–π—Ç–∏ —Ü–µ–Ω—É?",
                "keywords": ["—Ä–∞—Å—Ü–µ–Ω–∫–∞", "—Ç–∞–∫—Å–æ–º–µ—Ç—Ä", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"]
            },
            {
                "question": "–ö–∞–∫ –¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Å—ã–ª–∫—É?",
                "keywords": ["–¥–æ—Å—Ç–∞–≤–∫–∞", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "–∫—É—Ä—å–µ—Ä"]
            },
            {
                "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–æ–º—Ñ–æ—Ä—Ç?",
                "keywords": ["–∫–æ–º—Ñ–æ—Ä—Ç", "–º–∞—à–∏–Ω–∞", "—Ç–∞—Ä–∏—Ñ"]
            },
            {
                "question": "–ü–æ—á–µ–º—É —Å—á–∏—Ç–∞—é—Ç –≤—Ä–µ–º—è?",
                "keywords": ["–º–æ—Ç–æ—á–∞—Å—ã", "–≤—Ä–µ–º—è", "–ø–æ–µ–∑–¥–∫–∞"]
            },
            {
                "question": "–ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑?",
                "keywords": ["–æ—Ç–º–µ–Ω–∏—Ç—å", "–∫–Ω–æ–ø–∫–∞", "–≤–æ–¥–∏—Ç–µ–ª—å"]
            },
            {
                "question": "–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–µ—Ö–∞–ª",
                "keywords": ["–ø–æ–∑–≤–æ–Ω–∏—Ç—å", "–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "–≤–æ–¥–∏—Ç–µ–ª—å"]
            },
            {
                "question": "–ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–æ–¥–∏—Ç–µ–ª–µ–º?",
                "keywords": ["–ø–æ–∑–≤–æ–Ω–∏—Ç—å", "–∫–Ω–æ–ø–∫–∞", "–≤–æ–¥–∏—Ç–µ–ª—å"]
            },
            {
                "question": "–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–æ–¥–∏—Ç–µ–ª—å?",
                "keywords": ["–æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å", "–∫–∞—Ä—Ç–∞", "–º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"]
            },
            {
                "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ —ç–∫–æ–Ω–æ–º?",
                "keywords": ["—ç–∫–æ–Ω–æ–º", "–±–∞–∑–æ–≤—ã–π", "—Ç–∞—Ä–∏—Ñ"]
            },
            {
                "question": "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª?",
                "keywords": ["—É–Ω–∏–≤–µ—Ä—Å–∞–ª", "–±–∞–≥–∞–∂", "–≥—Ä—É–∑"]
            },
            {
                "question": "–ú–æ–∂–Ω–æ –ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å –≥—Ä—É–∑–æ–≤–æ–µ?",
                "keywords": ["–≥—Ä—É–∑–æ–≤–æ–µ", "–≥—Ä—É–∑", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"]
            },
            {
                "question": "–ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å —ç–≤–∞–∫—É–∞—Ç–æ—Ä?",
                "keywords": ["—ç–≤–∞–∫—É–∞—Ç–æ—Ä", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "–∞–¥—Ä–µ—Å"]
            },
            {
                "question": "–ú–æ–∂–Ω–æ –ª–∏ –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–ª–∏—á–Ω—ã–º–∏?",
                "keywords": ["–Ω–∞–ª–∏—á–Ω—ã–µ", "–±–∞–ª–∞–Ω—Å", "–∫–∞—Ä—Ç–∞"]
            },
            {
                "question": "–ö–∞–∫ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫–∞—Ä—Ç—É?",
                "keywords": ["–∫–∞—Ä—Ç–∞", "–ø—Ä–æ—Ñ–∏–ª—å", "–ø—Ä–∏–≤—è–∑–∞—Ç—å"]
            },
            {
                "question": "–ó–∞–±—ã–ª –≤–µ—â–∏ –≤ —Ç–∞–∫—Å–∏",
                "keywords": ["–∑–∞–±—ã–ª", "–≤–µ—â–∏", "–≤–æ–¥–∏—Ç–µ–ª—å"]
            },
            {
                "question": "–ö–∞–∫ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤?",
                "keywords": ["–æ—Ç–∑—ã–≤", "–æ—Ü–µ–Ω–∏—Ç—å", "–ø–æ–µ–∑–¥–∫–∞"]
            },
            {
                "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–æ–º–æ–∫–æ–¥?",
                "keywords": ["–ø—Ä–æ–º–æ–∫–æ–¥", "—Å–∫–∏–¥–∫–∞", "–∫–æ–¥"]
            },
            {
                "question": "–ú–æ–∂–Ω–æ –ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å –¥–ª—è –º–∞–º—ã?",
                "keywords": ["–¥—Ä—É–≥–æ–≥–æ", "—á–µ–ª–æ–≤–µ–∫–∞", "–∞–¥—Ä–µ—Å"]
            },
            {
                "question": "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥?",
                "keywords": ["—Ä–µ–π—Ç–∏–Ω–≥", "–æ—Ü–µ–Ω–∫–∞", "–≤–æ–¥–∏—Ç–µ–ª—å"]
            },
            {
                "question": "–í–æ–¥–∏—Ç–µ–ª—å –≤–µ–¥–µ—Ç —Å–µ–±—è –ø–ª–æ—Ö–æ",
                "keywords": ["–∂–∞–ª–æ–±–∞", "–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "–≤–æ–¥–∏—Ç–µ–ª—å"]
            }
        ]
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        for i, test_case in enumerate(test_cases, 1):
            print(f"\nüîç –¢–µ—Å—Ç {i}/{len(test_cases)}: {test_case['question']}")
            
            result = self.test_question(
                test_case['question'], 
                test_case['keywords']
            )
            
            if result['status'] == 'success':
                if result['is_good']:
                    print(f"‚úÖ –£—Å–ø–µ—Ö: {result['answer'][:80]}...")
                    print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {result['source']}, –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.2f}")
                else:
                    print(f"‚ùå –ü–ª–æ—Ö–æ–π –æ—Ç–≤–µ—Ç: {result['answer'][:80]}...")
                    print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {result['source']}, –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.2f}")
            else:
                print(f"üí• –û—à–∏–±–∫–∞: {result.get('error', 'Unknown error')}")
            
            time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self._analyze_results()
    
    def _analyze_results(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        print("\n" + "=" * 60)
        print("üìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
        print("=" * 60)
        
        total_tests = len(self.test_results)
        successful_tests = sum(1 for r in self.test_results if r['status'] == 'success')
        good_answers = sum(1 for r in self.test_results if r['is_good'])
        
        print(f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {successful_tests} ({successful_tests/total_tests*100:.1f}%)")
        print(f"   –•–æ—Ä–æ—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤: {good_answers} ({good_answers/total_tests*100:.1f}%)")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        sources = {}
        for result in self.test_results:
            source = result['source']
            if source not in sources:
                sources[source] = {'total': 0, 'good': 0}
            sources[source]['total'] += 1
            if result['is_good']:
                sources[source]['good'] += 1
        
        print(f"\nüìä –ê–Ω–∞–ª–∏–∑ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:")
        for source, stats in sources.items():
            percentage = stats['good'] / stats['total'] * 100 if stats['total'] > 0 else 0
            print(f"   {source}: {stats['good']}/{stats['total']} ({percentage:.1f}%)")
        
        # –ü–ª–æ—Ö–∏–µ –æ—Ç–≤–µ—Ç—ã
        bad_results = [r for r in self.test_results if not r['is_good'] and r['status'] == 'success']
        if bad_results:
            print(f"\n‚ùå –ü–ª–æ—Ö–∏–µ –æ—Ç–≤–µ—Ç—ã ({len(bad_results)}):")
            for result in bad_results[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"   - {result['question']}: {result['answer'][:60]}...")
        
        # –û—à–∏–±–∫–∏
        error_results = [r for r in self.test_results if r['status'] == 'error']
        if error_results:
            print(f"\nüí• –û—à–∏–±–∫–∏ ({len(error_results)}):")
            for result in error_results:
                print(f"   - {result['question']}: {result.get('error', 'Unknown error')}")
        
        print(f"\nüéØ –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: {good_answers/total_tests*100:.1f}% —Ö–æ—Ä–æ—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤")
        
        if good_answers/total_tests >= 0.8:
            print("üéâ –û—Ç–ª–∏—á–Ω–æ! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ!")
        elif good_answers/total_tests >= 0.6:
            print("üëç –•–æ—Ä–æ—à–æ! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏–µ–º–ª–µ–º–æ.")
        else:
            print("‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏—è!")

if __name__ == "__main__":
    print("üöÄ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã APARU")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    tester = APARUComprehensiveTest()
    tester.run_comprehensive_test()
