#!/usr/bin/env python3
"""
üß™ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ APARU AI
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—é, —Å–∏–Ω–æ–Ω–∏–º—ã, –ø–µ—Ä–µ—Ñ—Ä–∞–∑—ã –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
"""

import requests
import json
import time
from datetime import datetime
from typing import List, Dict, Any

class ComprehensiveTester:
    def __init__(self, api_url: str = "http://localhost:8000"):
        self.api_url = api_url
        self.test_results = []
        
    def test_question(self, question: str, expected_category: str = None) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å"""
        try:
            payload = {
                "text": question,
                "user_id": f"test_{int(time.time())}",
                "locale": "ru"
            }
            
            start_time = time.time()
            response = requests.post(f"{self.api_url}/chat", json=payload, timeout=10)
            end_time = time.time()
            
            if response.status_code == 200:
                result = response.json()
                return {
                    "question": question,
                    "answer": result.get("response", ""),
                    "intent": result.get("intent", ""),
                    "confidence": result.get("confidence", 0.0),
                    "source": result.get("source", ""),
                    "response_time": end_time - start_time,
                    "success": result.get("response", "") != "–ù—É–∂–Ω–∞ —É—Ç–æ—á–Ω—è—é—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                    "expected_category": expected_category
                }
            else:
                return {
                    "question": question,
                    "answer": f"ERROR: {response.status_code}",
                    "intent": "error",
                    "confidence": 0.0,
                    "source": "error",
                    "response_time": end_time - start_time,
                    "success": False,
                    "expected_category": expected_category
                }
        except Exception as e:
            return {
                "question": question,
                "answer": f"EXCEPTION: {str(e)}",
                "intent": "error",
                "confidence": 0.0,
                "source": "error",
                "response_time": 0.0,
                "success": False,
                "expected_category": expected_category
            }
    
    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        print("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï APARU AI")
        print("=" * 60)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        test_categories = {
            "–ù–ê–¶–ï–ù–ö–ê": [
                "–ß—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞—Ü–µ–Ω–∫–∞?",
                "–ß—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞—Ü–µ–Ω–∫–∏?",
                "–ß—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞—Ü–µ–Ω–∫—É?",
                "–ß—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞—Ü–µ–Ω–∫–æ–π?",
                "–ü–æ—á–µ–º—É —Ç–∞–∫ –¥–æ—Ä–æ–≥–æ?",
                "–û—Ç–∫—É–¥–∞ –¥–æ–ø–ª–∞—Ç–∞?",
                "–û—Ç–∫—É–¥–∞ –¥–æ–ø–ª–∞—Ç—ã?",
                "–û—Ç–∫—É–¥–∞ –¥–æ–ø–ª–∞—Ç—É?",
                "–ß—Ç–æ –∑–∞ –Ω–∞–¥–±–∞–≤–∫–∞?",
                "–ß—Ç–æ –∑–∞ –Ω–∞–¥–±–∞–≤–∫–∏?",
                "–ü–æ–≤—ã—à–∞—é—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç?",
                "–ü–æ–≤—ã—à–∞—é—â–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã?",
                "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞?",
                "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø–ª–∞—Ç—ã?",
                "–ù–∞–¥–±–∞–≤–∫–∞ –∫ —Ü–µ–Ω–µ?",
                "–ù–∞–¥–±–∞–≤–∫–∏ –∫ —Ü–µ–Ω–µ?",
                "–ü–æ–≤—ã—à–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏?",
                "–ü–æ–≤—ã—à–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏?",
                "–î–æ–ø–ª–∞—Ç–∞ –≤ –∑–∞–∫–∞–∑–µ?",
                "–î–æ–ø–ª–∞—Ç—ã –≤ –∑–∞–∫–∞–∑–µ?",
                "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–ø—Ä–æ—Å–∞?",
                "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å–ø—Ä–æ—Å–∞?"
            ],
            
            "–î–û–°–¢–ê–í–ö–ê": [
                "–ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É?",
                "–ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏?",
                "–ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É?",
                "–ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—ã–ª–∫—É?",
                "–ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—ã–ª–∫–∏?",
                "–ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—ã–ª–∫—É?",
                "–í—ã–∑–≤–∞—Ç—å –∫—É—Ä—å–µ—Ä–∞?",
                "–í—ã–∑–≤–∞—Ç—å –∫—É—Ä—å–µ—Ä–∞?",
                "–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–∫–∏?",
                "–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–∫—É?",
                "–†–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É?",
                "–†–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏?",
                "–û—Ñ–æ—Ä–º–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É?",
                "–û—Ñ–æ—Ä–º–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏?",
                "–í—ã–∑–≤–∞—Ç—å –º–∞—à–∏–Ω—É –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏?",
                "–í—ã–∑–≤–∞—Ç—å –º–∞—à–∏–Ω—É –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫—É?",
                "–ü–µ—Ä–µ–≤–æ–∑–∫–∞ –ø–æ—Å—ã–ª–∫–∏?",
                "–ü–µ—Ä–µ–≤–æ–∑–∫–∞ –ø–æ—Å—ã–ª–∫—É?"
            ],
            
            "–ë–ê–õ–ê–ù–°": [
                "–ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å?",
                "–ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å–∞?",
                "–ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å—É?",
                "–ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å–æ–º?",
                "–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç?",
                "–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç–∞?",
                "–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç—É?",
                "–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç–æ–º?",
                "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫?",
                "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª—å–∫–∞?",
                "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª—å–∫—É?",
                "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª—å–∫–æ–º?",
                "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º?",
                "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞?",
                "–ü–æ–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑?",
                "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞?",
                "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞?"
            ],
            
            "–ö–û–ú–§–û–†–¢": [
                "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ç–∞—Ä–∏—Ñ –∫–æ–º—Ñ–æ—Ä—Ç?",
                "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ç–∞—Ä–∏—Ñ –∫–æ–º—Ñ–æ—Ä—Ç–∞?",
                "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ç–∞—Ä–∏—Ñ –∫–æ–º—Ñ–æ—Ä—Ç—É?",
                "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ç–∞—Ä–∏—Ñ –∫–æ–º—Ñ–æ—Ä—Ç–æ–º?",
                "–ö–æ–º—Ñ–æ—Ä—Ç –∫–ª–∞—Å—Å?",
                "–ö–æ–º—Ñ–æ—Ä—Ç–∞ –∫–ª–∞—Å—Å?",
                "–ö–æ–º—Ñ–æ—Ä—Ç —Ç–∞—Ä–∏—Ñ?",
                "–ö–æ–º—Ñ–æ—Ä—Ç–∞ —Ç–∞—Ä–∏—Ñ?",
                "–ö–æ–º—Ñ–æ—Ä—Ç –∫–ª–∞—Å—Å –º–∞—à–∏–Ω—ã?",
                "–ö–æ–º—Ñ–æ—Ä—Ç–∞ –∫–ª–∞—Å—Å –º–∞—à–∏–Ω—ã?",
                "–ö–æ–º—Ñ–æ—Ä—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å?",
                "–ö–æ–º—Ñ–æ—Ä—Ç–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å?"
            ],
            
            "–ú–û–¢–û–ß–ê–°–´": [
                "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–æ—Ç–æ—á–∞—Å—ã?",
                "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–æ—Ç–æ—á–∞—Å–æ–≤?",
                "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–æ—Ç–æ—á–∞—Å–∞–º?",
                "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–æ—Ç–æ—á–∞—Å–∞–º–∏?",
                "–í—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏?",
                "–í—Ä–µ–º–µ–Ω–∏ –ø–æ–µ–∑–¥–∫–∏?",
                "–í—Ä–µ–º–µ–Ω–∏ –ø–æ–µ–∑–¥–∫—É?",
                "–û–ø–ª–∞—Ç–∞ –∑–∞ –≤—Ä–µ–º—è?",
                "–û–ø–ª–∞—Ç–∞ –∑–∞ –≤—Ä–µ–º–µ–Ω–∏?",
                "–ü–æ–º–∏–Ω—É—Ç–Ω–∞—è –æ–ø–ª–∞—Ç–∞?",
                "–ü–æ–º–∏–Ω—É—Ç–Ω—ã–µ –æ–ø–ª–∞—Ç—ã?",
                "–í—Ä–µ–º—è –≤ —Ç–∞—Ä–∏—Ñ–µ?",
                "–í—Ä–µ–º–µ–Ω–∏ –≤ —Ç–∞—Ä–∏—Ñ–µ?",
                "–î–ª–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–∫–∞–∑—ã?",
                "–î–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤?"
            ],
            
            "–ü–†–ò–õ–û–ñ–ï–ù–ò–ï": [
                "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç?",
                "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç?",
                "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—é –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç?",
                "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç?",
                "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è?",
                "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è?",
                "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è?",
                "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è?",
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ gps?",
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ gps?",
                "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—ã–ª–µ—Ç–∞–µ—Ç?",
                "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤—ã–ª–µ—Ç–∞–µ—Ç?",
                "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∞–µ—Ç?",
                "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–µ—Ç?"
            ],
            
            "–°–ò–ù–û–ù–ò–ú–´ –ò –ü–ï–†–ï–§–†–ê–ó–´": [
                "–ü–æ—á–µ–º—É –¥–æ—Ä–æ–≥–æ?",
                "–û—Ç–∫—É–¥–∞ –¥–æ–ø–ª–∞—Ç–∞?",
                "–ß—Ç–æ –∑–∞ –Ω–∞–¥–±–∞–≤–∫–∞?",
                "–ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—ã–ª–∫—É?",
                "–ö–∞–∫ –≤—ã–∑–≤–∞—Ç—å –∫—É—Ä—å–µ—Ä–∞?",
                "–ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç?",
                "–ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫?",
                "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–æ–º—Ñ–æ—Ä—Ç –∫–ª–∞—Å—Å?",
                "–ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–µ–º–∏—É–º —Ç–∞—Ä–∏—Ñ?",
                "–ß—Ç–æ —Ç–∞–∫–æ–µ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏?",
                "–ß—Ç–æ —Ç–∞–∫–æ–µ –æ–ø–ª–∞—Ç–∞ –∑–∞ –≤—Ä–µ–º—è?",
                "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è?",
                "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—ã–ª–µ—Ç–∞–µ—Ç?",
                "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∞–µ—Ç?"
            ],
            
            "–†–ê–ó–ì–û–í–û–†–ù–´–ï –í–ê–†–ò–ê–ù–¢–´": [
                "–ê —á—Ç–æ —Å –Ω–∞—Ü–µ–Ω–∫–æ–π?",
                "–ê —á—Ç–æ —Å –Ω–∞—Ü–µ–Ω–∫–∞–º–∏?",
                "–ê —á—Ç–æ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π?",
                "–ê —á—Ç–æ —Å –¥–æ—Å—Ç–∞–≤–∫–∞–º–∏?",
                "–ê —á—Ç–æ —Å –±–∞–ª–∞–Ω—Å–æ–º?",
                "–ê —á—Ç–æ —Å –±–∞–ª–∞–Ω—Å–∞–º–∏?",
                "–ê —á—Ç–æ —Å –∫–æ–º—Ñ–æ—Ä—Ç–æ–º?",
                "–ê —á—Ç–æ —Å –∫–æ–º—Ñ–æ—Ä—Ç–∞–º–∏?",
                "–ê —á—Ç–æ —Å –º–æ—Ç–æ—á–∞—Å–∞–º–∏?",
                "–ê —á—Ç–æ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º?",
                "–ê —á—Ç–æ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏?"
            ],
            
            "–í–û–ü–†–û–°–´ –° –û–ü–ï–ß–ê–¢–ö–ê–ú–ò": [
                "–ß—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞—Ü–µ–Ω–∫–∞?",  # –Ω–∞—Ü–µ–Ω–∫–∞
                "–ß—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞—Ü–µ–Ω–∫–∞?",  # –Ω–∞—Ü–µ–Ω–∫–∞
                "–ß—Ç–æ —Ç–∞–∫–æ–µ –¥–æ—Å—Ç–∞–≤–∫–∞?",  # –¥–æ—Å—Ç–∞–≤–∫–∞
                "–ß—Ç–æ —Ç–∞–∫–æ–µ –±–∞–ª–∞–Ω—Å?",  # –±–∞–ª–∞–Ω—Å
                "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–æ–º—Ñ–æ—Ä—Ç?",  # –∫–æ–º—Ñ–æ—Ä—Ç
                "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–æ—Ç–æ—á–∞—Å—ã?",  # –º–æ—Ç–æ—á–∞—Å—ã
                "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç?"  # –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            ]
        }
        
        total_questions = sum(len(questions) for questions in test_categories.values())
        print(f"üìä –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {total_questions}")
        print()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category_results = {}
        all_results = []
        
        for category, questions in test_categories.items():
            print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}")
            print("-" * 40)
            
            category_success = 0
            category_total = len(questions)
            
            for question in questions:
                result = self.test_question(question, category)
                all_results.append(result)
                
                if result["success"]:
                    category_success += 1
                    print(f"‚úÖ {question}")
                    print(f"   –û—Ç–≤–µ—Ç: {result['answer'][:80]}...")
                    print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.2f}")
                else:
                    print(f"‚ùå {question}")
                    print(f"   –û—Ç–≤–µ—Ç: {result['answer']}")
                    print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.2f}")
                
                print()
            
            category_results[category] = {
                "success": category_success,
                "total": category_total,
                "success_rate": category_success / category_total if category_total > 0 else 0
            }
            
            print(f"üìà {category}: {category_success}/{category_total} ({category_success/category_total*100:.1f}%)")
            print()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_success = sum(result["success"] for result in all_results)
        total_questions = len(all_results)
        overall_success_rate = total_success / total_questions if total_questions > 0 else 0
        
        print("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("=" * 60)
        print(f"–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total_questions}")
        print(f"–£—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {total_success}")
        print(f"–û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: {overall_success_rate:.1%}")
        print()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        print("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
        for category, stats in category_results.items():
            print(f"   {category}: {stats['success']}/{stats['total']} ({stats['success_rate']:.1%})")
        print()
        
        # –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
        avg_response_time = sum(result["response_time"] for result in all_results) / len(all_results)
        print(f"‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_response_time:.3f}s")
        print()
        
        # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        avg_confidence = sum(result["confidence"] for result in all_results) / len(all_results)
        print(f"üéØ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence:.2f}")
        print()
        
        # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        failed_questions = [result for result in all_results if not result["success"]]
        if failed_questions:
            print("‚ùå –ü–†–û–ë–õ–ï–ú–ù–´–ï –í–û–ü–†–û–°–´:")
            for result in failed_questions:
                print(f"   - {result['question']}")
            print()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.test_results = all_results
        return all_results

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = ComprehensiveTester()
    results = tester.run_comprehensive_test()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"comprehensive_test_results_{timestamp}.json"
    
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")

if __name__ == "__main__":
    main()