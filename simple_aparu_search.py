#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞ –≤ APARU
"""

import json
import re
from pathlib import Path
from typing import List, Dict, Tuple

class SimpleAPARUSearch:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞ APARU"""
        
        # –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π
        self.knowledge_base = []
        
        # –¢–æ—á–Ω—ã–µ –º–∞–ø–ø–∏–Ω–≥–∏
        self.question_mappings = {
            "–Ω–∞—Ü–µ–Ω–∫–∞": {
                "questions": ["—á—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞—Ü–µ–Ω–∫–∞", "—á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –Ω–∞—Ü–µ–Ω–∫–∞"],
                "contexts": ["–ø–æ—á–µ–º—É –¥–æ—Ä–æ–≥–æ", "–ø–æ—á–µ–º—É —Ç–∞–∫ –¥–æ—Ä–æ–≥–æ", "–æ—Ç–∫—É–¥–∞ —Ü–µ–Ω–∞", "–ø–æ—á–µ–º—É –≤—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞"],
                "keywords": ["–Ω–∞—Ü–µ–Ω–∫–∞", "—Ü–µ–Ω–∞", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "–¥–æ—Ä–æ–≥–æ", "—Ç–∞—Ä–∏—Ñ"]
            },
            "–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ": {
                "questions": ["–∫–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"],
                "contexts": ["–∫–∞–∫ –∑–∞–ø–ª–∞—Ç–∏—Ç—å", "–∫–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å", "–≥–¥–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å", "–∫–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏"],
                "keywords": ["–ø–æ–ø–æ–ª–Ω–∏—Ç—å", "–±–∞–ª–∞–Ω—Å", "—Å—á–µ—Ç", "–¥–µ–Ω—å–≥–∏", "–æ–ø–ª–∞—Ç–∏—Ç—å"]
            },
            "–∫–æ–º—Ñ–æ—Ä—Ç": {
                "questions": ["—á—Ç–æ —Ç–∞–∫–æ–µ —Ç–∞—Ä–∏—Ñ –∫–æ–º—Ñ–æ—Ä—Ç", "—á—Ç–æ —Ç–∞–∫–æ–µ –∫–æ–º—Ñ–æ—Ä—Ç"],
                "contexts": ["–∫–æ–º—Ñ–æ—Ä—Ç –∫–ª–∞—Å—Å", "–ø—Ä–µ–º–∏—É–º —Ç–∞–∫—Å–∏", "–Ω–æ–≤–∞—è –º–∞—à–∏–Ω–∞"],
                "keywords": ["–∫–æ–º—Ñ–æ—Ä—Ç", "–ø—Ä–µ–º–∏—É–º", "–∫–ª–∞—Å—Å", "–º–∞—à–∏–Ω–∞"]
            },
            "—Ä–∞—Å—Ü–µ–Ω–∫–∞": {
                "questions": ["–∫–∞–∫ —É–∑–Ω–∞—Ç—å —Ä–∞—Å—Ü–µ–Ω–∫—É"],
                "contexts": ["–∫–∞–∫ —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—É", "–≥–¥–µ –Ω–∞–π—Ç–∏ —Ü–µ–Ω—É", "–∫–∞–∫ —É–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å"],
                "keywords": ["—Ä–∞—Å—Ü–µ–Ω–∫–∞", "—Ü–µ–Ω–∞", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—Ç–∞—Ä–∏—Ñ"]
            },
            "–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π": {
                "questions": ["–∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑"],
                "contexts": ["–º–æ–∂–Ω–æ –ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å –∑–∞—Ä–∞–Ω–µ–µ", "–∫–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å –∑–∞—Ä–∞–Ω–µ–µ", "–º–æ–∂–Ω–æ –ª–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å"],
                "keywords": ["–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π", "–∑–∞—Ä–∞–Ω–µ–µ", "–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å"]
            },
            "–¥–æ—Å—Ç–∞–≤–∫–∞": {
                "questions": ["–∫–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–∫–∏"],
                "contexts": ["–∫–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É", "–∫–∞–∫ –¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Å—ã–ª–∫—É", "–∫—É—Ä—å–µ—Ä—Å–∫–∞—è —Å–ª—É–∂–±–∞"],
                "keywords": ["–¥–æ—Å—Ç–∞–≤–∫–∞", "–∫—É—Ä—å–µ—Ä", "—Ç–æ–≤–∞—Ä", "–ø–æ—Å—ã–ª–∫–∞"]
            },
            "–≤–æ–¥–∏—Ç–µ–ª—å": {
                "questions": ["–∫–∞–∫ –º–Ω–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã –∏ —á—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ"],
                "contexts": ["–∫–∞–∫ —Å—Ç–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª–µ–º", "–∫–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª–µ–º", "–∫–∞–∫ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å"],
                "keywords": ["–≤–æ–¥–∏—Ç–µ–ª—å", "–∑–∞–∫–∞–∑—ã", "—Ä–∞–±–æ—Ç–∞—Ç—å", "—Å—Ç–∞—Ç—å"]
            },
            "–º–æ—Ç–æ—á–∞—Å—ã": {
                "questions": ["—á—Ç–æ —Ç–∞–∫–æ–µ –º–æ—Ç–æ—á–∞—Å—ã"],
                "contexts": ["–ø–æ—á–µ–º—É —Å—á–∏—Ç–∞—é—Ç –≤—Ä–µ–º—è", "–æ–ø–ª–∞—Ç–∞ –∑–∞ –≤—Ä–µ–º—è", "–≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏"],
                "keywords": ["–º–æ—Ç–æ—á–∞—Å—ã", "–≤—Ä–µ–º—è", "–ø–æ–µ–∑–¥–∫–∞", "–æ–ø–ª–∞—Ç–∞"]
            },
            "—Ç–∞–∫—Å–æ–º–µ—Ç—Ä": {
                "questions": ["–∫–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç–∞–∫—Å–æ–º–µ—Ç—Ä–æ–º"],
                "contexts": ["–∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–∞–∫—Å–æ–º–µ—Ç—Ä–æ–º", "–∫–∞–∫ –≤–∫–ª—é—á–∏—Ç—å —Ç–∞–∫—Å–æ–º–µ—Ç—Ä"],
                "keywords": ["—Ç–∞–∫—Å–æ–º–µ—Ç—Ä", "—Ä–∞–±–æ—Ç–∞—Ç—å", "–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è"]
            },
            "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ": {
                "questions": ["–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —á—Ç–æ –¥–µ–ª–∞—Ç—å"],
                "contexts": ["–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∞–µ—Ç", "–ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º"],
                "keywords": ["–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "–Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è"]
            }
        }
        
    def load_knowledge_base(self, kb_file: str = "database_Aparu/BZ.txt"):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"""
        
        print("üìö –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π...")
        
        # –ß–∏—Ç–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –±–∞–∑—É
        with open(kb_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü–∞—Ä—Å–∏–º –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
        sections = content.split('- question:')
        
        for section in sections[1:]:
            lines = section.strip().split('\n')
            if len(lines) >= 2:
                question = lines[0].strip()
                answer = '\n'.join(lines[1:]).strip()
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
                kb_entry = {
                    "question": question,
                    "answer": answer,
                    "similarity_score": 0.0
                }
                
                self.knowledge_base.append(kb_entry)
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.knowledge_base)} –∑–∞–ø–∏—Å–µ–π")
        return self.knowledge_base
    
    def search(self, query: str, top_k: int = 3) -> List[Dict]:
        """–ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫"""
        
        query_lower = query.lower().strip()
        results = []
        
        # –ò—â–µ–º –ø–æ –º–∞–ø–ø–∏–Ω–≥–∞–º
        for category, mappings in self.question_mappings.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
            for context in mappings["contexts"]:
                if context in query_lower:
                    # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
                    for item in self.knowledge_base:
                        question_lower = item['question'].lower().strip()
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                        for exact_question in mappings["questions"]:
                            if exact_question in question_lower:
                                item_copy = item.copy()
                                item_copy['similarity_score'] = 50.0
                                results.append(item_copy)
                                break
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                        for keyword in mappings["keywords"]:
                            if keyword in question_lower:
                                item_copy = item.copy()
                                item_copy['similarity_score'] = 30.0
                                results.append(item_copy)
                                break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–∞–ø—Ä—è–º—É—é
            for keyword in mappings["keywords"]:
                if keyword in query_lower:
                    for item in self.knowledge_base:
                        question_lower = item['question'].lower().strip()
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                        for exact_question in mappings["questions"]:
                            if exact_question in question_lower:
                                item_copy = item.copy()
                                item_copy['similarity_score'] = 40.0
                                results.append(item_copy)
                                break
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                        if keyword in question_lower:
                            item_copy = item.copy()
                            item_copy['similarity_score'] = 20.0
                            results.append(item_copy)
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        seen = set()
        unique_results = []
        for result in results:
            if result['question'] not in seen:
                seen.add(result['question'])
                unique_results.append(result)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ score
        unique_results.sort(key=lambda x: x['similarity_score'], reverse=True)
        return unique_results[:top_k]
    
    def get_answer(self, query: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
        
        # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –∑–∞–ø–∏—Å–∏
        results = self.search(query, top_k=1)
        
        if not results:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –Ω–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π."
        
        # –ë–µ—Ä–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        best_match = results[0]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        confidence = min(best_match["similarity_score"] / 50.0, 1.0)
        
        if confidence > 0.4:
            # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç
            return best_match["answer"]
        else:
            # –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–∏–π –æ—Ç–≤–µ—Ç
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —É–≤–µ—Ä–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ?"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
aparu_search = SimpleAPARUSearch()
aparu_search.load_knowledge_base()

def get_aparu_answer(query: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç APARU —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞"""
    return aparu_search.get_answer(query)

if __name__ == "__main__":
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞ APARU...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º
    test_queries = [
        "–ü–æ—á–µ–º—É —Ç–∞–∫ –¥–æ—Ä–æ–≥–æ?",
        "–ö–∞–∫ –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∑–∞ –ø–æ–µ–∑–¥–∫—É?",
        "–ú–æ–∂–Ω–æ –ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å –∑–∞—Ä–∞–Ω–µ–µ?",
        "–ö–∞–∫ —Å—Ç–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª–µ–º?",
        "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è",
        "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –Ω–∞—Ü–µ–Ω–∫–∞?",
        "–ì–¥–µ –Ω–∞–π—Ç–∏ —Ü–µ–Ω—É?",
        "–ö–∞–∫ –¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Å—ã–ª–∫—É?",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–æ–º—Ñ–æ—Ä—Ç?",
        "–ü–æ—á–µ–º—É —Å—á–∏—Ç–∞—é—Ç –≤—Ä–µ–º—è?"
    ]
    
    print("\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    
    for query in test_queries:
        print(f"\n‚ùì –í–æ–ø—Ä–æ—Å: {query}")
        answer = get_aparu_answer(query)
        print(f"üìù –û—Ç–≤–µ—Ç: {answer[:100]}...")
    
    print("\n‚úÖ –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ –≥–æ—Ç–æ–≤–∞!")
    print("üéØ –¢–µ–ø–µ—Ä—å –º–æ–¥–µ–ª—å –ø–æ–Ω–∏–º–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç!")
