#!/usr/bin/env python3
"""
üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ì–ò–ë–†–ò–î–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê
LLM –º–æ–¥–µ–ª—å –Ω–∞ –Ω–æ—É—Ç–±—É–∫–µ + Railway –ø—Ä–æ–∫—Å–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã
"""

import requests
import json
import logging
from typing import Dict, Any, Optional
from datetime import datetime

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class OptimizedHybridClient:
    def __init__(self, local_model_url: str = "http://localhost:11434", ngrok_url: str = None):
        self.local_model_url = local_model_url
        self.ngrok_url = ngrok_url
        self.local_model_available = False
        self.ngrok_available = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
        self._check_local_model()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ngrok —Ç—É–Ω–Ω–µ–ª—è
        if ngrok_url:
            self._check_ngrok_tunnel()
    
    def _check_local_model(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ Ollama"""
        try:
            response = requests.get(f"{self.local_model_url}/api/tags", timeout=3)
            if response.status_code == 200:
                self.local_model_available = True
                logger.info("‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å Ollama –¥–æ—Å—Ç—É–ø–Ω–∞")
            else:
                logger.warning("‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏: {e}")
    
    def _check_ngrok_tunnel(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ngrok —Ç—É–Ω–Ω–µ–ª—è"""
        try:
            response = requests.get(f"{self.ngrok_url}/api/tags", timeout=3)
            if response.status_code == 200:
                self.ngrok_available = True
                logger.info("‚úÖ ngrok —Ç—É–Ω–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                logger.warning("‚ö†Ô∏è ngrok —Ç—É–Ω–Ω–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ngrok —Ç—É–Ω–Ω–µ–ª—é: {e}")
    
    def get_answer(self, question: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –≥–∏–±—Ä–∏–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        start_time = datetime.now()
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ ngrok
        if self.ngrok_available:
            try:
                logger.info("üåê –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ ngrok —Ç—É–Ω–Ω–µ–ª—å...")
                response = self._query_local_model_via_ngrok(question)
                if response and response.get('answer') != '–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞':
                    response_time = (datetime.now() - start_time).total_seconds()
                    return {
                        'answer': response['answer'],
                        'source': 'ngrok_tunnel',
                        'confidence': response.get('confidence', 0.9),
                        'response_time': response_time,
                        'model': 'aparu-senior-ai'
                    }
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ ngrok —Ç—É–Ω–Ω–µ–ª—è: {e}")
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
        if self.local_model_available:
            try:
                logger.info("üè† –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç —É –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏...")
                response = self._query_local_model_direct(question)
                if response and response.get('answer') != '–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞':
                    response_time = (datetime.now() - start_time).total_seconds()
                    return {
                        'answer': response['answer'],
                        'source': 'local_direct',
                        'confidence': response.get('confidence', 0.9),
                        'response_time': response_time,
                        'model': 'aparu-senior-ai'
                    }
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏: {e}")
        
        # Fallback: –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
        response_time = (datetime.now() - start_time).total_seconds()
        return {
            'answer': '–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            'source': 'fallback',
            'confidence': 0.0,
            'response_time': response_time,
            'model': 'none'
        }
    
    def _query_local_model_via_ngrok(self, question: str) -> Optional[Dict[str, Any]]:
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ ngrok —Ç—É–Ω–Ω–µ–ª—å"""
        try:
            payload = {
                "model": "aparu-senior-ai",
                "prompt": f"–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ —Ç–∞–∫—Å–∏ APARU: {question}",
                "stream": False,
                "options": {
                    "temperature": 0.3,
                    "top_p": 0.9,
                    "max_tokens": 200
                }
            }
            
            response = requests.post(
                f"{self.ngrok_url}/api/generate",
                json=payload,
                timeout=15,  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                data = response.json()
                return {
                    'answer': data.get('response', '').strip(),
                    'confidence': 0.9
                }
            else:
                logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ ngrok: {response.status_code}")
                return None
                
        except requests.exceptions.Timeout:
            logger.error("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç ngrok –∑–∞–ø—Ä–æ—Å–∞")
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ ngrok –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None
    
    def _query_local_model_direct(self, question: str) -> Optional[Dict[str, Any]]:
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞–ø—Ä—è–º—É—é —É –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        try:
            payload = {
                "model": "aparu-senior-ai",
                "prompt": f"–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ —Ç–∞–∫—Å–∏ APARU: {question}",
                "stream": False,
                "options": {
                    "temperature": 0.3,
                    "top_p": 0.9,
                    "max_tokens": 200
                }
            }
            
            response = requests.post(
                f"{self.local_model_url}/api/generate",
                json=payload,
                timeout=15,  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                data = response.json()
                return {
                    'answer': data.get('response', '').strip(),
                    'confidence': 0.9
                }
            else:
                logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏: {response.status_code}")
                return None
                
        except requests.exceptions.Timeout:
            logger.error("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
hybrid_client = OptimizedHybridClient(
    ngrok_url="https://a58a3de709bd.ngrok-free.app"  # –ù–æ–≤—ã–π ngrok URL
)

def get_hybrid_answer(question: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –≥–∏–±—Ä–∏–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    try:
        result = hybrid_client.get_answer(question)
        return result['answer']
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–∏–±—Ä–∏–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
