#!/usr/bin/env python3
"""
üöÄ APARU Complete Training Pipeline
–ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏—è LLM –Ω–∞ –¥–∞–Ω–Ω—ã—Ö APARU
"""

import subprocess
import time
import logging
from pathlib import Path

logger = logging.getLogger(__name__)

def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True, timeout=300)
        if result.returncode == 0:
            print(f"‚úÖ {description} - —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"‚ùå {description} - –æ—à–∏–±–∫–∞: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå {description} - –æ—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏—è APARU LLM"""
    print("üöÄ APARU Complete Training Pipeline")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ BZ.txt
    bz_file = "database_Aparu/BZ.txt"
    if not Path(bz_file).exists():
        print(f"‚ùå –§–∞–π–ª {bz_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üìÅ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–∞–ø–∫–µ")
        return
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {bz_file}")
    
    # –®–∞–≥ 1: –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
    print("\nüìä –®–∞–≥ 1: –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö APARU")
    if not run_command("python3 parse_aparu_bz.py", "–ü–∞—Ä—Å–∏–Ω–≥ BZ.txt"):
        return
    
    # –®–∞–≥ 2: –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    print("\nüß† –®–∞–≥ 2: –û–±—É—á–µ–Ω–∏–µ LLM –º–æ–¥–µ–ª–∏")
    if not run_command("python3 train_aparu_llm.py", "–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ APARU"):
        return
    
    # –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("\nüß™ –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏")
    if not run_command("python3 aparu_enhanced_client.py", "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏"):
        return
    
    # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
    print("\nüìÅ –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
    
    files_to_check = [
        "aparu_knowledge_base.json",
        "aparu_knowledge_base.csv", 
        "aparu_knowledge_index.pkl",
        "aparu_training_prompts.json",
        "aparu_test_results.json",
        "Modelfile"
    ]
    
    for file in files_to_check:
        if Path(file).exists():
            print(f"‚úÖ {file}")
        else:
            print(f"‚ùå {file} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –®–∞–≥ 5: –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
    print("\nüéØ –®–∞–≥ 5: –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    print("=" * 60)
    
    print("üìã –î–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å APARU:")
    print("1. –ó–∞–º–µ–Ω–∏—Ç–µ –≤ main.py:")
    print("   from llm_client import llm_client")
    print("   –Ω–∞:")
    print("   from aparu_enhanced_client import aparu_enhanced_client")
    print()
    print("2. –ó–∞–º–µ–Ω–∏—Ç–µ –≤—Å–µ –≤—ã–∑–æ–≤—ã:")
    print("   llm_client.generate_response()")
    print("   –Ω–∞:")
    print("   aparu_enhanced_client.generate_response()")
    print()
    print("3. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:")
    print("   aparu_enhanced_client.load_aparu_knowledge_base()")
    
    print("\nüß™ –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏:")
    print("ollama run aparu-support '–ß—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞—Ü–µ–Ω–∫–∞?'")
    print("ollama run aparu-support '–ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å?'")
    print("ollama run aparu-support '–ß—Ç–æ —Ç–∞–∫–æ–µ –º–æ—Ç–æ—á–∞—Å—ã?'")
    
    print("\nüåê –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å —Ç—É–Ω–Ω–µ–ª–µ–º:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Ollama: ollama serve")
    print("2. –°–æ–∑–¥–∞–π—Ç–µ —Ç—É–Ω–Ω–µ–ª—å: ngrok http 11434")
    print("3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é: LLM_URL=https://your-ngrok-url.ngrok.io")
    
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è:")
    try:
        with open("aparu_test_results.json", 'r', encoding='utf-8') as f:
            import json
            results = json.load(f)
            success_count = sum(1 for r in results if r['status'] == 'success')
            print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {success_count}/{len(results)}")
    except:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    print("\nüéâ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("ü§ñ –ú–æ–¥–µ–ª—å APARU –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")

if __name__ == "__main__":
    main()
