#!/usr/bin/env python3
"""
üåê –£–ª—É—á—à–µ–Ω–Ω–∞—è –≥–∏–±—Ä–∏–¥–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
–õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å + Railway API —Å —Ç—É–Ω–Ω–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""

import requests
import json
import logging
from typing import Dict, Any, Optional
from datetime import datetime
import subprocess
import time
import os

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class AdvancedHybridClient:
    def __init__(self):
        self.local_model_url = "http://localhost:11434"
        self.railway_api_url = "https://taxi-support-ai-assistant-production.up.railway.app"
        self.tunnel_url = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        self._check_services()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç—É–Ω–Ω–µ–ª—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        self._setup_tunnel()
    
    def _check_services(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
        try:
            response = requests.get(f"{self.local_model_url}/api/tags", timeout=5)
            self.local_model_available = response.status_code == 200
            if self.local_model_available:
                logger.info("‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞")
        except:
            self.local_model_available = False
            logger.warning("‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Railway API
        try:
            response = requests.get(f"{self.railway_api_url}/health", timeout=5)
            self.railway_api_available = response.status_code == 200
            if self.railway_api_available:
                logger.info("‚úÖ Railway API –¥–æ—Å—Ç—É–ø–µ–Ω")
        except:
            self.railway_api_available = False
            logger.warning("‚ö†Ô∏è Railway API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    def _setup_tunnel(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ç—É–Ω–Ω–µ–ª—å –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        if not self.local_model_available:
            logger.info("üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç—É–Ω–Ω–µ–ª—å –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º ngrok
            try:
                result = subprocess.run(['ngrok', 'version'], capture_output=True, text=True)
                if result.returncode == 0:
                    logger.info("‚úÖ ngrok –Ω–∞–π–¥–µ–Ω")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—É–Ω–Ω–µ–ª—å
                    subprocess.Popen(['ngrok', 'http', '11434', '--log=stdout'], 
                                   stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                    
                    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
                    time.sleep(3)
                    
                    # –ü–æ–ª—É—á–∞–µ–º URL —Ç—É–Ω–Ω–µ–ª—è
                    try:
                        response = requests.get('http://localhost:4040/api/tunnels', timeout=5)
                        if response.status_code == 200:
                            tunnels = response.json()
                            for tunnel in tunnels.get('tunnels', []):
                                if tunnel.get('proto') == 'https':
                                    self.tunnel_url = tunnel.get('public_url')
                                    logger.info(f"‚úÖ –¢—É–Ω–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {self.tunnel_url}")
                                    break
                    except:
                        logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL —Ç—É–Ω–Ω–µ–ª—è")
                else:
                    logger.warning("‚ö†Ô∏è ngrok –Ω–µ –Ω–∞–π–¥–µ–Ω")
            except:
                logger.warning("‚ö†Ô∏è ngrok –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _query_local_model(self, question: str) -> Optional[str]:
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç —É –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        model_url = self.tunnel_url or self.local_model_url
        
        try:
            payload = {
                "model": "aparu-senior-ai",
                "prompt": f"–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–∞–∫—Å–∏-–∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞ APARU: {question}",
                "stream": False
            }
            
            response = requests.post(
                f"{model_url}/api/generate",
                json=payload,
                timeout=60  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
            )
            
            if response.status_code == 200:
                result = response.json()
                return result.get('response', '').strip()
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏: {response.status_code}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏: {e}")
            return None
    
    def _query_railway_api(self, question: str) -> Optional[str]:
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç —É Railway API"""
        try:
            payload = {
                "text": question,
                "user_id": "hybrid_client",
                "locale": "ru"
            }
            
            response = requests.post(
                f"{self.railway_api_url}/chat",
                json=payload,
                timeout=15
            )
            
            if response.status_code == 200:
                result = response.json()
                return result.get('response', '')
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Railway API: {response.status_code}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Railway API: {e}")
            return None
    
    def get_answer(self, question: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        start_time = datetime.now()
        
        # 1. –ü—Ä–æ–±—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å)
        if self.local_model_available or self.tunnel_url:
            logger.info("üß† –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç —É –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏...")
            local_answer = self._query_local_model(question)
            
            if local_answer and local_answer.strip():
                response_time = (datetime.now() - start_time).total_seconds()
                return {
                    'answer': local_answer,
                    'source': 'local_model',
                    'confidence': 0.95,
                    'response_time': response_time,
                    'model': 'aparu-senior-ai',
                    'tunnel_used': self.tunnel_url is not None
                }
        
        # 2. Fallback –∫ Railway API (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        if self.railway_api_available:
            logger.info("‚òÅÔ∏è Fallback –∫ Railway API...")
            railway_answer = self._query_railway_api(question)
            
            if railway_answer and railway_answer.strip():
                response_time = (datetime.now() - start_time).total_seconds()
                return {
                    'answer': railway_answer,
                    'source': 'railway_api',
                    'confidence': 0.70,
                    'response_time': response_time,
                    'model': 'railway_optimized'
                }
        
        # 3. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        response_time = (datetime.now() - start_time).total_seconds()
        return {
            'answer': '–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞',
            'source': 'error',
            'confidence': 0.0,
            'response_time': response_time,
            'model': 'none'
        }
    
    def get_status(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        return {
            'local_model_available': self.local_model_available,
            'railway_api_available': self.railway_api_available,
            'tunnel_url': self.tunnel_url,
            'local_model_url': self.local_model_url,
            'railway_api_url': self.railway_api_url,
            'hybrid_mode': True,
            'advanced_tunnel': self.tunnel_url is not None
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
advanced_hybrid_client = AdvancedHybridClient()

def get_enhanced_answer(question: str) -> str:
    """–û—Å–Ω–æ–≤–Ω–æ–π API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    result = advanced_hybrid_client.get_answer(question)
    return result['answer']

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –≥–∏–±—Ä–∏–¥–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    print("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –≥–∏–±—Ä–∏–¥–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:")
    status = advanced_hybrid_client.get_status()
    print(f"   –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å: {'‚úÖ' if status['local_model_available'] else '‚ùå'}")
    print(f"   Railway API: {'‚úÖ' if status['railway_api_available'] else '‚ùå'}")
    print(f"   –¢—É–Ω–Ω–µ–ª—å: {'‚úÖ' if status['tunnel_url'] else '‚ùå'}")
    
    if status['tunnel_url']:
        print(f"   URL —Ç—É–Ω–Ω–µ–ª—è: {status['tunnel_url']}")
    
    test_questions = [
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞—Ü–µ–Ω–∫–∞?",
        "–ü–æ—á–µ–º—É —Ç–∞–∫ –¥–æ—Ä–æ–≥–æ?",
        "–ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É?"
    ]
    
    for question in test_questions:
        print(f"\n‚ùì {question}")
        result = advanced_hybrid_client.get_answer(question)
        print(f"‚úÖ {result['answer'][:100]}...")
        print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {result['source']}")
        print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.2f}")
        print(f"   –í—Ä–µ–º—è: {result['response_time']:.3f}s")
        if result.get('tunnel_used'):
            print(f"   –¢—É–Ω–Ω–µ–ª—å: ‚úÖ")
