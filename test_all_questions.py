#!/usr/bin/env python3
"""
üß™ –£–ü–†–û–©–ï–ù–ù–´–ô –¢–ï–°–¢ –ü–û –í–°–ï–ú –í–û–ü–†–û–°–ê–ú
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
"""

import json
import time
from datetime import datetime

def test_all_questions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    print("üß™ –¢–ï–°–¢ –ü–û –í–°–ï–ú –í–û–ü–†–û–°–ê–ú –ò–ó –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô")
    print("="*50)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
    try:
        from enhanced_search_client import get_enhanced_answer
        print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è enhanced_search_client")
    except ImportError:
        print("‚ùå enhanced_search_client –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
    try:
        with open('BZ.txt', 'r', encoding='utf-8') as f:
            knowledge_base = json.load(f)
        print(f"‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {len(knowledge_base)} –∑–∞–ø–∏—Å–µ–π")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã: {e}")
        return
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã
    all_questions = []
    categories = {}
    
    for idx, item in enumerate(knowledge_base):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        keywords = item.get('keywords', [])
        if any(kw in ['–Ω–∞—Ü–µ–Ω–∫–∞', '–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç', '–¥–æ–ø–ª–∞—Ç–∞'] for kw in keywords):
            category = '–ù–ê–¶–ï–ù–ö–ê'
        elif any(kw in ['–¥–æ—Å—Ç–∞–≤–∫–∞', '–∫—É—Ä—å–µ—Ä', '–ø–æ—Å—ã–ª–∫–∞'] for kw in keywords):
            category = '–î–û–°–¢–ê–í–ö–ê'
        elif any(kw in ['–±–∞–ª–∞–Ω—Å', '—Å—á–µ—Ç', '–ø–æ–ø–æ–ª–Ω–∏—Ç—å'] for kw in keywords):
            category = '–ë–ê–õ–ê–ù–°'
        elif any(kw in ['–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', '–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ', '—Ä–∞–±–æ—Ç–∞—Ç—å'] for kw in keywords):
            category = '–ü–†–ò–õ–û–ñ–ï–ù–ò–ï'
        elif any(kw in ['—Ç–∞—Ä–∏—Ñ', '–∫–æ–º—Ñ–æ—Ä—Ç', '–∫–ª–∞—Å—Å'] for kw in keywords):
            category = '–¢–ê–†–ò–§'
        elif any(kw in ['–º–æ—Ç–æ—á–∞—Å—ã', '–≤—Ä–µ–º—è', '–º–∏–Ω—É—Ç—ã'] for kw in keywords):
            category = '–ú–û–¢–û–ß–ê–°–´'
        else:
            category = '–û–ë–©–ò–ï'
        
        if category not in categories:
            categories[category] = {'total': 0, 'successful': 0}
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
        for variation in item.get('question_variations', []):
            all_questions.append({
                'question': variation,
                'category': category,
                'item_id': idx + 1
            })
            categories[category]['total'] += 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        for keyword in item.get('keywords', []):
            all_questions.append({
                'question': f"–ß—Ç–æ —Ç–∞–∫–æ–µ {keyword}?",
                'category': category,
                'item_id': idx + 1
            })
            categories[category]['total'] += 1
    
    print(f"üìù –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {len(all_questions)}")
    print(f"üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    successful_tests = 0
    failed_tests = 0
    response_times = []
    
    print(f"\nüîç –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...")
    
    for i, test_case in enumerate(all_questions):
        question = test_case['question']
        category = test_case['category']
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –≤–æ–ø—Ä–æ—Å–æ–≤
        if (i + 1) % 10 == 0:
            print(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: {i+1}/{len(all_questions)} ({((i+1)/len(all_questions)*100):.1f}%)")
        
        start_time = time.time()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            answer = get_enhanced_answer(question)
            response_time = time.time() - start_time
            response_times.append(response_time)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
            if answer != "–ù—É–∂–Ω–∞ —É—Ç–æ—á–Ω—è—é—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
                successful_tests += 1
                categories[category]['successful'] += 1
            else:
                failed_tests += 1
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {i+1}: {e}")
            failed_tests += 1
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\n" + "="*50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print(f"="*50)
    
    print(f"\nüéØ –û–ë–©–ò–ï –ú–ï–¢–†–ò–ö–ò:")
    print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {len(all_questions)}")
    print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {successful_tests}")
    print(f"   –ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed_tests}")
    print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(successful_tests/len(all_questions)*100):.1f}%")
    
    if response_times:
        avg_time = sum(response_times) / len(response_times)
        min_time = min(response_times)
        max_time = max(response_times)
        print(f"\n‚è±Ô∏è –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_time:.3f}s")
        print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {min_time:.3f}s")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {max_time:.3f}s")
    
    print(f"\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
    for category, metrics in categories.items():
        if metrics['total'] > 0:
            success_rate = (metrics['successful'] / metrics['total']) * 100
            status = "‚úÖ" if success_rate >= 80 else "‚ö†Ô∏è" if success_rate >= 60 else "‚ùå"
            print(f"   {status} {category}: {success_rate:.1f}% ({metrics['successful']}/{metrics['total']})")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results = {
        'timestamp': datetime.now().isoformat(),
        'total_tests': len(all_questions),
        'successful_tests': successful_tests,
        'failed_tests': failed_tests,
        'success_rate': successful_tests / len(all_questions) if all_questions else 0,
        'categories': categories,
        'avg_response_time': sum(response_times) / len(response_times) if response_times else 0
    }
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"all_questions_test_results_{timestamp}.json"
    
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {filename}")
    print(f"\nüéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")

if __name__ == "__main__":
    test_all_questions()
