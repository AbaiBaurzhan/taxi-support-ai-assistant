#!/usr/bin/env python3
"""
üîç –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –£–õ–£–ß–®–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ –ë–ï–ó –°–ï–†–í–ï–†–ê
"""

from main import enhanced_search_client
import time

print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´:")
print("=" * 50)

test_questions = [
    "–ß—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞—Ü–µ–Ω–∫–∞?",
    "–ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É?", 
    "–ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å?",
    "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç",
    "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ç–∞—Ä–∏—Ñ –∫–æ–º—Ñ–æ—Ä—Ç?",
    "–ü–æ—á–µ–º—É –¥–æ—Ä–æ–≥–æ?",
    "–ö—É—Ä—å–µ—Ä –Ω–µ –ø—Ä–∏–µ—Ö–∞–ª",
    "–ù–µ –º–æ–≥—É –æ–ø–ª–∞—Ç–∏—Ç—å",
    "–û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏",
    "–ß–µ–º –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –∫–æ–º—Ñ–æ—Ä—Ç?"
]

results = []
for i, question in enumerate(test_questions, 1):
    print(f"{i:2d}. {question}")
    start_time = time.time()
    result = enhanced_search_client.find_best_answer(question)
    processing_time = time.time() - start_time
    
    print(f"    ‚úÖ –û—Ç–≤–µ—Ç: {result['answer'][:80]}...")
    print(f"    üìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {result['category']}")
    print(f"    üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']}")
    print(f"    üîß –ò—Å—Ç–æ—á–Ω–∏–∫: {result['source']}")
    print(f"    ‚è±Ô∏è –í—Ä–µ–º—è: {processing_time:.2f}—Å")
    print("-" * 40)
    
    results.append({
        'question': question,
        'answer': result['answer'],
        'category': result['category'],
        'confidence': result['confidence'],
        'source': result['source'],
        'time': processing_time
    })

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
print("=" * 30)

enhanced_search_count = sum(1 for r in results if r['source'] == 'enhanced_simple_search')
llm_search_count = sum(1 for r in results if r['source'] == 'optimized_llm_search')
fallback_count = sum(1 for r in results if r['source'] == 'fallback')

print(f"üîç –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫: {enhanced_search_count}/{len(results)} ({enhanced_search_count/len(results)*100:.1f}%)")
print(f"üß† LLM –ø–æ–∏—Å–∫: {llm_search_count}/{len(results)} ({llm_search_count/len(results)*100:.1f}%)")
print(f"‚ùå Fallback: {fallback_count}/{len(results)} ({fallback_count/len(results)*100:.1f}%)")

avg_time = sum(r['time'] for r in results) / len(results)
print(f"‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.2f}—Å")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤
correct_answers = 0
for i, result in enumerate(results):
    question = result['question'].lower()
    category = result['category'].lower()
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏
    if '–Ω–∞—Ü–µ–Ω–∫–∞' in question and 'pricing' in category:
        correct_answers += 1
    elif '–¥–æ—Å—Ç–∞–≤–∫–∞' in question and 'delivery' in category:
        correct_answers += 1
    elif '–±–∞–ª–∞–Ω—Å' in question and 'balance' in category:
        correct_answers += 1
    elif '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ' in question and 'app' in category:
        correct_answers += 1
    elif '—Ç–∞—Ä–∏—Ñ' in question and 'tariffs' in category:
        correct_answers += 1
    elif '–¥–æ—Ä–æ–≥–æ' in question and 'pricing' in category:
        correct_answers += 1
    elif '–∫—É—Ä—å–µ—Ä' in question and 'delivery' in category:
        correct_answers += 1
    elif '–æ–ø–ª–∞—Ç–∏—Ç—å' in question and 'balance' in category:
        correct_answers += 1
    elif '–æ—à–∏–±–∫–∞' in question and 'app' in category:
        correct_answers += 1
    elif '–∫–æ–º—Ñ–æ—Ä—Ç' in question and 'tariffs' in category:
        correct_answers += 1

print(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_answers}/{len(results)} ({correct_answers/len(results)*100:.1f}%)")

print("\nüéØ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")
