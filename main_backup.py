#!/usr/bin/env python3
"""
üöÄ APARU AI ASSISTANT - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ü–û–ò–°–ö–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê
–†–µ–∞–ª–∏–∑—É–µ—Ç –≤—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è LLM –ø–æ–∏—Å–∫–∞
"""

import json
import logging
import requests
from typing import Dict, Any, List, Optional
from datetime import datetime
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse
from pydantic import BaseModel
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(title="APARU Enhanced AI", version="5.0.0")

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ú–æ–¥–µ–ª–∏
class ChatRequest(BaseModel):
    text: str
    user_id: str
    locale: str = "ru"

class ChatResponse(BaseModel):
    response: str
    intent: str
    confidence: float
    source: str
    timestamp: str
    suggestions: List[str] = []

class HealthResponse(BaseModel):
    status: str
    architecture: str = "enhanced_search"
    timestamp: str
    llm_available: bool = False

class EnhancedSearchClient:
    def __init__(self):
        self.ollama_url = os.environ.get("OLLAMA_URL", "http://localhost:11434")
        self.model_name = "aparu-senior-ai"
        self.ollama_available = False
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞
        self.knowledge_base = self._load_knowledge_base()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Ollama
        self._check_ollama_model()
    
    def _load_knowledge_base(self) -> List[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤"""
        try:
            with open("senior_ai_knowledge_base.json", "r", encoding="utf-8") as f:
                data = json.load(f)
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: senior_ai_knowledge_base.json")
                return data
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
            return []
    
    def _check_ollama_model(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Ollama –∏ –º–æ–¥–µ–ª–∏"""
        try:
            response = requests.get(f"{self.ollama_url}/api/tags", timeout=5)
            if response.status_code == 200:
                models = response.json().get("models", [])
                if any(m["name"].startswith(self.model_name) for m in models):
                    self.ollama_available = True
                    logger.info(f"‚úÖ Ollama –∏ –º–æ–¥–µ–ª—å '{self.model_name}' –¥–æ—Å—Ç—É–ø–Ω—ã")
                else:
                    logger.warning(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å '{self.model_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Ollama")
            else:
                logger.warning(f"‚ö†Ô∏è Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Ollama: {e}")
    
    def find_best_answer(self, question: str) -> Dict[str, Any]:
        """–ù–∞—Ö–æ–¥–∏—Ç –ª—É—á—à–∏–π –æ—Ç–≤–µ—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        start_time = datetime.now()
        
        # –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ê–ï–ú LLM –ò –ò–°–ü–û–õ–¨–ó–£–ï–ú –¢–û–õ–¨–ö–û –ü–†–û–°–¢–û–ô –ü–û–ò–°–ö
        logger.info("üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫...")
        result = self._enhanced_simple_search(question)
        processing_time = (datetime.now() - start_time).total_seconds()
        logger.info(f"‚úÖ –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {processing_time:.3f}—Å")
        return result
    
    def _optimized_llm_search_answer(self, question: str) -> Dict[str, Any]:
        """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π LLM –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"""
        try:
            # –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–†–û–ú–ü–¢ –° –ü–†–ò–ú–ï–†–ê–ú–ò
            search_prompt = f"""–ù–∞–π–¥–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞: "{question}"

–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ APARU:
1. –ù–ê–¶–ï–ù–ö–ê - –¥–æ–ø–ª–∞—Ç–∞, –¥–æ—Ä–æ–≥–æ, –ø–æ–≤—ã—à–µ–Ω–∏–µ —Ü–µ–Ω—ã
2. –î–û–°–¢–ê–í–ö–ê - –∫—É—Ä—å–µ—Ä, –ø–æ—Å—ã–ª–∫–∞, –æ—Ç–ø—Ä–∞–≤–∫–∞
3. –ë–ê–õ–ê–ù–° - –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ, –æ–ø–ª–∞—Ç–∞, –ø–ª–∞—Ç–µ–∂
4. –ü–†–ò–õ–û–ñ–ï–ù–ò–ï - –æ—à–∏–±–∫–∞, –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≥–ª—é—á–∏—Ç
5. –¢–ê–†–ò–§–´ - –∫–æ–º—Ñ–æ—Ä—Ç, —ç–∫–æ–Ω–æ–º, –≤–∏–¥—ã –ø–æ–µ–∑–¥–æ–∫

–ü—Ä–∏–º–µ—Ä—ã:
–í–æ–ø—Ä–æ—Å: "–ß—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞—Ü–µ–Ω–∫–∞?" ‚Üí –û—Ç–≤–µ—Ç: 1
–í–æ–ø—Ä–æ—Å: "–ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É?" ‚Üí –û—Ç–≤–µ—Ç: 2
–í–æ–ø—Ä–æ—Å: "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å" ‚Üí –û—Ç–≤–µ—Ç: 3
–í–æ–ø—Ä–æ—Å: "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç" ‚Üí –û—Ç–≤–µ—Ç: 4
–í–æ–ø—Ä–æ—Å: "–¢–∞—Ä–∏—Ñ –∫–æ–º—Ñ–æ—Ä—Ç" ‚Üí –û—Ç–≤–µ—Ç: 5

–¢–≤–æ–π –æ—Ç–≤–µ—Ç (—Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä 1-5):"""

            payload = {
                "model": self.model_name,
                "prompt": search_prompt,
                "stream": False,
                "options": {
                    "temperature": 0.01,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
                    "num_predict": 3,      # –¢–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä
                    "num_ctx": 512,        # –î–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    "repeat_penalty": 1.0,
                    "top_k": 1,            # –¢–æ–ª—å–∫–æ –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
                    "top_p": 0.1,          # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
                    "stop": ["\n", ".", "!", "?", "–û—Ç–≤–µ—Ç:", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è:", "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:", "–ü–æ—Ç–æ–º—É —á—Ç–æ"]  # –†–∞–Ω–Ω–∏–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
                }
            }
            
            response = requests.post(
                f"{self.ollama_url}/api/generate",
                json=payload,
                timeout=12  # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
            )
            
            if response.status_code == 200:
                data = response.json()
                answer = data.get('response', '').strip()
                
                # –ü–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                category_num = self._parse_category_number(answer)
                if category_num:
                    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
                    if 1 <= category_num <= len(self.knowledge_base):
                        kb_item = self.knowledge_base[category_num - 1]
                        return {
                            "answer": kb_item.get("answer", "–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"),
                            "category": kb_item.get("question", f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category_num}"),
                            "confidence": 0.95,
                            "source": "optimized_llm_search"
                        }
                
                logger.warning(f"‚ö†Ô∏è LLM –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {answer}")
                return None
            
            logger.warning(f"‚ö†Ô∏è LLM –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response.status_code}")
            return None
            
        except requests.exceptions.Timeout:
            logger.error(f"‚ùå LLM –ø–æ–∏—Å–∫ —Ç–∞–π–º–∞—É—Ç (>12—Å)")
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ LLM –ø–æ–∏—Å–∫–∞: {e}")
            return None
    
    def _parse_category_number(self, answer: str) -> Optional[int]:
        """–ü–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ LLM"""
        try:
            # –ò—â–µ–º —á–∏—Å–ª–æ –≤ –æ—Ç–≤–µ—Ç–µ
            import re
            numbers = re.findall(r'\d+', answer)
            if numbers:
                num = int(numbers[0])
                if 1 <= num <= 5:
                    return num
            return None
        except:
            return None
    
    def _enhanced_simple_search(self, question: str) -> Dict[str, Any]:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏ —Å–∏–Ω–æ–Ω–∏–º–∞–º"""
        question_lower = question.lower()
        
        # –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ë–ê–ó–ê –ó–ù–ê–ù–ò–ô –° –°–ò–ù–û–ù–ò–ú–ê–ú–ò
        enhanced_kb = {
            "pricing": {
                "keywords": [
                    "–Ω–∞—Ü–µ–Ω–∫–∞", "–¥–æ—Ä–æ–≥–æ", "–ø–æ–¥–æ—Ä–æ–∂–∞–Ω–∏–µ", "–ø–æ–≤—ã—à–µ–Ω–∏–µ", "–¥–æ–ø–ª–∞—Ç–∞", 
                    "—Ü–µ–Ω–∞", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—Ç–∞—Ä–∏—Ñ", "—Ä–∞—Å—Ü–µ–Ω–∫–∞", "–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç",
                    "—Å–ø—Ä–æ—Å", "–ø–æ–≥–æ–¥–∞", "–Ω–∞–¥–±–∞–≤–∫–∞", "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ", "–±–æ–ª—å—à–µ"
                ],
                "variations": [
                    "—á—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞—Ü–µ–Ω–∫–∞", "–ø–æ—á–µ–º—É –¥–æ—Ä–æ–≥–æ", "–æ—Ç–∫—É–¥–∞ –¥–æ–ø–ª–∞—Ç–∞",
                    "–ø–æ–≤—ã—à–∞—é—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç", "–Ω–∞–¥–±–∞–≤–∫–∞ –∫ —Ü–µ–Ω–µ", "–∑–∞—á–µ–º –Ω–∞—Ü–µ–Ω–∫–∞",
                    "–ø–æ—á–µ–º—É —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã—à–µ", "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞", "–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–ø—Ä–æ—Å–∞"
                ]
            },
            "delivery": {
                "keywords": [
                    "–¥–æ—Å—Ç–∞–≤–∫–∞", "–∫—É—Ä—å–µ—Ä", "–ø–æ—Å—ã–ª–∫–∞", "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å", "–∑–∞–∫–∞–∑–∞—Ç—å", 
                    "–∑–∞–∫–∞–∑", "–∫—É—Ä—å–µ—Ä—Å–∫–∞—è", "–ø—Ä–∏–≤–µ–∑—Ç–∏", "–ø—Ä–∏–Ω–µ—Å—Ç–∏", "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å",
                    "–ø–æ–ª—É—á–∏—Ç—å", "–¥–æ—Å—Ç–∞–≤–∏—Ç—å", "–ø–µ—Ä–µ–¥–∞—Ç—å", "–ø—Ä–∏–µ—Ö–∞—Ç—å"
                ],
                "variations": [
                    "–∫–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É", "–∫—É—Ä—å–µ—Ä –Ω–µ –ø—Ä–∏–µ—Ö–∞–ª", "–ø–æ—Å—ã–ª–∫–∞ –Ω–µ –ø—Ä–∏—à–ª–∞",
                    "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã", "–∑–∞–∫–∞–∑–∞—Ç—å –∫—É—Ä—å–µ—Ä–∞", "–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"
                ]
            },
            "balance": {
                "keywords": [
                    "–±–∞–ª–∞–Ω—Å", "—Å—á–µ—Ç", "–∫–æ—à–µ–ª–µ–∫", "–ø–æ–ø–æ–ª–Ω–∏—Ç—å", "–ø–ª–∞—Ç–µ–∂", 
                    "–¥–µ–Ω—å–≥–∏", "–æ–ø–ª–∞—Ç–∞", "–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", "–∑–∞—á–∏—Å–ª–∏—Ç—å", "—Å–ø–∏—Å–∞—Ç—å",
                    "–¥–µ–Ω—å–≥–∏", "—Ä—É–±–ª–∏", "—Ç–µ–Ω–≥–µ", "–≤–∞–ª—é—Ç–∞", "—Ñ–∏–Ω–∞–Ω—Å—ã"
                ],
                "variations": [
                    "–∫–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", "–Ω–µ –º–æ–≥—É –æ–ø–ª–∞—Ç–∏—Ç—å", "–ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç",
                    "–∑–∞—á–∏—Å–ª–∏—Ç—å –¥–µ–Ω—å–≥–∏", "—Å–ø–∏—Å–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞", "–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞"
                ]
            },
            "app": {
                "keywords": [
                    "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "–ø—Ä–æ–≥—Ä–∞–º–º–∞", "—Å–æ—Ñ—Ç", "–∞–ø–ø", "—Ä–∞–±–æ—Ç–∞—Ç—å", 
                    "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "–æ—à–∏–±–∫–∞", "–≥–ª—é—á–∏—Ç", "–∑–∞–≤–∏—Å–∞–µ—Ç", "—Ç–æ—Ä–º–æ–∑–∏—Ç",
                    "—Å–±–æ–π", "–ø—Ä–æ–±–ª–µ–º–∞", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è", "–±–∞–≥", "–∫—Ä—ç—à"
                ],
                "variations": [
                    "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "–æ—à–∏–±–∫–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–ª—é—á–∏—Ç",
                    "–ø—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–∏—Å–∞–µ—Ç", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞", "—Å–±–æ–π –≤ —Å–∏—Å—Ç–µ–º–µ"
                ]
            },
            "tariffs": {
                "keywords": [
                    "—Ç–∞—Ä–∏—Ñ", "–∫–æ–º—Ñ–æ—Ä—Ç", "—ç–∫–æ–Ω–æ–º", "–±–∏–∑–Ω–µ—Å", "–ø–æ–µ–∑–¥–∫–∞", 
                    "–≤–∏–¥", "—Ç–∏–ø", "–∫–ª–∞—Å—Å", "—É—Ä–æ–≤–µ–Ω—å", "–∫–∞—Ç–µ–≥–æ—Ä–∏—è",
                    "–æ—Ç–ª–∏—á–∞–µ—Ç—Å—è", "—Ä–∞–∑–Ω–∏—Ü–∞", "—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ", "–≤—ã–±–æ—Ä"
                ],
                "variations": [
                    "—á—Ç–æ —Ç–∞–∫–æ–µ —Ç–∞—Ä–∏—Ñ –∫–æ–º—Ñ–æ—Ä—Ç", "—á–µ–º –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –∫–æ–º—Ñ–æ—Ä—Ç", "—á—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ —Ç–∞—Ä–∏—Ñ",
                    "–∫–∞–∫–æ–π —Ç–∞—Ä–∏—Ñ –≤—ã–±—Ä–∞—Ç—å", "—Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Ç–∞—Ä–∏—Ñ–∞–º–∏", "—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤"
                ]
            }
        }
        
        # –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–û–ò–°–ö –ü–û –ö–õ–Æ–ß–ï–í–´–ú –°–õ–û–í–ê–ú –ò –°–ò–ù–û–ù–ò–ú–ê–ú
        for category, data in enhanced_kb.items():
            keywords = data["keywords"]
            variations = data["variations"]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
            for keyword in keywords:
                if keyword.lower() in question_lower:
                    # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
                    answer = self._get_answer_by_category(category)
                    return {
                        "answer": answer,
                        "category": category,
                        "confidence": 0.9,
                        "source": "enhanced_simple_search"
                    }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—Ä–∏–∞—Ü–∏–∏
            for variation in variations:
                if variation.lower() in question_lower:
                    answer = self._get_answer_by_category(category)
                    return {
                        "answer": answer,
                        "category": category,
                        "confidence": 0.9,
                        "source": "enhanced_simple_search"
                    }
        
        # Fallback
        return {
            "answer": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
            "category": "unknown",
            "confidence": 0.0,
            "source": "fallback"
        }
    
    def _get_answer_by_category(self, category: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        category_mapping = {
            "pricing": 0,      # –ù–∞—Ü–µ–Ω–∫–∞
            "delivery": 1,     # –î–æ—Å—Ç–∞–≤–∫–∞
            "balance": 2,      # –ë–∞–ª–∞–Ω—Å
            "app": 3,          # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            "tariffs": 4       # –¢–∞—Ä–∏—Ñ—ã
        }
        
        index = category_mapping.get(category, 0)
        if 0 <= index < len(self.knowledge_base):
            return self.knowledge_base[index].get("answer", "–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return "–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
enhanced_search_client = EnhancedSearchClient()

@app.get("/")
async def root():
    return {
        "message": "APARU Enhanced AI", 
        "status": "running", 
        "version": "5.0.0",
        "architecture": "enhanced_search",
        "llm_available": enhanced_search_client.ollama_available
    }

@app.get("/health", response_model=HealthResponse)
async def health():
    return HealthResponse(
        status="healthy",
        architecture="enhanced_search",
        timestamp=datetime.now().isoformat(),
        llm_available=enhanced_search_client.ollama_available
    )

@app.get("/webapp", response_class=HTMLResponse)
async def webapp():
    """Telegram WebApp –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    try:
        with open("webapp.html", "r", encoding="utf-8") as f:
            html_content = f.read()
        return HTMLResponse(content=html_content)
    except FileNotFoundError:
        return HTMLResponse(
            content="<h1>WebApp –Ω–µ –Ω–∞–π–¥–µ–Ω</h1><p>–§–∞–π–ª webapp.html –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</p>",
            status_code=404
        )

@app.post("/chat", response_model=ChatResponse)
async def chat(request: ChatRequest):
    """–û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —á–∞—Ç–∞"""
    try:
        result = enhanced_search_client.find_best_answer(request.text)
        
        return ChatResponse(
            response=result["answer"],
            intent=result["category"],
            confidence=result["confidence"],
            source=result["source"],
            timestamp=datetime.now().isoformat(),
            suggestions=[]
        )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /chat: {e}")
        return ChatResponse(
            response="–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.",
            intent="error",
            confidence=0.0,
            source="error",
            timestamp=datetime.now().isoformat(),
            suggestions=[]
        )

if __name__ == "__main__":
    import uvicorn
    
    # Railway –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é PORT
    port = int(os.environ.get("PORT", 8000))
    uvicorn.run(app, host="0.0.0.0", port=port)