#!/usr/bin/env python3
"""
üéØ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –í–´–ë–û–†–ê –û–¢–í–ï–¢–û–í –° –ú–û–†–§–û–õ–û–ì–ò–ï–ô
"""

import json
import logging
import requests
from typing import Dict, Any, List, Optional
from datetime import datetime
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse
from pydantic import BaseModel
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(title="APARU Enhanced Answer Selection", version="10.0.0")

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ú–æ–¥–µ–ª–∏
class ChatRequest(BaseModel):
    text: str
    user_id: str
    locale: str = "ru"

class ChatResponse(BaseModel):
    response: str
    intent: str
    confidence: float
    source: str
    timestamp: str
    suggestions: List[str] = []

class HealthResponse(BaseModel):
    status: str
    architecture: str = "enhanced_answer_selection"
    timestamp: str
    llm_available: bool = False

class SimpleAnswerSelectionClient:
    def __init__(self):
        self.knowledge_base = self._load_knowledge_base()
        self.morphological_forms = self._create_morphological_forms()
        
    def _load_knowledge_base(self) -> List[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"""
        try:
            with open('BZ.txt', 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
            return []
    
    def _create_morphological_forms(self) -> Dict[str, List[str]]:
        """–°–æ–∑–¥–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º"""
        return {
            # –ù–∞—Ü–µ–Ω–∫–∞
            "–Ω–∞—Ü–µ–Ω–∫–∞": ["–Ω–∞—Ü–µ–Ω–∫–∞", "–Ω–∞—Ü–µ–Ω–∫–∏", "–Ω–∞—Ü–µ–Ω–∫—É", "–Ω–∞—Ü–µ–Ω–∫–æ–π", "–Ω–∞—Ü–µ–Ω–∫–µ", "–Ω–∞—Ü–µ–Ω–∫–∞—Ö"],
            "–¥–æ–ø–ª–∞—Ç–∞": ["–¥–æ–ø–ª–∞—Ç–∞", "–¥–æ–ø–ª–∞—Ç—ã", "–¥–æ–ø–ª–∞—Ç—É", "–¥–æ–ø–ª–∞—Ç–æ–π", "–¥–æ–ø–ª–∞—Ç–µ", "–¥–æ–ø–ª–∞—Ç–∞—Ö"],
            "–Ω–∞–¥–±–∞–≤–∫–∞": ["–Ω–∞–¥–±–∞–≤–∫–∞", "–Ω–∞–¥–±–∞–≤–∫–∏", "–Ω–∞–¥–±–∞–≤–∫—É", "–Ω–∞–¥–±–∞–≤–∫–æ–π", "–Ω–∞–¥–±–∞–≤–∫–µ", "–Ω–∞–¥–±–∞–≤–∫–∞—Ö"],
            "–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç": ["–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç", "–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã", "–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞", "–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º", "–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–µ", "–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞—Ö"],
            
            # –ö–æ–º—Ñ–æ—Ä—Ç
            "–∫–æ–º—Ñ–æ—Ä—Ç": ["–∫–æ–º—Ñ–æ—Ä—Ç", "–∫–æ–º—Ñ–æ—Ä—Ç—ã", "–∫–æ–º—Ñ–æ—Ä—Ç–∞", "–∫–æ–º—Ñ–æ—Ä—Ç–æ–º", "–∫–æ–º—Ñ–æ—Ä—Ç–µ", "–∫–æ–º—Ñ–æ—Ä—Ç–∞—Ö"],
            "—Ç–∞—Ä–∏—Ñ": ["—Ç–∞—Ä–∏—Ñ", "—Ç–∞—Ä–∏—Ñ—ã", "—Ç–∞—Ä–∏—Ñ–∞", "—Ç–∞—Ä–∏—Ñ–æ–º", "—Ç–∞—Ä–∏—Ñ–µ", "—Ç–∞—Ä–∏—Ñ–∞—Ö"],
            "–∫–ª–∞—Å—Å": ["–∫–ª–∞—Å—Å", "–∫–ª–∞—Å—Å—ã", "–∫–ª–∞—Å—Å–∞", "–∫–ª–∞—Å—Å–æ–º", "–∫–ª–∞—Å—Å–µ", "–∫–ª–∞—Å—Å–∞—Ö"],
            
            # –†–∞—Å—Ü–µ–Ω–∫–∞
            "—Ä–∞—Å—Ü–µ–Ω–∫–∞": ["—Ä–∞—Å—Ü–µ–Ω–∫–∞", "—Ä–∞—Å—Ü–µ–Ω–∫–∏", "—Ä–∞—Å—Ü–µ–Ω–∫—É", "—Ä–∞—Å—Ü–µ–Ω–∫–æ–π", "—Ä–∞—Å—Ü–µ–Ω–∫–µ", "—Ä–∞—Å—Ü–µ–Ω–∫–∞—Ö"],
            "—Å—Ç–æ–∏–º–æ—Å—Ç—å": ["—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—Å—Ç–æ–∏–º–æ—Å—Ç–∏", "—Å—Ç–æ–∏–º–æ—Å—Ç—å—é", "—Å—Ç–æ–∏–º–æ—Å—Ç–∏", "—Å—Ç–æ–∏–º–æ—Å—Ç–∏", "—Å—Ç–æ–∏–º–æ—Å—Ç—è—Ö"],
            "—Ü–µ–Ω–∞": ["—Ü–µ–Ω–∞", "—Ü–µ–Ω—ã", "—Ü–µ–Ω—É", "—Ü–µ–Ω–æ–π", "—Ü–µ–Ω–µ", "—Ü–µ–Ω–∞—Ö"],
            
            # –î–æ—Å—Ç–∞–≤–∫–∞
            "–¥–æ—Å—Ç–∞–≤–∫–∞": ["–¥–æ—Å—Ç–∞–≤–∫–∞", "–¥–æ—Å—Ç–∞–≤–∫–∏", "–¥–æ—Å—Ç–∞–≤–∫—É", "–¥–æ—Å—Ç–∞–≤–∫–æ–π", "–¥–æ—Å—Ç–∞–≤–∫–µ", "–¥–æ—Å—Ç–∞–≤–∫–∞—Ö"],
            "–∑–∞–∫–∞–∑": ["–∑–∞–∫–∞–∑", "–∑–∞–∫–∞–∑—ã", "–∑–∞–∫–∞–∑–∞", "–∑–∞–∫–∞–∑–æ–º", "–∑–∞–∫–∞–∑–µ", "–∑–∞–∫–∞–∑–∞—Ö"],
            
            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑
            "–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π": ["–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π", "–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ", "–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ", "–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º", "–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–º", "–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö"],
            "–∑–∞—Ä–∞–Ω–µ–µ": ["–∑–∞—Ä–∞–Ω–µ–µ"],
            
            # –í–æ–¥–∏—Ç–µ–ª—å
            "–≤–æ–¥–∏—Ç–µ–ª—å": ["–≤–æ–¥–∏—Ç–µ–ª—å", "–≤–æ–¥–∏—Ç–µ–ª–∏", "–≤–æ–¥–∏—Ç–µ–ª—è", "–≤–æ–¥–∏—Ç–µ–ª–µ–º", "–≤–æ–¥–∏—Ç–µ–ª–µ", "–≤–æ–¥–∏—Ç–µ–ª—è—Ö"],
            "–∑–∞–∫–∞–∑—ã": ["–∑–∞–∫–∞–∑—ã", "–∑–∞–∫–∞–∑–æ–≤", "–∑–∞–∫–∞–∑–∞–º", "–∑–∞–∫–∞–∑–∞–º–∏", "–∑–∞–∫–∞–∑–∞—Ö", "–∑–∞–∫–∞–∑–∞—Ö"],
            
            # –ë–∞–ª–∞–Ω—Å
            "–±–∞–ª–∞–Ω—Å": ["–±–∞–ª–∞–Ω—Å", "–±–∞–ª–∞–Ω—Å—ã", "–±–∞–ª–∞–Ω—Å–∞", "–±–∞–ª–∞–Ω—Å–æ–º", "–±–∞–ª–∞–Ω—Å–µ", "–±–∞–ª–∞–Ω—Å–∞—Ö"],
            "–ø–æ–ø–æ–ª–Ω–∏—Ç—å": ["–ø–æ–ø–æ–ª–Ω–∏—Ç—å", "–ø–æ–ø–æ–ª–Ω—è—é", "–ø–æ–ø–æ–ª–Ω—è–µ—à—å", "–ø–æ–ø–æ–ª–Ω—è–µ—Ç", "–ø–æ–ø–æ–ª–Ω—è–µ–º", "–ø–æ–ø–æ–ª–Ω—è–µ—Ç–µ", "–ø–æ–ø–æ–ª–Ω—è—é—Ç"],
            "–æ–ø–ª–∞—Ç–∏—Ç—å": ["–æ–ø–ª–∞—Ç–∏—Ç—å", "–æ–ø–ª–∞—á–∏–≤–∞—é", "–æ–ø–ª–∞—á–∏–≤–∞–µ—à—å", "–æ–ø–ª–∞—á–∏–≤–∞–µ—Ç", "–æ–ø–ª–∞—á–∏–≤–∞–µ–º", "–æ–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ", "–æ–ø–ª–∞—á–∏–≤–∞—é—Ç"],
            
            # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ": ["–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö"],
            "–æ–±–Ω–æ–≤–∏—Ç—å": ["–æ–±–Ω–æ–≤–∏—Ç—å", "–æ–±–Ω–æ–≤–ª—è—é", "–æ–±–Ω–æ–≤–ª—è–µ—à—å", "–æ–±–Ω–æ–≤–ª—è–µ—Ç", "–æ–±–Ω–æ–≤–ª—è–µ–º", "–æ–±–Ω–æ–≤–ª—è–µ—Ç–µ", "–æ–±–Ω–æ–≤–ª—è—é—Ç"],
            
            # –ü—Ä–æ–º–æ–∫–æ–¥
            "–ø—Ä–æ–º–æ–∫–æ–¥": ["–ø—Ä–æ–º–æ–∫–æ–¥", "–ø—Ä–æ–º–æ–∫–æ–¥—ã", "–ø—Ä–æ–º–æ–∫–æ–¥–∞", "–ø—Ä–æ–º–æ–∫–æ–¥–æ–º", "–ø—Ä–æ–º–æ–∫–æ–¥–µ", "–ø—Ä–æ–º–æ–∫–æ–¥–∞—Ö"],
            "—Å–∫–∏–¥–∫–∞": ["—Å–∫–∏–¥–∫–∞", "—Å–∫–∏–¥–∫–∏", "—Å–∫–∏–¥–∫—É", "—Å–∫–∏–¥–∫–æ–π", "—Å–∫–∏–¥–∫–µ", "—Å–∫–∏–¥–∫–∞—Ö"],
            "–±–æ–Ω—É—Å": ["–±–æ–Ω—É—Å", "–±–æ–Ω—É—Å—ã", "–±–æ–Ω—É—Å–∞", "–±–æ–Ω—É—Å–æ–º", "–±–æ–Ω—É—Å–µ", "–±–æ–Ω—É—Å–∞—Ö"],
            
            # –û—Ç–º–µ–Ω–∞
            "–æ—Ç–º–µ–Ω–∏—Ç—å": ["–æ—Ç–º–µ–Ω–∏—Ç—å", "–æ—Ç–º–µ–Ω—è—é", "–æ—Ç–º–µ–Ω—è–µ—à—å", "–æ—Ç–º–µ–Ω—è–µ—Ç", "–æ—Ç–º–µ–Ω—è–µ–º", "–æ—Ç–º–µ–Ω—è–µ—Ç–µ", "–æ—Ç–º–µ–Ω—è—é—Ç"],
            "–æ—Ç–º–µ–Ω–∞": ["–æ—Ç–º–µ–Ω–∞", "–æ—Ç–º–µ–Ω—ã", "–æ—Ç–º–µ–Ω—É", "–æ—Ç–º–µ–Ω–æ–π", "–æ—Ç–º–µ–Ω–µ", "–æ—Ç–º–µ–Ω–∞—Ö"]
        }
    
    def _llm_search_answer(self, question: str) -> Dict[str, Any]:
        """LLM –ø–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞"""
        try:
            prompt = f"""–í–æ–ø—Ä–æ—Å: "{question}"

–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:
1 - –Ω–∞—Ü–µ–Ω–∫–∞
2 - –∫–æ–º—Ñ–æ—Ä—Ç  
3 - —Ä–∞—Å—Ü–µ–Ω–∫–∞
4 - –¥–æ—Å—Ç–∞–≤–∫–∞
5 - –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑
6 - –≤–æ–¥–∏—Ç–µ–ª—å
7 - –±–∞–ª–∞–Ω—Å
8 - –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
9 - –ø—Ä–æ–º–æ–∫–æ–¥
10 - –æ—Ç–º–µ–Ω–∞

–ù–æ–º–µ—Ä:"""
            
            response = requests.post(
                "http://127.0.0.1:11434/api/generate",
                json={
                    "model": "llama2:7b",
                    "prompt": prompt,
                    "stream": False,
                    "options": {
                        "temperature": 0.0,
                        "num_predict": 2,
                        "num_ctx": 128,
                        "top_k": 1,
                        "top_p": 0.1,
                        "stop": ["\n", ".", " "]
                    }
                },
                timeout=15
            )
            
            if response.status_code == 200:
                llm_response = response.json()["response"].strip()
                category_number = int(llm_response) if llm_response.isdigit() else 0
                
                if 1 <= category_number <= 10:
                    answer = self.knowledge_base[category_number - 1]["answer"]
                    return {
                        "answer": answer,
                        "category": f"–û—Ç–≤–µ—Ç {category_number}",
                        "confidence": 0.95,
                        "source": "enhanced_llm"
                    }
            
            raise Exception("LLM –Ω–µ –≤–µ—Ä–Ω—É–ª –≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç")
            
        except Exception as e:
            logger.error(f"‚ùå LLM –æ—à–∏–±–∫–∞: {e}")
            raise e
    
    def _enhanced_morphological_search(self, question: str) -> Optional[Dict[str, Any]]:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫"""
        question_lower = question.lower()
        
        # –ò—â–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ —Ñ–æ—Ä–º–∞–º–∏
        for base_word, forms in self.morphological_forms.items():
            for form in forms:
                if form in question_lower:
                    # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
                    category = self._find_category_by_keyword(base_word)
                    if category:
                        return {
                            "answer": category["answer"],
                            "category": f"morphological_match_{base_word}",
                            "confidence": 0.9,
                            "source": "morphological_search"
                        }
        
        return None
    
    def _find_category_by_keyword(self, keyword: str) -> Optional[Dict[str, Any]]:
        """–ù–∞—Ö–æ–¥–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É"""
        keyword_mapping = {
            "–Ω–∞—Ü–µ–Ω–∫–∞": 0, "–¥–æ–ø–ª–∞—Ç–∞": 0, "–Ω–∞–¥–±–∞–≤–∫–∞": 0, "–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç": 0,
            "–∫–æ–º—Ñ–æ—Ä—Ç": 1, "—Ç–∞—Ä–∏—Ñ": 1, "–∫–ª–∞—Å—Å": 1,
            "—Ä–∞—Å—Ü–µ–Ω–∫–∞": 2, "—Å—Ç–æ–∏–º–æ—Å—Ç—å": 2, "—Ü–µ–Ω–∞": 2,
            "–¥–æ—Å—Ç–∞–≤–∫–∞": 3, "–∑–∞–∫–∞–∑": 3,
            "–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π": 4, "–∑–∞—Ä–∞–Ω–µ–µ": 4,
            "–≤–æ–¥–∏—Ç–µ–ª—å": 5, "–∑–∞–∫–∞–∑—ã": 5,
            "–±–∞–ª–∞–Ω—Å": 6, "–ø–æ–ø–æ–ª–Ω–∏—Ç—å": 6, "–æ–ø–ª–∞—Ç–∏—Ç—å": 6,
            "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ": 7, "–æ–±–Ω–æ–≤–∏—Ç—å": 7,
            "–ø—Ä–æ–º–æ–∫–æ–¥": 8, "—Å–∫–∏–¥–∫–∞": 8, "–±–æ–Ω—É—Å": 8,
            "–æ—Ç–º–µ–Ω–∏—Ç—å": 9, "–æ—Ç–º–µ–Ω–∞": 9
        }
        
        if keyword in keyword_mapping:
            category_index = keyword_mapping[keyword]
            if category_index < len(self.knowledge_base):
                return self.knowledge_base[category_index]
        
        return None
    
    def _partial_match_search(self, question: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º"""
        question_lower = question.lower()
        question_words = question_lower.split()
        
        # –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        for i, item in enumerate(self.knowledge_base):
            for keyword in item["keywords"]:
                keyword_lower = keyword.lower()
                
                # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                if keyword_lower in question_lower:
                    return {
                        "answer": item["answer"],
                        "category": f"partial_match_{i+1}",
                        "confidence": 0.8,
                        "source": "partial_search"
                    }
                
                # –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)
                if len(keyword_lower) >= 3:
                    for word in question_words:
                        if len(word) >= 3 and keyword_lower in word:
                            return {
                                "answer": item["answer"],
                                "category": f"partial_match_{i+1}",
                                "confidence": 0.6,
                                "source": "partial_search"
                            }
        
        return None
    
    def find_best_answer(self, question: str) -> Dict[str, Any]:
        """–ù–∞—Ö–æ–¥–∏—Ç –ª—É—á—à–∏–π –æ—Ç–≤–µ—Ç —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π"""
        start_time = datetime.now()
        
        try:
            # 1. –ü—Ä–æ–±—É–µ–º LLM
            logger.info("üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é LLM...")
            result = self._llm_search_answer(question)
            processing_time = (datetime.now() - start_time).total_seconds()
            logger.info(f"‚úÖ LLM –≤—ã–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {processing_time:.2f}—Å")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå LLM –≤—ã–±–æ—Ä —Ç–∞–π–º–∞—É—Ç (>5—Å)")
            
            # 2. –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
            logger.info("üîÑ –ü—Ä–æ–±—É–µ–º –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫...")
            result = self._enhanced_morphological_search(question)
            if result:
                processing_time = (datetime.now() - start_time).total_seconds()
                logger.info(f"‚úÖ –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {processing_time:.2f}—Å")
                return result
            
            # 3. –ß–∞—Å—Ç–∏—á–Ω—ã–π –ø–æ–∏—Å–∫
            logger.info("üîÑ –ü—Ä–æ–±—É–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–π –ø–æ–∏—Å–∫...")
            result = self._partial_match_search(question)
            if result:
                processing_time = (datetime.now() - start_time).total_seconds()
                logger.info(f"‚úÖ –ß–∞—Å—Ç–∏—á–Ω—ã–π –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {processing_time:.2f}—Å")
                return result
            
            # 4. Fallback
            logger.info("üîÑ Fallback –æ—Ç–≤–µ—Ç...")
            processing_time = (datetime.now() - start_time).total_seconds()
            logger.info(f"‚ùå Fallback –æ—Ç–≤–µ—Ç –∑–∞ {processing_time:.2f}—Å")
            
            return {
                "answer": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
                "category": "unknown",
                "confidence": 0.0,
                "source": "fallback"
            }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
simple_answer_client = SimpleAnswerSelectionClient()

@app.on_event("startup")
async def startup_event():
    """–ü—Ä–æ–≥—Ä–µ–≤ LLM –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        logger.info("üî• –ü—Ä–æ–≥—Ä–µ–≤ LLM...")
        requests.post(
            "http://127.0.0.1:11434/api/generate",
            json={
                "model": "llama2:7b",
                "prompt": "1",
                "stream": False,
                "options": {"num_predict": 1, "temperature": 0.0}
            },
            timeout=20
        )
        logger.info("‚úÖ LLM –ø—Ä–æ–≥—Ä–µ—Ç —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≥—Ä–µ—Ç—å LLM: {e}")

@app.get("/")
async def root():
    return {
        "message": "APARU Enhanced Answer Selection", 
        "status": "running", 
        "version": "10.0.0",
        "features": ["LLM Selection", "Morphological Search", "Partial Match", "Fallback"]
    }

@app.get("/health", response_model=HealthResponse)
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º LLM
        llm_available = False
        try:
            response = requests.get("http://127.0.0.1:11434/api/tags", timeout=2)
            llm_available = response.status_code == 200
        except:
            pass
        
        return HealthResponse(
            status="healthy",
            timestamp=datetime.now().isoformat(),
            llm_available=llm_available
        )
    except Exception as e:
        logger.error(f"‚ùå Health check failed: {e}")
        raise HTTPException(status_code=500, detail="Health check failed")

@app.post("/chat", response_model=ChatResponse)
async def chat_endpoint(request: ChatRequest):
    """–û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —á–∞—Ç–∞"""
    try:
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å: {request.text}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å
        result = simple_answer_client.find_best_answer(request.text)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = ChatResponse(
            response=result["answer"],
            intent=result["category"],
            confidence=result["confidence"],
            source=result["source"],
            timestamp=datetime.now().isoformat(),
            suggestions=[]
        )
        
        logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {result['source']}")
        return response
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@app.get("/webapp", response_class=HTMLResponse)
async def webapp():
    """Telegram WebApp –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    html_content = """
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>APARU Support</title>
        <script src="https://telegram.org/js/telegram-web-app.js"></script>
        <style>
            body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #f0f0f0; }
            .container { max-width: 600px; margin: 0 auto; background: white; border-radius: 10px; padding: 20px; }
            .header { text-align: center; margin-bottom: 20px; }
            .chat-container { height: 400px; overflow-y: auto; border: 1px solid #ddd; padding: 10px; margin-bottom: 20px; }
            .message { margin-bottom: 10px; padding: 10px; border-radius: 10px; }
            .user-message { background: #007bff; color: white; margin-left: 20%; }
            .bot-message { background: #f8f9fa; color: black; margin-right: 20%; }
            .input-container { display: flex; gap: 10px; }
            .input-field { flex: 1; padding: 10px; border: 1px solid #ddd; border-radius: 5px; }
            .send-button { padding: 10px 20px; background: #007bff; color: white; border: none; border-radius: 5px; cursor: pointer; }
            .quick-buttons { display: flex; flex-wrap: wrap; gap: 10px; margin-bottom: 20px; }
            .quick-button { padding: 8px 16px; background: #e9ecef; border: 1px solid #ddd; border-radius: 20px; cursor: pointer; font-size: 14px; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üöï APARU Support</h1>
                <p>–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å –º–æ—Ä—Ñ–æ–ª–æ–≥–∏–µ–π</p>
            </div>
            
            <div class="quick-buttons">
                <button class="quick-button" onclick="sendQuickMessage('–ß—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞—Ü–µ–Ω–∫–∞?')">–ù–∞—Ü–µ–Ω–∫–∞</button>
                <button class="quick-button" onclick="sendQuickMessage('–ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å?')">–ë–∞–ª–∞–Ω—Å</button>
                <button class="quick-button" onclick="sendQuickMessage('–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–æ–º—Ñ–æ—Ä—Ç?')">–ö–æ–º—Ñ–æ—Ä—Ç</button>
                <button class="quick-button" onclick="sendQuickMessage('–ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑?')">–û—Ç–º–µ–Ω–∞</button>
                <button class="quick-button" onclick="sendQuickMessage('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')">–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</button>
            </div>
            
            <div class="chat-container" id="chatContainer">
                <div class="message bot-message">
                    <strong>APARU Support:</strong> –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ —Ç–∞–∫—Å–∏ APARU. –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –±—ã—Å—Ç—Ä—É—é –∫–Ω–æ–ø–∫—É.
                </div>
            </div>
            
            <div class="input-container">
                <input type="text" class="input-field" id="messageInput" placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..." onkeypress="handleKeyPress(event)">
                <button class="send-button" onclick="sendMessage()">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
            </div>
        </div>

        <script>
            const chatContainer = document.getElementById('chatContainer');
            const messageInput = document.getElementById('messageInput');
            
            function addMessage(text, isUser = false) {
                const messageDiv = document.createElement('div');
                messageDiv.className = `message ${isUser ? 'user-message' : 'bot-message'}`;
                messageDiv.innerHTML = `<strong>${isUser ? '–í—ã:' : 'APARU Support:'}</strong> ${text}`;
                chatContainer.appendChild(messageDiv);
                chatContainer.scrollTop = chatContainer.scrollHeight;
            }
            
            async function sendMessage() {
                const message = messageInput.value.trim();
                if (!message) return;
                
                addMessage(message, true);
                messageInput.value = '';
                
                try {
                    const response = await fetch('/chat', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            text: message,
                            user_id: 'webapp_user',
                            locale: 'ru'
                        })
                    });
                    
                    const data = await response.json();
                    addMessage(data.response);
                    
                } catch (error) {
                    addMessage('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                }
            }
            
            function sendQuickMessage(message) {
                messageInput.value = message;
                sendMessage();
            }
            
            function handleKeyPress(event) {
                if (event.key === 'Enter') {
                    sendMessage();
                }
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
            if (window.Telegram && window.Telegram.WebApp) {
                window.Telegram.WebApp.ready();
                window.Telegram.WebApp.expand();
            }
        </script>
    </body>
    </html>
    """
    return HTMLResponse(content=html_content)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)