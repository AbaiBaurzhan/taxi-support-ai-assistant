#!/usr/bin/env python3
"""
üß™ –¢–ï–°–¢ –£–õ–£–ß–®–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ –° –ú–û–†–§–û–õ–û–ì–ò–ï–ô
"""

from enhanced_main import simple_answer_client
import time

print("üß™ –¢–ï–°–¢ –£–õ–£–ß–®–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ –° –ú–û–†–§–û–õ–û–ì–ò–ï–ô:")
print("=" * 70)

# –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏
test_questions = [
    # –ù–∞—Ü–µ–Ω–∫–∞ - –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—ã
    "–Ω–∞—Ü–µ–Ω–∫–∏", "–Ω–∞—Ü–µ–Ω–∫—É", "–Ω–∞—Ü–µ–Ω–∫–æ–π", "–Ω–∞—Ü–µ–Ω–∫–µ",
    "–¥–æ–ø–ª–∞—Ç—ã", "–¥–æ–ø–ª–∞—Ç—É", "–¥–æ–ø–ª–∞—Ç–æ–π", "–¥–æ–ø–ª–∞—Ç–µ",
    "–Ω–∞–¥–±–∞–≤–∫–∏", "–Ω–∞–¥–±–∞–≤–∫—É", "–Ω–∞–¥–±–∞–≤–∫–æ–π", "–Ω–∞–¥–±–∞–≤–∫–µ",
    "–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã", "–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞", "–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º",
    
    # –ö–æ–º—Ñ–æ—Ä—Ç - –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—ã
    "–∫–æ–º—Ñ–æ—Ä—Ç—ã", "–∫–æ–º—Ñ–æ—Ä—Ç–∞", "–∫–æ–º—Ñ–æ—Ä—Ç–æ–º", "–∫–æ–º—Ñ–æ—Ä—Ç–µ",
    "—Ç–∞—Ä–∏—Ñ—ã", "—Ç–∞—Ä–∏—Ñ–∞", "—Ç–∞—Ä–∏—Ñ–æ–º", "—Ç–∞—Ä–∏—Ñ–µ",
    "–∫–ª–∞—Å—Å—ã", "–∫–ª–∞—Å—Å–∞", "–∫–ª–∞—Å—Å–æ–º", "–∫–ª–∞—Å—Å–µ",
    
    # –ë–∞–ª–∞–Ω—Å - –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—ã
    "–±–∞–ª–∞–Ω—Å—ã", "–±–∞–ª–∞–Ω—Å–∞", "–±–∞–ª–∞–Ω—Å–æ–º", "–±–∞–ª–∞–Ω—Å–µ",
    "–ø–æ–ø–æ–ª–Ω—è—é", "–ø–æ–ø–æ–ª–Ω—è–µ—à—å", "–ø–æ–ø–æ–ª–Ω—è–µ—Ç", "–ø–æ–ø–æ–ª–Ω—è–µ–º",
    "–æ–ø–ª–∞—á–∏–≤–∞—é", "–æ–ø–ª–∞—á–∏–≤–∞–µ—à—å", "–æ–ø–ª–∞—á–∏–≤–∞–µ—Ç", "–æ–ø–ª–∞—á–∏–≤–∞–µ–º",
    
    # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ - –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—ã
    "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏",
    "–æ–±–Ω–æ–≤–ª—è—é", "–æ–±–Ω–æ–≤–ª—è–µ—à—å", "–æ–±–Ω–æ–≤–ª—è–µ—Ç", "–æ–±–Ω–æ–≤–ª—è–µ–º",
    
    # –ü—Ä–æ–º–æ–∫–æ–¥ - –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—ã
    "–ø—Ä–æ–º–æ–∫–æ–¥—ã", "–ø—Ä–æ–º–æ–∫–æ–¥–∞", "–ø—Ä–æ–º–æ–∫–æ–¥–æ–º", "–ø—Ä–æ–º–æ–∫–æ–¥–µ",
    "—Å–∫–∏–¥–∫–∏", "—Å–∫–∏–¥–∫—É", "—Å–∫–∏–¥–∫–æ–π", "—Å–∫–∏–¥–∫–µ",
    "–±–æ–Ω—É—Å—ã", "–±–æ–Ω—É—Å–∞", "–±–æ–Ω—É—Å–æ–º", "–±–æ–Ω—É—Å–µ",
    
    # –û—Ç–º–µ–Ω–∞ - –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—ã
    "–æ—Ç–º–µ–Ω—è—é", "–æ—Ç–º–µ–Ω—è–µ—à—å", "–æ—Ç–º–µ–Ω—è–µ—Ç", "–æ—Ç–º–µ–Ω—è–µ–º",
    "–æ—Ç–º–µ–Ω—ã", "–æ—Ç–º–µ–Ω—É", "–æ—Ç–º–µ–Ω–æ–π", "–æ—Ç–º–µ–Ω–µ",
    
    # –°–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    "–ü–æ—á–µ–º—É —É –º–µ–Ω—è –Ω–∞—Ü–µ–Ω–∫–∏?", "–ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã?", "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–æ–º—Ñ–æ—Ä—Ç—ã?",
    "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã?", "–ú–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑—ã?", "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç"
]

results = []
for i, question in enumerate(test_questions, 1):
    print(f"{i:3d}. {question}")
    start_time = time.time()
    result = simple_answer_client.find_best_answer(question)
    processing_time = time.time() - start_time
    
    print(f"     ‚úÖ –û—Ç–≤–µ—Ç: {result['answer'][:60]}...")
    print(f"     üìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {result['category']}")
    print(f"     üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']}")
    print(f"     üîß –ò—Å—Ç–æ—á–Ω–∏–∫: {result['source']}")
    print(f"     ‚è±Ô∏è –í—Ä–µ–º—è: {processing_time:.2f}—Å")
    print("-" * 60)
    
    results.append({
        'question': question,
        'answer': result['answer'],
        'category': result['category'],
        'confidence': result['confidence'],
        'source': result['source'],
        'time': processing_time
    })

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –£–õ–£–ß–®–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´:")
print("=" * 50)

llm_count = sum(1 for r in results if r['source'] == 'enhanced_llm')
morphological_count = sum(1 for r in results if r['source'] == 'morphological_search')
partial_count = sum(1 for r in results if r['source'] == 'partial_search')
fallback_count = sum(1 for r in results if r['source'] == 'fallback')

print(f"üéØ –£–ª—É—á—à–µ–Ω–Ω–∞—è LLM: {llm_count}/{len(results)} ({llm_count/len(results)*100:.1f}%)")
print(f"üî§ –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫: {morphological_count}/{len(results)} ({morphological_count/len(results)*100:.1f}%)")
print(f"üîç –ß–∞—Å—Ç–∏—á–Ω—ã–π –ø–æ–∏—Å–∫: {partial_count}/{len(results)} ({partial_count/len(results)*100:.1f}%)")
print(f"‚ùå Fallback: {fallback_count}/{len(results)} ({fallback_count/len(results)*100:.1f}%)")

avg_time = sum(r['time'] for r in results) / len(results)
print(f"‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.2f}—Å")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤
good_answers = sum(1 for r in results if r['confidence'] > 0.8)
print(f"‚úÖ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {good_answers}/{len(results)} ({good_answers/len(results)*100:.1f}%)")

# –ê–Ω–∞–ª–∏–∑ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
sources = {}
for result in results:
    source = result['source']
    if source not in sources:
        sources[source] = {'total': 0, 'good': 0}
    sources[source]['total'] += 1
    if result['confidence'] > 0.8:
        sources[source]['good'] += 1

print(f"\nüìà –ê–ù–ê–õ–ò–ó –ü–û –ò–°–¢–û–ß–ù–ò–ö–ê–ú:")
print("=" * 40)
for source, stats in sources.items():
    accuracy = stats['good'] / stats['total'] * 100 if stats['total'] > 0 else 0
    print(f"{source}: {stats['good']}/{stats['total']} ({accuracy:.1f}%)")

print(f"\nüéØ –¢–ï–°–¢ –£–õ–£–ß–®–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ –ó–ê–í–ï–†–®–ï–ù!")
print(f"–í—Å–µ–≥–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(test_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤")
