#!/usr/bin/env python3
"""
üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ LLM –ü–û –í–°–ï–ú –í–û–ü–†–û–°–ê–ú APARU
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫–æ–≤—É—é LLM —Å–∏—Å—Ç–µ–º—É –Ω–∞ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
"""

import json
import time
import requests
from typing import Dict, Any, List, Optional
from datetime import datetime
import os

class ComprehensiveLLMTest:
    def __init__(self):
        self.knowledge_base = self._load_knowledge_base()
        self.test_results = []
        self.llm_available = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å LLM
        self._check_llm_availability()
    
    def _load_knowledge_base(self) -> List[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"""
        try:
            with open("senior_ai_knowledge_base.json", "r", encoding="utf-8") as f:
                data = json.load(f)
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: {len(data)} –≤–æ–ø—Ä–æ—Å–æ–≤")
                return data
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
            return []
    
    def _check_llm_availability(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å LLM"""
        try:
            response = requests.get("http://localhost:11434/api/tags", timeout=5)
            if response.status_code == 200:
                models = response.json().get("models", [])
                if any(m["name"].startswith("aparu-senior-ai") for m in models):
                    self.llm_available = True
                    print("‚úÖ LLM –º–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞")
                else:
                    print("‚ö†Ô∏è LLM –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            else:
                print("‚ö†Ô∏è Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Ollama: {e}")
    
    def test_llm_search(self, question: str, expected_category: str) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç LLM –ø–æ–∏—Å–∫ –¥–ª—è –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
        start_time = time.time()
        
        try:
            # –ü—Ä–æ–º–ø—Ç –¥–ª—è LLM
            search_prompt = f"""–ù–∞–π–¥–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: "{question}"

–ë–∞–∑–∞ FAQ:
1. –ù–∞—Ü–µ–Ω–∫–∞ - –¥–æ–ø–ª–∞—Ç–∞ –∑–∞ —Å–ø—Ä–æ—Å
2. –î–æ—Å—Ç–∞–≤–∫–∞ - –∫—É—Ä—å–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏  
3. –ë–∞–ª–∞–Ω—Å - –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞
4. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
5. –¢–∞—Ä–∏—Ñ—ã - –≤–∏–¥—ã –ø–æ–µ–∑–¥–æ–∫

–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–æ–º (1-5):"""

            payload = {
                "model": "aparu-senior-ai",
                "prompt": search_prompt,
                "stream": False,
                "options": {
                    "temperature": 0.01,
                    "num_predict": 3,
                    "num_ctx": 256,
                    "repeat_penalty": 1.0,
                    "top_k": 1,
                    "top_p": 0.1,
                    "stop": ["\n", ".", "!", "?", "–û—Ç–≤–µ—Ç:", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è:"]
                }
            }
            
            response = requests.post(
                "http://localhost:11434/api/generate",
                json=payload,
                timeout=10
            )
            
            processing_time = time.time() - start_time
            
            if response.status_code == 200:
                data = response.json()
                answer = data.get('response', '').strip()
                
                # –ü–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                category_num = self._parse_category_number(answer)
                
                return {
                    "question": question,
                    "expected_category": expected_category,
                    "llm_response": answer,
                    "parsed_category": category_num,
                    "processing_time": processing_time,
                    "success": category_num is not None,
                    "correct": self._is_correct_category(category_num, expected_category)
                }
            else:
                return {
                    "question": question,
                    "expected_category": expected_category,
                    "llm_response": f"–û—à–∏–±–∫–∞: {response.status_code}",
                    "parsed_category": None,
                    "processing_time": processing_time,
                    "success": False,
                    "correct": False
                }
                
        except Exception as e:
            processing_time = time.time() - start_time
            return {
                "question": question,
                "expected_category": expected_category,
                "llm_response": f"–û—à–∏–±–∫–∞: {e}",
                "parsed_category": None,
                "processing_time": processing_time,
                "success": False,
                "correct": False
            }
    
    def _parse_category_number(self, answer: str) -> Optional[int]:
        """–ü–∞—Ä—Å–∏—Ç –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ LLM"""
        try:
            import re
            numbers = re.findall(r'\d+', answer)
            if numbers:
                num = int(numbers[0])
                if 1 <= num <= 5:
                    return num
            return None
        except:
            return None
    
    def _is_correct_category(self, category_num: Optional[int], expected_category: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        if category_num is None:
            return False
        
        # –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        category_mapping = {
            "pricing": 1,      # –ù–∞—Ü–µ–Ω–∫–∞
            "delivery": 2,     # –î–æ—Å—Ç–∞–≤–∫–∞
            "balance": 3,      # –ë–∞–ª–∞–Ω—Å
            "app": 4,          # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            "tariffs": 5       # –¢–∞—Ä–∏—Ñ—ã
        }
        
        expected_num = category_mapping.get(expected_category, 0)
        return category_num == expected_num
    
    def test_simple_search(self, question: str, expected_category: str) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ (fallback)"""
        start_time = time.time()
        
        question_lower = question.lower()
        
        # –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        for item in self.knowledge_base:
            keywords = item.get("keywords", [])
            variations = item.get("variations", [])
            answer = item.get("answer", "–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            question_text = item.get("question", "")
            category = item.get("category", "unknown")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
            for keyword in keywords:
                if keyword.lower() in question_lower:
                    processing_time = time.time() - start_time
                    return {
                        "question": question,
                        "expected_category": expected_category,
                        "simple_response": answer[:100] + "...",
                        "found_category": category,
                        "processing_time": processing_time,
                        "success": True,
                        "correct": category == expected_category
                    }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—Ä–∏–∞—Ü–∏–∏
            for variation in variations:
                if variation.lower() in question_lower:
                    processing_time = time.time() - start_time
                    return {
                        "question": question,
                        "expected_category": expected_category,
                        "simple_response": answer[:100] + "...",
                        "found_category": category,
                        "processing_time": processing_time,
                        "success": True,
                        "correct": category == expected_category
                    }
        
        processing_time = time.time() - start_time
        return {
            "question": question,
            "expected_category": expected_category,
            "simple_response": "–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
            "found_category": "unknown",
            "processing_time": processing_time,
            "success": False,
            "correct": False
        }
    
    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç"""
        print("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ LLM –ü–û –í–°–ï–ú –í–û–ü–†–û–°–ê–ú APARU")
        print("=" * 60)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        test_questions = []
        
        for item in self.knowledge_base:
            question = item.get("question", "")
            category = item.get("category", "unknown")
            variations = item.get("variations", [])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –≤–æ–ø—Ä–æ—Å
            test_questions.append({
                "question": question,
                "category": category,
                "type": "main"
            })
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞—Ü–∏–π
            for variation in variations[:3]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –≤–∞—Ä–∏–∞—Ü–∏–∏
                test_questions.append({
                    "question": variation,
                    "category": category,
                    "type": "variation"
                })
        
        print(f"üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {len(test_questions)}")
        print(f"üß† LLM –¥–æ—Å—Ç—É–ø–Ω–∞: {'–î–∞' if self.llm_available else '–ù–µ—Ç'}")
        print()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º LLM
        if self.llm_available:
            print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï LLM –ü–û–ò–°–ö–ê:")
            print("-" * 40)
            
            llm_results = []
            for i, test_item in enumerate(test_questions[:10], 1):  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 10
                print(f"{i:2d}. {test_item['question'][:50]}...")
                
                result = self.test_llm_search(test_item['question'], test_item['category'])
                llm_results.append(result)
                
                status = "‚úÖ" if result['correct'] else "‚ùå"
                print(f"    {status} –û—Ç–≤–µ—Ç: {result['llm_response']} | –í—Ä–µ–º—è: {result['processing_time']:.2f}—Å")
                print()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ LLM
            llm_success = sum(1 for r in llm_results if r['success'])
            llm_correct = sum(1 for r in llm_results if r['correct'])
            llm_avg_time = sum(r['processing_time'] for r in llm_results) / len(llm_results)
            
            print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê LLM:")
            print(f"   –£—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {llm_success}/{len(llm_results)} ({llm_success/len(llm_results)*100:.1f}%)")
            print(f"   –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {llm_correct}/{len(llm_results)} ({llm_correct/len(llm_results)*100:.1f}%)")
            print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {llm_avg_time:.2f}—Å")
            print()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫
        print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–°–¢–û–ì–û –ü–û–ò–°–ö–ê:")
        print("-" * 40)
        
        simple_results = []
        for i, test_item in enumerate(test_questions[:10], 1):  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 10
            print(f"{i:2d}. {test_item['question'][:50]}...")
            
            result = self.test_simple_search(test_item['question'], test_item['category'])
            simple_results.append(result)
            
            status = "‚úÖ" if result['correct'] else "‚ùå"
            print(f"    {status} –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {result['found_category']} | –í—Ä–µ–º—è: {result['processing_time']:.3f}—Å")
            print()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ–∏—Å–∫–∞
        simple_success = sum(1 for r in simple_results if r['success'])
        simple_correct = sum(1 for r in simple_results if r['correct'])
        simple_avg_time = sum(r['processing_time'] for r in simple_results) / len(simple_results)
        
        print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–°–¢–û–ì–û –ü–û–ò–°–ö–ê:")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {simple_success}/{len(simple_results)} ({simple_success/len(simple_results)*100:.1f}%)")
        print(f"   –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {simple_correct}/{len(simple_results)} ({simple_correct/len(simple_results)*100:.1f}%)")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {simple_avg_time:.3f}—Å")
        print()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print("=" * 40)
        
        if self.llm_available:
            print(f"üß† LLM –ø–æ–∏—Å–∫:")
            print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {llm_success/len(llm_results)*100:.1f}%")
            print(f"   –¢–æ—á–Ω–æ—Å—Ç—å: {llm_correct/len(llm_results)*100:.1f}%")
            print(f"   –°–∫–æ—Ä–æ—Å—Ç—å: {llm_avg_time:.2f}—Å")
            print()
        
        print(f"üîç –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫:")
        print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {simple_success/len(simple_results)*100:.1f}%")
        print(f"   –¢–æ—á–Ω–æ—Å—Ç—å: {simple_correct/len(simple_results)*100:.1f}%")
        print(f"   –°–∫–æ—Ä–æ—Å—Ç—å: {simple_avg_time:.3f}—Å")
        print()
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("-" * 20)
        
        if self.llm_available:
            if llm_correct/len(llm_results) < 0.8:
                print("‚ö†Ô∏è LLM –ø–æ–∏—Å–∫ —Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è:")
                print("   - –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç")
                print("   - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
                print("   - –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é")
            else:
                print("‚úÖ LLM –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ")
        
        if simple_correct/len(simple_results) < 0.9:
            print("‚ö†Ô∏è –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ —Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è:")
            print("   - –†–∞—Å—à–∏—Ä–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞")
            print("   - –î–æ–±–∞–≤–∏—Ç—å —Å–∏–Ω–æ–Ω–∏–º—ã")
            print("   - –£–ª—É—á—à–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é")
        else:
            print("‚úÖ –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ")
        
        print()
        print("üéØ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")

if __name__ == "__main__":
    test = ComprehensiveLLMTest()
    test.run_comprehensive_test()
