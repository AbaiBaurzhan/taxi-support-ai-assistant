"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π
"""

import sys
import os
sys.path.append('backend')

from enhanced_morphological_analyzer import enhance_classification_with_morphology
import json

def load_kb_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    try:
        with open('backend/kb.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ kb.json: {e}")
        return None

def test_delivery_queries():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–æ –¥–æ—Å—Ç–∞–≤–∫—É"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ –¥–æ—Å—Ç–∞–≤–∫—É")
    print("=" * 60)
    
    kb_data = load_kb_data()
    if not kb_data:
        return
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–æ –¥–æ—Å—Ç–∞–≤–∫—É
    delivery_queries = [
        "–¥–æ—Å—Ç–∞–≤–∫–∞",
        "–∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É", 
        "–¥–æ—Å—Ç–∞–≤–∫–∞ –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å",
        "–∫–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–∫–∏",
        "–∫–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É",
        "–≥–¥–µ –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –∑–∞–∫–∞–∑–∞ –¥–æ—Å—Ç–∞–≤–∫–∞",
        "–∫–∞–∫ –≤—ã–∑–≤–∞—Ç—å –∫—É—Ä—å–µ—Ä–∞",
        "–∫—É—Ä—å–µ—Ä",
        "–ø–æ—Å—ã–ª–∫–∞",
        "–ø–µ—Ä–µ–≤–æ–∑–∫–∞"
    ]
    
    print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º {len(delivery_queries)} –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ –¥–æ—Å—Ç–∞–≤–∫—É:")
    print()
    
    success_count = 0
    for i, query in enumerate(delivery_queries, 1):
        print(f"{i:2d}. –ó–∞–ø—Ä–æ—Å: '{query}'")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
        result = enhance_classification_with_morphology(query, kb_data)
        
        if result.get('matched_item'):
            confidence = result.get('confidence', 0)
            matched_item = result['matched_item']
            
            print(f"    ‚úÖ –ù–ê–ô–î–ï–ù–û! Confidence: {confidence:.3f}")
            print(f"    üìã Question: {matched_item.get('question', '')[:60]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ –¥–æ—Å—Ç–∞–≤–∫—É
            answer = matched_item.get('answer', '')
            if '–¥–æ—Å—Ç–∞–≤–∫' in answer.lower():
                print(f"    üéØ –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–∫–∞!")
                success_count += 1
            else:
                print(f"    ‚ö†Ô∏è –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ, –Ω–æ –Ω–µ –ø—Ä–æ –¥–æ—Å—Ç–∞–≤–∫—É")
        else:
            print(f"    ‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û")
        
        print()
    
    success_rate = (success_count / len(delivery_queries)) * 100
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"–£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {success_count}/{len(delivery_queries)} ({success_rate:.1f}%)")
    
    if success_rate >= 90:
        print("üéâ –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–±–ª–µ–º–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    elif success_rate >= 70:
        print("‚úÖ –•–æ—Ä–æ—à–æ! –ï—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è!")
    else:
        print("‚ùå –ù—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

if __name__ == "__main__":
    test_delivery_queries()
