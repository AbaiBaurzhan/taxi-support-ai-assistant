#!/usr/bin/env python3
"""
üß† –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –º–µ–∂–¥—É –ø–æ–ª–Ω–æ–π –∏ –æ–±–ª–µ–≥—á–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π
"""

import os
import sys
import subprocess
import logging
from pathlib import Path

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SmartDependencyManager:
    def __init__(self):
        self.railway_mode = os.getenv("RAILWAY_MODE", "false").lower() == "true"
        self.force_lightweight = os.getenv("FORCE_LIGHTWEIGHT", "false").lower() == "true"
        self.force_full_ml = os.getenv("FORCE_FULL_ML", "false").lower() == "true"
        
    def detect_environment(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"""
        environment_info = {
            'is_railway': self.railway_mode,
            'is_docker': self._is_docker(),
            'is_heroku': self._is_heroku(),
            'has_gpu': self._has_gpu(),
            'memory_gb': self._get_memory_gb(),
            'cpu_cores': self._get_cpu_cores()
        }
        
        logger.info(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: {environment_info}")
        return environment_info
    
    def _is_docker(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –≤ Docker"""
        return os.path.exists('/.dockerenv') or os.path.exists('/proc/1/cgroup')
    
    def _is_heroku(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –Ω–∞ Heroku"""
        return 'DYNO' in os.environ
    
    def _has_gpu(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ GPU"""
        try:
            result = subprocess.run(['nvidia-smi'], capture_output=True, text=True)
            return result.returncode == 0
        except:
            return False
    
    def _get_memory_gb(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—ä–µ–º –ø–∞–º—è—Ç–∏ –≤ GB"""
        try:
            with open('/proc/meminfo', 'r') as f:
                for line in f:
                    if line.startswith('MemTotal:'):
                        kb = int(line.split()[1])
                        return kb / (1024 * 1024)  # Convert to GB
        except:
            pass
        return 1.0  # Default
    
    def _get_cpu_cores(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ CPU —è–¥–µ—Ä"""
        try:
            return os.cpu_count() or 1
        except:
            return 1
    
    def should_use_full_ml(self, environment_info):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–µ ML –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if self.force_full_ml:
            logger.info("üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–µ–Ω—ã –ø–æ–ª–Ω—ã–µ ML –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
            return True
        
        if self.force_lightweight:
            logger.info("üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–µ–Ω–∞ –æ–±–ª–µ–≥—á–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è")
            return False
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        if environment_info['is_railway']:
            logger.info("‚òÅÔ∏è Railway –æ–∫—Ä—É–∂–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–ª–µ–≥—á–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é")
            return False
        
        if environment_info['is_docker'] and environment_info['memory_gb'] < 2:
            logger.info("üê≥ Docker —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç—å—é - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–ª–µ–≥—á–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é")
            return False
        
        if environment_info['memory_gb'] < 1:
            logger.info("üíæ –ú–∞–ª–æ –ø–∞–º—è—Ç–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–ª–µ–≥—á–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é")
            return False
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å GPU –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é
        if environment_info['has_gpu'] and environment_info['memory_gb'] >= 4:
            logger.info("üöÄ GPU + –º–Ω–æ–≥–æ –ø–∞–º—è—Ç–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–µ ML –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
            return True
        
        # –ï—Å–ª–∏ –º–Ω–æ–≥–æ –ø–∞–º—è—Ç–∏ –∏ CPU - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é
        if environment_info['memory_gb'] >= 4 and environment_info['cpu_cores'] >= 4:
            logger.info("üí™ –ú–æ—â–Ω–æ–µ –∂–µ–ª–µ–∑–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–µ ML –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
            return True
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –æ–±–ª–µ–≥—á–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
        logger.info("‚öñÔ∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–ª–µ–≥—á–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é")
        return False
    
    def setup_dependencies(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        environment_info = self.detect_environment()
        use_full_ml = self.should_use_full_ml(environment_info)
        
        if use_full_ml:
            logger.info("üöÄ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ ML –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
            self._setup_full_ml()
        else:
            logger.info("‚ö° –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±–ª–µ–≥—á–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
            self._setup_lightweight()
        
        return use_full_ml
    
    def _setup_full_ml(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–µ ML –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
        # –ö–æ–ø–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π requirements.txt
        if Path("requirements_full_ml.txt").exists():
            subprocess.run(['cp', 'requirements_full_ml.txt', 'requirements.txt'])
            logger.info("‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω requirements_full_ml.txt")
        else:
            logger.error("‚ùå –§–∞–π–ª requirements_full_ml.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def _setup_lightweight(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±–ª–µ–≥—á–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
        # –ö–æ–ø–∏—Ä—É–µ–º –æ–±–ª–µ–≥—á–µ–Ω–Ω—ã–π requirements.txt
        if Path("requirements_lightweight.txt").exists():
            subprocess.run(['cp', 'requirements_lightweight.txt', 'requirements.txt'])
            logger.info("‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω requirements_lightweight.txt")
        else:
            logger.error("‚ùå –§–∞–π–ª requirements_lightweight.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß† –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    print("=" * 50)
    
    manager = SmartDependencyManager()
    use_full_ml = manager.setup_dependencies()
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(f"   –ü–æ–ª–Ω—ã–µ ML –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {'‚úÖ' if use_full_ml else '‚ùå'}")
    print(f"   –û–±–ª–µ–≥—á–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è: {'‚úÖ' if not use_full_ml else '‚ùå'}")
    
    if use_full_ml:
        print(f"\nüöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
        print(f"   pip install -r requirements.txt")
        print(f"   –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏: 5-10 –º–∏–Ω—É—Ç")
        print(f"   –†–∞–∑–º–µ—Ä: ~2-3 GB")
        print(f"   –¢–æ—á–Ω–æ—Å—Ç—å: 80%")
    else:
        print(f"\n‚ö° –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–ª–µ–≥—á–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
        print(f"   pip install -r requirements.txt")
        print(f"   –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏: 1-2 –º–∏–Ω—É—Ç—ã")
        print(f"   –†–∞–∑–º–µ—Ä: ~100 MB")
        print(f"   –¢–æ—á–Ω–æ—Å—Ç—å: 70%")
    
    print(f"\nüéØ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")

if __name__ == "__main__":
    main()
