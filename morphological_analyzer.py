#!/usr/bin/env python3
"""
üîç –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è APARU AI
–†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å –æ–∫–æ–Ω—á–∞–Ω–∏—è–º–∏ –∏ —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏ —Å–ª–æ–≤
"""

import re
import logging
from typing import List, Set, Dict, Any
from collections import defaultdict

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class MorphologicalAnalyzer:
    def __init__(self):
        # –°–ª–æ–≤–∞—Ä—å –±–∞–∑–æ–≤—ã—Ö —Ñ–æ—Ä–º —Å–ª–æ–≤
        self.base_forms = {
            # –ù–∞—Ü–µ–Ω–∫–∞ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
            '–Ω–∞—Ü–µ–Ω–∫–∞': ['–Ω–∞—Ü–µ–Ω–∫–∞', '–Ω–∞—Ü–µ–Ω–∫–∏', '–Ω–∞—Ü–µ–Ω–∫—É', '–Ω–∞—Ü–µ–Ω–∫–æ–π', '–Ω–∞—Ü–µ–Ω–∫–µ', '–Ω–∞—Ü–µ–Ω–æ–∫', '–Ω–∞—Ü–µ–Ω–∫–∞–º', '–Ω–∞—Ü–µ–Ω–∫–∞–º–∏'],
            '–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç': ['–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç', '–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞', '–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—É', '–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º', '–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–µ', '–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã', '–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤', '–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º', '–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏'],
            '–¥–æ–ø–ª–∞—Ç–∞': ['–¥–æ–ø–ª–∞—Ç–∞', '–¥–æ–ø–ª–∞—Ç—ã', '–¥–æ–ø–ª–∞—Ç—É', '–¥–æ–ø–ª–∞—Ç–æ–π', '–¥–æ–ø–ª–∞—Ç–µ', '–¥–æ–ø–ª–∞—Ç', '–¥–æ–ø–ª–∞—Ç–∞–º', '–¥–æ–ø–ª–∞—Ç–∞–º–∏'],
            '–Ω–∞–¥–±–∞–≤–∫–∞': ['–Ω–∞–¥–±–∞–≤–∫–∞', '–Ω–∞–¥–±–∞–≤–∫–∏', '–Ω–∞–¥–±–∞–≤–∫—É', '–Ω–∞–¥–±–∞–≤–∫–æ–π', '–Ω–∞–¥–±–∞–≤–∫–µ', '–Ω–∞–¥–±–∞–≤–æ–∫', '–Ω–∞–¥–±–∞–≤–∫–∞–º', '–Ω–∞–¥–±–∞–≤–∫–∞–º–∏'],
            '—Å–ø—Ä–æ—Å': ['—Å–ø—Ä–æ—Å', '—Å–ø—Ä–æ—Å–∞', '—Å–ø—Ä–æ—Å—É', '—Å–ø—Ä–æ—Å–æ–º', '—Å–ø—Ä–æ—Å–µ', '—Å–ø—Ä–æ—Å—ã', '—Å–ø—Ä–æ—Å–æ–≤', '—Å–ø—Ä–æ—Å–∞–º', '—Å–ø—Ä–æ—Å–∞–º–∏'],
            
            # –î–æ—Å—Ç–∞–≤–∫–∞ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
            '–¥–æ—Å—Ç–∞–≤–∫–∞': ['–¥–æ—Å—Ç–∞–≤–∫–∞', '–¥–æ—Å—Ç–∞–≤–∫–∏', '–¥–æ—Å—Ç–∞–≤–∫—É', '–¥–æ—Å—Ç–∞–≤–∫–æ–π', '–¥–æ—Å—Ç–∞–≤–∫–µ', '–¥–æ—Å—Ç–∞–≤–æ–∫', '–¥–æ—Å—Ç–∞–≤–∫–∞–º', '–¥–æ—Å—Ç–∞–≤–∫–∞–º–∏'],
            '–∫—É—Ä—å–µ—Ä': ['–∫—É—Ä—å–µ—Ä', '–∫—É—Ä—å–µ—Ä–∞', '–∫—É—Ä—å–µ—Ä—É', '–∫—É—Ä—å–µ—Ä–æ–º', '–∫—É—Ä—å–µ—Ä–µ', '–∫—É—Ä—å–µ—Ä—ã', '–∫—É—Ä—å–µ—Ä–æ–≤', '–∫—É—Ä—å–µ—Ä–∞–º', '–∫—É—Ä—å–µ—Ä–∞–º–∏'],
            '–ø–æ—Å—ã–ª–∫–∞': ['–ø–æ—Å—ã–ª–∫–∞', '–ø–æ—Å—ã–ª–∫–∏', '–ø–æ—Å—ã–ª–∫—É', '–ø–æ—Å—ã–ª–∫–æ–π', '–ø–æ—Å—ã–ª–∫–µ', '–ø–æ—Å—ã–ª–æ–∫', '–ø–æ—Å—ã–ª–∫–∞–º', '–ø–æ—Å—ã–ª–∫–∞–º–∏'],
            '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å': ['–æ—Ç–ø—Ä–∞–≤–∏—Ç—å', '–æ—Ç–ø—Ä–∞–≤–ª—é', '–æ—Ç–ø—Ä–∞–≤–∏—à—å', '–æ—Ç–ø—Ä–∞–≤–∏—Ç', '–æ—Ç–ø—Ä–∞–≤–∏–º', '–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ', '–æ—Ç–ø—Ä–∞–≤—è—Ç', '–æ—Ç–ø—Ä–∞–≤–∏–ª', '–æ—Ç–ø—Ä–∞–≤–∏–ª–∞', '–æ—Ç–ø—Ä–∞–≤–∏–ª–æ', '–æ—Ç–ø—Ä–∞–≤–∏–ª–∏'],
            '–∑–∞–∫–∞–∑–∞—Ç—å': ['–∑–∞–∫–∞–∑–∞—Ç—å', '–∑–∞–∫–∞–∂—É', '–∑–∞–∫–∞–∂–µ—à—å', '–∑–∞–∫–∞–∂–µ—Ç', '–∑–∞–∫–∞–∂–µ–º', '–∑–∞–∫–∞–∂–µ—Ç–µ', '–∑–∞–∫–∞–∂—É—Ç', '–∑–∞–∫–∞–∑–∞–ª', '–∑–∞–∫–∞–∑–∞–ª–∞', '–∑–∞–∫–∞–∑–∞–ª–æ', '–∑–∞–∫–∞–∑–∞–ª–∏'],
            
            # –ë–∞–ª–∞–Ω—Å –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
            '–±–∞–ª–∞–Ω—Å': ['–±–∞–ª–∞–Ω—Å', '–±–∞–ª–∞–Ω—Å–∞', '–±–∞–ª–∞–Ω—Å—É', '–±–∞–ª–∞–Ω—Å–æ–º', '–±–∞–ª–∞–Ω—Å–µ', '–±–∞–ª–∞–Ω—Å—ã', '–±–∞–ª–∞–Ω—Å–æ–≤', '–±–∞–ª–∞–Ω—Å–∞–º', '–±–∞–ª–∞–Ω—Å–∞–º–∏'],
            '–ø–æ–ø–æ–ª–Ω–∏—Ç—å': ['–ø–æ–ø–æ–ª–Ω–∏—Ç—å', '–ø–æ–ø–æ–ª–Ω—é', '–ø–æ–ø–æ–ª–Ω–∏—à—å', '–ø–æ–ø–æ–ª–Ω–∏—Ç', '–ø–æ–ø–æ–ª–Ω–∏–º', '–ø–æ–ø–æ–ª–Ω–∏—Ç–µ', '–ø–æ–ø–æ–ª–Ω—è—Ç', '–ø–æ–ø–æ–ª–Ω–∏–ª', '–ø–æ–ø–æ–ª–Ω–∏–ª–∞', '–ø–æ–ø–æ–ª–Ω–∏–ª–æ', '–ø–æ–ø–æ–ª–Ω–∏–ª–∏'],
            '–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ': ['–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ', '–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è', '–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é', '–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º', '–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏', '–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è', '–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π', '–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è–º', '–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è–º–∏'],
            '–∫–∞—Ä—Ç–∞': ['–∫–∞—Ä—Ç–∞', '–∫–∞—Ä—Ç—ã', '–∫–∞—Ä—Ç—É', '–∫–∞—Ä—Ç–æ–π', '–∫–∞—Ä—Ç–µ', '–∫–∞—Ä—Ç', '–∫–∞—Ä—Ç–∞–º', '–∫–∞—Ä—Ç–∞–º–∏'],
            
            # –ö–æ–º—Ñ–æ—Ä—Ç –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
            '–∫–æ–º—Ñ–æ—Ä—Ç': ['–∫–æ–º—Ñ–æ—Ä—Ç', '–∫–æ–º—Ñ–æ—Ä—Ç–∞', '–∫–æ–º—Ñ–æ—Ä—Ç—É', '–∫–æ–º—Ñ–æ—Ä—Ç–æ–º', '–∫–æ–º—Ñ–æ—Ä—Ç–µ', '–∫–æ–º—Ñ–æ—Ä—Ç—ã', '–∫–æ–º—Ñ–æ—Ä—Ç–æ–≤', '–∫–æ–º—Ñ–æ—Ä—Ç–∞–º', '–∫–æ–º—Ñ–æ—Ä—Ç–∞–º–∏'],
            '–∫–ª–∞—Å—Å': ['–∫–ª–∞—Å—Å', '–∫–ª–∞—Å—Å–∞', '–∫–ª–∞—Å—Å—É', '–∫–ª–∞—Å—Å–æ–º', '–∫–ª–∞—Å—Å–µ', '–∫–ª–∞—Å—Å—ã', '–∫–ª–∞—Å—Å–æ–≤', '–∫–ª–∞—Å—Å–∞–º', '–∫–ª–∞—Å—Å–∞–º–∏'],
            '–º–∞—à–∏–Ω–∞': ['–º–∞—à–∏–Ω–∞', '–º–∞—à–∏–Ω—ã', '–º–∞—à–∏–Ω—É', '–º–∞—à–∏–Ω–æ–π', '–º–∞—à–∏–Ω–µ', '–º–∞—à–∏–Ω', '–º–∞—à–∏–Ω–∞–º', '–º–∞—à–∏–Ω–∞–º–∏'],
            '–ø—Ä–µ–º–∏—É–º': ['–ø—Ä–µ–º–∏—É–º', '–ø—Ä–µ–º–∏—É–º–∞', '–ø—Ä–µ–º–∏—É–º—É', '–ø—Ä–µ–º–∏—É–º–æ–º', '–ø—Ä–µ–º–∏—É–º–µ', '–ø—Ä–µ–º–∏—É–º—ã', '–ø—Ä–µ–º–∏—É–º–æ–≤', '–ø—Ä–µ–º–∏—É–º–∞–º', '–ø—Ä–µ–º–∏—É–º–∞–º–∏'],
            
            # –ú–æ—Ç–æ—á–∞—Å—ã –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
            '–º–æ—Ç–æ—á–∞—Å—ã': ['–º–æ—Ç–æ—á–∞—Å—ã', '–º–æ—Ç–æ—á–∞—Å–æ–≤', '–º–æ—Ç–æ—á–∞—Å–∞–º', '–º–æ—Ç–æ—á–∞—Å–∞–º–∏'],
            '–≤—Ä–µ–º—è': ['–≤—Ä–µ–º—è', '–≤—Ä–µ–º–µ–Ω–∏', '–≤—Ä–µ–º–µ–Ω–∏', '–≤—Ä–µ–º–µ–Ω–µ–º', '–≤—Ä–µ–º–µ–Ω–∏', '–≤—Ä–µ–º–µ–Ω–∞', '–≤—Ä–µ–º–µ–Ω', '–≤—Ä–µ–º–µ–Ω–∞–º', '–≤—Ä–µ–º–µ–Ω–∞–º–∏'],
            '–º–∏–Ω—É—Ç—ã': ['–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç', '–º–∏–Ω—É—Ç–∞–º', '–º–∏–Ω—É—Ç–∞–º–∏', '–º–∏–Ω—É—Ç–∞', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç—É', '–º–∏–Ω—É—Ç–æ–π', '–º–∏–Ω—É—Ç–µ'],
            '–ø–æ–µ–∑–¥–∫–∞': ['–ø–æ–µ–∑–¥–∫–∞', '–ø–æ–µ–∑–¥–∫–∏', '–ø–æ–µ–∑–¥–∫—É', '–ø–æ–µ–∑–¥–∫–æ–π', '–ø–æ–µ–∑–¥–∫–µ', '–ø–æ–µ–∑–¥–æ–∫', '–ø–æ–µ–∑–¥–∫–∞–º', '–ø–æ–µ–∑–¥–∫–∞–º–∏'],
            
            # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
            '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ': ['–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é', '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º', '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏', '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π', '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º', '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏'],
            '—Ä–∞–±–æ—Ç–∞—Ç—å': ['—Ä–∞–±–æ—Ç–∞—Ç—å', '—Ä–∞–±–æ—Ç–∞—é', '—Ä–∞–±–æ—Ç–∞–µ—à—å', '—Ä–∞–±–æ—Ç–∞–µ—Ç', '—Ä–∞–±–æ—Ç–∞–µ–º', '—Ä–∞–±–æ—Ç–∞–µ—Ç–µ', '—Ä–∞–±–æ—Ç–∞—é—Ç', '—Ä–∞–±–æ—Ç–∞–ª', '—Ä–∞–±–æ—Ç–∞–ª–∞', '—Ä–∞–±–æ—Ç–∞–ª–æ', '—Ä–∞–±–æ—Ç–∞–ª–∏'],
            '–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ': ['–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ', '–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', '–æ–±–Ω–æ–≤–ª–µ–Ω–∏—é', '–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º', '–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏', '–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', '–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π', '–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º', '–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏'],
            '–≤—ã–ª–µ—Ç–∞—Ç—å': ['–≤—ã–ª–µ—Ç–∞—Ç—å', '–≤—ã–ª–µ—Ç–∞—é', '–≤—ã–ª–µ—Ç–∞–µ—à—å', '–≤—ã–ª–µ—Ç–∞–µ—Ç', '–≤—ã–ª–µ—Ç–∞–µ–º', '–≤—ã–ª–µ—Ç–∞–µ—Ç–µ', '–≤—ã–ª–µ—Ç–∞—é—Ç', '–≤—ã–ª–µ—Ç–∞–ª', '–≤—ã–ª–µ—Ç–∞–ª–∞', '–≤—ã–ª–µ—Ç–∞–ª–æ', '–≤—ã–ª–µ—Ç–∞–ª–∏'],
            '–∑–∞–≤–∏—Å–∞—Ç—å': ['–∑–∞–≤–∏—Å–∞—Ç—å', '–∑–∞–≤–∏—Å–∞—é', '–∑–∞–≤–∏—Å–∞–µ—à—å', '–∑–∞–≤–∏—Å–∞–µ—Ç', '–∑–∞–≤–∏—Å–∞–µ–º', '–∑–∞–≤–∏—Å–∞–µ—Ç–µ', '–∑–∞–≤–∏—Å–∞—é—Ç', '–∑–∞–≤–∏—Å–∞–ª', '–∑–∞–≤–∏—Å–∞–ª–∞', '–∑–∞–≤–∏—Å–∞–ª–æ', '–∑–∞–≤–∏—Å–∞–ª–∏']
        }
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å (—Å–ª–æ–≤–æ -> –±–∞–∑–æ–≤–∞—è —Ñ–æ—Ä–º–∞)
        self.word_to_base = {}
        for base_form, variations in self.base_forms.items():
            for variation in variations:
                self.word_to_base[variation.lower()] = base_form
        
        # –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö —Ñ–æ—Ä–º
        self.morphology_rules = {
            # –°—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ
            'noun_endings': {
                '–∞': ['—ã', '—É', '–æ–π', '–µ'],
                '—è': ['–∏', '—é', '–µ–π', '–µ'],
                '–æ': ['–∞', '—É', '–æ–º', '–µ'],
                '–µ': ['—è', '—é', '–µ–º', '–µ'],
                '—å': ['–∏', '—é', '—å—é', '–µ']
            },
            # –ì–ª–∞–≥–æ–ª—ã
            'verb_endings': {
                '—Ç—å': ['—é', '–µ—à—å', '–µ—Ç', '–µ–º', '–µ—Ç–µ', '—é—Ç', '–ª', '–ª–∞', '–ª–æ', '–ª–∏'],
                '–∞—Ç—å': ['–∞—é', '–∞–µ—à—å', '–∞–µ—Ç', '–∞–µ–º', '–∞–µ—Ç–µ', '–∞—é—Ç', '–∞–ª', '–∞–ª–∞', '–∞–ª–æ', '–∞–ª–∏'],
                '–∏—Ç—å': ['—é', '–∏—à—å', '–∏—Ç', '–∏–º', '–∏—Ç–µ', '—è—Ç', '–∏–ª', '–∏–ª–∞', '–∏–ª–æ', '–∏–ª–∏']
            }
        }
        
        logger.info(f"‚úÖ –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {len(self.base_forms)} –±–∞–∑–æ–≤—ã—Ö —Ñ–æ—Ä–º")
    
    def normalize_word(self, word: str) -> str:
        """–ü—Ä–∏–≤–æ–¥–∏—Ç —Å–ª–æ–≤–æ –∫ –±–∞–∑–æ–≤–æ–π —Ñ–æ—Ä–º–µ"""
        word_lower = word.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if word_lower in self.word_to_base:
            return self.word_to_base[word_lower]
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –±–∞–∑–æ–≤—É—é —Ñ–æ—Ä–º—É –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
        base_form = self._find_base_form_by_rules(word_lower)
        if base_form:
            return base_form
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–ª–æ–≤–æ
        return word_lower
    
    def _find_base_form_by_rules(self, word: str) -> str:
        """–ù–∞—Ö–æ–¥–∏—Ç –±–∞–∑–æ–≤—É—é —Ñ–æ—Ä–º—É –ø–æ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º –ø—Ä–∞–≤–∏–ª–∞–º"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö
        for base_ending, endings in self.morphology_rules['noun_endings'].items():
            if word.endswith(base_ending):
                # –ü—Ä–æ–±—É–µ–º —É–±—Ä–∞—Ç—å –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∏ –¥–æ–±–∞–≤–∏—Ç—å –±–∞–∑–æ–≤–æ–µ
                stem = word[:-len(base_ending)]
                for ending in endings:
                    test_word = stem + ending
                    if test_word in self.word_to_base:
                        return self.word_to_base[test_word]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –≥–ª–∞–≥–æ–ª–æ–≤
        for base_ending, endings in self.morphology_rules['verb_endings'].items():
            if word.endswith(base_ending):
                # –ü—Ä–æ–±—É–µ–º —É–±—Ä–∞—Ç—å –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∏ –¥–æ–±–∞–≤–∏—Ç—å –±–∞–∑–æ–≤–æ–µ
                stem = word[:-len(base_ending)]
                for ending in endings:
                    test_word = stem + ending
                    if test_word in self.word_to_base:
                        return self.word_to_base[test_word]
        
        return None
    
    def normalize_text(self, text: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –≤–µ—Å—å —Ç–µ–∫—Å—Ç"""
        words = text.lower().split()
        normalized_words = []
        
        for word in words:
            # –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
            clean_word = re.sub(r'[^\w]', '', word)
            if clean_word:
                normalized_word = self.normalize_word(clean_word)
                normalized_words.append(normalized_word)
        
        return ' '.join(normalized_words)
    
    def expand_query(self, query: str) -> List[str]:
        """–†–∞—Å—à–∏—Ä—è–µ—Ç –∑–∞–ø—Ä–æ—Å —Å —É—á–µ—Ç–æ–º –º–æ—Ä—Ñ–æ–ª–æ–≥–∏–∏"""
        normalized_query = self.normalize_text(query)
        expanded_queries = [query, normalized_query]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        words = normalized_query.split()
        for word in words:
            if word in self.base_forms:
                for variation in self.base_forms[word]:
                    expanded_query = normalized_query.replace(word, variation)
                    expanded_queries.append(expanded_query)
        
        return list(set(expanded_queries))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    
    def get_morphological_variations(self, word: str) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–ª–æ–≤–∞"""
        base_form = self.normalize_word(word)
        if base_form in self.base_forms:
            return self.base_forms[base_form]
        return [word]
    
    def test_morphology(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä"""
        test_cases = [
            "–Ω–∞—Ü–µ–Ω–∫–∞", "–Ω–∞—Ü–µ–Ω–∫–∏", "–Ω–∞—Ü–µ–Ω–∫—É", "–Ω–∞—Ü–µ–Ω–∫–æ–π",
            "–¥–æ—Å—Ç–∞–≤–∫–∞", "–¥–æ—Å—Ç–∞–≤–∫–∏", "–¥–æ—Å—Ç–∞–≤–∫—É", "–¥–æ—Å—Ç–∞–≤–∫–æ–π",
            "–±–∞–ª–∞–Ω—Å", "–±–∞–ª–∞–Ω—Å–∞", "–±–∞–ª–∞–Ω—Å—É", "–±–∞–ª–∞–Ω—Å–æ–º",
            "–∫–æ–º—Ñ–æ—Ä—Ç", "–∫–æ–º—Ñ–æ—Ä—Ç–∞", "–∫–æ–º—Ñ–æ—Ä—Ç—É", "–∫–æ–º—Ñ–æ—Ä—Ç–æ–º",
            "–º–æ—Ç–æ—á–∞—Å—ã", "–º–æ—Ç–æ—á–∞—Å–æ–≤", "–º–æ—Ç–æ—á–∞—Å–∞–º", "–º–æ—Ç–æ—á–∞—Å–∞–º–∏",
            "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º"
        ]
        
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞:")
        for word in test_cases:
            base_form = self.normalize_word(word)
            variations = self.get_morphological_variations(word)
            print(f"   '{word}' ‚Üí '{base_form}' (–≤–∞—Ä–∏–∞–Ω—Ç—ã: {len(variations)})")
        
        print(f"\n‚úÖ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(test_cases)} —Å–ª–æ–≤")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
morphological_analyzer = MorphologicalAnalyzer()

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = MorphologicalAnalyzer()
    analyzer.test_morphology()
    
    print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏:")
    test_queries = [
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞—Ü–µ–Ω–∫–∏?",
        "–ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É?",
        "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
        "–¢–∞—Ä–∏—Ñ –∫–æ–º—Ñ–æ—Ä—Ç–∞",
        "–ú–æ—Ç–æ—á–∞—Å—ã –ø–æ–µ–∑–¥–∫–∏",
        "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    ]
    
    for query in test_queries:
        normalized = analyzer.normalize_text(query)
        expanded = analyzer.expand_query(query)
        print(f"   '{query}' ‚Üí '{normalized}'")
        print(f"   –†–∞—Å—à–∏—Ä–µ–Ω–æ –¥–æ {len(expanded)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        print()
