#!/usr/bin/env python3
"""
üöÄ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π main.py - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à—É—é –≤–µ—Ä—Å–∏—é
"""

import os
import sys
import logging
from fastapi import FastAPI, HTTPException
from fastapi.responses import FileResponse
from pydantic import BaseModel
from langdetect import detect
from langdetect.lang_detect_exception import LangDetectException
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(title="APARU Adaptive AI Assistant", version="2.0.0")

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class ChatRequest(BaseModel):
    text: str
    user_id: str
    locale: str = "ru"

class ChatResponse(BaseModel):
    response: str
    intent: str
    confidence: float
    source: str
    timestamp: str

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
RAILWAY_MODE = os.getenv("RAILWAY_MODE", "false").lower() == "true"
FORCE_LIGHTWEIGHT = os.getenv("FORCE_LIGHTWEIGHT", "false").lower() == "true"
FORCE_FULL_ML = os.getenv("FORCE_FULL_ML", "false").lower() == "true"

# –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–º–ø–æ—Ä—Ç–∞
def smart_import():
    """–£–º–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –ª—É—á—à—É—é –≤–µ—Ä—Å–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if FORCE_LIGHTWEIGHT:
        logger.info("üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–µ–Ω–∞ –æ–±–ª–µ–≥—á–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è")
        return import_lightweight()
    
    if FORCE_FULL_ML:
        logger.info("üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–µ–Ω—ã –ø–æ–ª–Ω—ã–µ ML –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
        return import_full_ml()
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    if RAILWAY_MODE:
        logger.info("‚òÅÔ∏è Railway –æ–∫—Ä—É–∂–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–ª–µ–≥—á–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é")
        return import_lightweight()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ–ª–Ω—ã—Ö ML –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    try:
        import numpy
        import sentence_transformers
        import faiss
        import fuzzywuzzy
        import nltk
        import pandas
        import sklearn
        
        logger.info("üöÄ –ü–æ–ª–Ω—ã–µ ML –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ç–æ—á–Ω–æ—Å—Ç—å")
        return import_full_ml()
        
    except ImportError as e:
        logger.warning(f"‚ö†Ô∏è –ü–æ–ª–Ω—ã–µ ML –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
        logger.info("‚ö° –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –æ–±–ª–µ–≥—á–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é")
        return import_lightweight()

def import_full_ml():
    """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é ML –≤–µ—Ä—Å–∏—é"""
    try:
        from maximum_accuracy_client import get_enhanced_answer
        logger.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ (80% —Ç–æ—á–Ω–æ—Å—Ç–∏)")
        return get_enhanced_answer, "maximum_accuracy"
    except ImportError:
        try:
            from ultimate_search_client import get_enhanced_answer
            logger.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —É–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞")
            return get_enhanced_answer, "ultimate_search"
        except ImportError:
            try:
                from senior_ai_integrated_client import get_enhanced_answer
                logger.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ Senior AI —Å–∏—Å—Ç–µ–º–∞")
                return get_enhanced_answer, "senior_ai"
            except ImportError:
                logger.warning("‚ö†Ô∏è –ü–æ–ª–Ω—ã–µ ML —Å–∏—Å—Ç–µ–º—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, fallback –∫ –æ–±–ª–µ–≥—á–µ–Ω–Ω–æ–π")
                return import_lightweight()

def import_lightweight():
    """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ–±–ª–µ–≥—á–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é"""
    try:
        from railway_optimized_client import get_enhanced_answer
        logger.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –æ–±–ª–µ–≥—á–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ (70% —Ç–æ—á–Ω–æ—Å—Ç–∏)")
        return get_enhanced_answer, "railway_optimized"
    except ImportError:
        try:
            from railway_simple_client import get_enhanced_answer
            logger.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞")
            return get_enhanced_answer, "railway_simple"
        except ImportError:
            logger.error("‚ùå –ù–∏ –æ–¥–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")
            return None, "none"

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª—É—á—à—É—é –≤–µ—Ä—Å–∏—é
get_enhanced_answer, system_type = smart_import()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
try:
    from aparu_enhanced_client import aparu_enhanced_client
    aparu_enhanced_client.load_aparu_knowledge_base()
    logger.info("‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π APARU –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
except ImportError:
    logger.warning("‚ö†Ô∏è aparu_enhanced_client –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–∫–∏
try:
    import json
    with open('fixtures.json', 'r', encoding='utf-8') as f:
        fixtures = json.load(f)
    logger.info("‚úÖ –ú–æ–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
except FileNotFoundError:
    logger.warning("‚ö†Ô∏è –§–∞–π–ª fixtures.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
    fixtures = {}

def classify_intent(text: str, locale: str) -> str:
    """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    text_lower = text.lower()
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
    if any(word in text_lower for word in ['–ø–æ–µ–∑–¥–∫–∞', '–≤–æ–¥–∏—Ç–µ–ª—å', '–≥–¥–µ', '—Å—Ç–∞—Ç—É—Å', '–∑–∞–∫–∞–∑']):
        return "ride_status"
    elif any(word in text_lower for word in ['—á–µ–∫', '–∫–≤–∏—Ç–∞–Ω—Ü–∏—è', '—Å—á–µ—Ç', '–æ—Ç—á–µ—Ç']):
        return "receipt"
    elif any(word in text_lower for word in ['–∫–∞—Ä—Ç–∞', '–∫–∞—Ä—Ç—ã', '–æ—Å–Ω–æ–≤–Ω–∞—è', '–ø–ª–∞—Ç–µ–∂']):
        return "cards"
    elif any(word in word in text_lower for word in ['–∂–∞–ª–æ–±–∞', '–ø—Ä–æ–±–ª–µ–º–∞', '—Å–ø–∏—Å–∞–ª–∏', '–¥–≤–∞–∂–¥—ã', '–æ–ø–µ—Ä–∞—Ç–æ—Ä']):
        return "complaint"
    elif any(word in text_lower for word in ['–ø—Ä–æ–º–æ–∫–æ–¥', '—Å–∫–∏–¥–∫–∞', '—Ü–µ–Ω–∞', '—Ç–∞—Ä–∏—Ñ', '—Å—Ç–æ–∏–º–æ—Å—Ç—å']):
        return "faq"
    else:
        return "faq"

def get_mock_response(intent: str) -> dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç"""
    if intent == "ride_status":
        return {
            "response": "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫",
            "confidence": 0.95,
            "source": "kb"
        }
    elif intent == "receipt":
        return {
            "response": "–ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É",
            "confidence": 0.95,
            "source": "kb"
        }
    elif intent == "cards":
        return {
            "response": "–£ –≤–∞—Å –µ—Å—Ç—å 2 –∫–∞—Ä—Ç—ã. –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞: ****1234",
            "confidence": 0.95,
            "source": "kb"
        }
    elif intent == "complaint":
        return {
            "response": "–°–æ–∑–¥–∞–Ω —Ç–∏–∫–µ—Ç #12345. –û–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤",
            "confidence": 0.95,
            "source": "kb"
        }
    else:
        return {
            "response": "–ù—É–∂–Ω–∞ —É—Ç–æ—á–Ω—è—é—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            "confidence": 0.0,
            "source": "kb"
        }

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return {
        "message": "APARU Adaptive AI Assistant",
        "version": "2.0.0",
        "system_type": system_type,
        "railway_mode": RAILWAY_MODE,
        "features": {
            "adaptive_dependencies": True,
            "smart_import": True,
            "environment_detection": True
        }
    }

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    return {
        "status": "healthy",
        "system_type": system_type,
        "railway_mode": RAILWAY_MODE,
        "timestamp": datetime.now().isoformat(),
        "features": {
            "maximum_accuracy": system_type in ["maximum_accuracy", "ultimate_search", "senior_ai"],
            "lightweight": system_type in ["railway_optimized", "railway_simple"],
            "adaptive": True
        }
    }

@app.post("/chat", response_model=ChatResponse)
async def chat_endpoint(request: ChatRequest):
    """–û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —á–∞—Ç–∞"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫
        try:
            detected_locale = detect(request.text)
        except LangDetectException:
            detected_locale = request.locale
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
        intent = classify_intent(request.text, detected_locale)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        if intent == "faq" and get_enhanced_answer:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI —Å–∏—Å—Ç–µ–º—É
            answer = get_enhanced_answer(request.text)
            confidence = 0.95 if answer != "–ù—É–∂–Ω–∞ —É—Ç–æ—á–Ω—è—é—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" else 0.3
            source = "ai_system"
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–∏
            mock_response = get_mock_response(intent)
            answer = mock_response["response"]
            confidence = mock_response["confidence"]
            source = mock_response["source"]
        
        return ChatResponse(
            response=answer,
            intent=intent,
            confidence=confidence,
            source=source,
            timestamp=datetime.now().isoformat()
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ chat_endpoint: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@app.get("/webapp")
async def webapp():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç WebApp"""
    return FileResponse("webapp.html")

@app.get("/status")
async def get_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
    return {
        "system_type": system_type,
        "railway_mode": RAILWAY_MODE,
        "features": {
            "maximum_accuracy": system_type in ["maximum_accuracy", "ultimate_search", "senior_ai"],
            "lightweight": system_type in ["railway_optimized", "railway_simple"],
            "adaptive": True
        },
        "dependencies": {
            "numpy": "numpy" in sys.modules,
            "sentence_transformers": "sentence_transformers" in sys.modules,
            "faiss": "faiss" in sys.modules,
            "fuzzywuzzy": "fuzzywuzzy" in sys.modules,
            "nltk": "nltk" in sys.modules,
            "pandas": "pandas" in sys.modules,
            "sklearn": "sklearn" in sys.modules
        }
    }

if __name__ == "__main__":
    import uvicorn
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ APARU AI Assistant...")
    logger.info(f"   –°–∏—Å—Ç–µ–º–∞: {system_type}")
    logger.info(f"   Railway —Ä–µ–∂–∏–º: {RAILWAY_MODE}")
    logger.info(f"   –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–ª–µ–≥—á–µ–Ω–Ω–∞—è: {FORCE_LIGHTWEIGHT}")
    logger.info(f"   –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª–Ω–∞—è ML: {FORCE_FULL_ML}")
    
    uvicorn.run(app, host="0.0.0.0", port=8000)
