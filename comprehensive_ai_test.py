#!/usr/bin/env python3
"""
üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –ò–ò –ú–û–î–ï–õ–ò APARU
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
"""

import json
import requests
import time
from datetime import datetime
from typing import Dict, List, Any

# –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
TEST_QUESTIONS = [
    # –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    {"question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞—Ü–µ–Ω–∫–∞?", "expected": "–Ω–∞—Ü–µ–Ω–∫–∞", "category": "–æ—Å–Ω–æ–≤–Ω–æ–π"},
    {"question": "–ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É?", "expected": "–¥–æ—Å—Ç–∞–≤–∫–∞", "category": "–æ—Å–Ω–æ–≤–Ω–æ–π"},
    {"question": "–ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å?", "expected": "–±–∞–ª–∞–Ω—Å", "category": "–æ—Å–Ω–æ–≤–Ω–æ–π"},
    {"question": "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "expected": "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "category": "–æ—Å–Ω–æ–≤–Ω–æ–π"},
    
    # –°–∏–Ω–æ–Ω–∏–º—ã –∏ –ø–µ—Ä–µ—Ñ—Ä–∞–∑—ã
    {"question": "–ü–æ—á–µ–º—É —Ç–∞–∫ –¥–æ—Ä–æ–≥–æ?", "expected": "–Ω–∞—Ü–µ–Ω–∫–∞", "category": "—Å–∏–Ω–æ–Ω–∏–º"},
    {"question": "–û—Ç–∫—É–¥–∞ –¥–æ–ø–ª–∞—Ç–∞?", "expected": "–Ω–∞—Ü–µ–Ω–∫–∞", "category": "—Å–∏–Ω–æ–Ω–∏–º"},
    {"question": "–ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—ã–ª–∫—É?", "expected": "–¥–æ—Å—Ç–∞–≤–∫–∞", "category": "—Å–∏–Ω–æ–Ω–∏–º"},
    {"question": "–ù—É–∂–µ–Ω –∫—É—Ä—å–µ—Ä", "expected": "–¥–æ—Å—Ç–∞–≤–∫–∞", "category": "—Å–∏–Ω–æ–Ω–∏–º"},
    {"question": "–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç", "expected": "–±–∞–ª–∞–Ω—Å", "category": "—Å–∏–Ω–æ–Ω–∏–º"},
    {"question": "–ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç", "expected": "–±–∞–ª–∞–Ω—Å", "category": "—Å–∏–Ω–æ–Ω–∏–º"},
    {"question": "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –≥–ª—é—á–∏—Ç", "expected": "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "category": "—Å–∏–Ω–æ–Ω–∏–º"},
    {"question": "–°–æ—Ñ—Ç –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è", "expected": "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "category": "—Å–∏–Ω–æ–Ω–∏–º"},
    
    # –†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    {"question": "–ê —á—Ç–æ –∑–∞ –Ω–∞—Ü–µ–Ω–∫–∞ —Ç–∞–∫–∞—è?", "expected": "–Ω–∞—Ü–µ–Ω–∫–∞", "category": "—Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π"},
    {"question": "–ú–æ–∂–Ω–æ –ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É?", "expected": "–¥–æ—Å—Ç–∞–≤–∫–∞", "category": "—Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π"},
    {"question": "–ö–∞–∫ –±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å?", "expected": "–±–∞–ª–∞–Ω—Å", "category": "—Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π"},
    {"question": "–£ –º–µ–Ω—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–∏—Å–Ω–µ—Ç", "expected": "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "category": "—Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π"},
    
    # –û–ø–µ—á–∞—Ç–∫–∏
    {"question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞—Ü–µ–Ω–∫a?", "expected": "–Ω–∞—Ü–µ–Ω–∫–∞", "category": "–æ–ø–µ—á–∞—Ç–∫–∞"},
    {"question": "–ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫y?", "expected": "–¥–æ—Å—Ç–∞–≤–∫–∞", "category": "–æ–ø–µ—á–∞—Ç–∫–∞"},
    {"question": "–ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ªa–Ω—Å?", "expected": "–±–∞–ª–∞–Ω—Å", "category": "–æ–ø–µ—á–∞—Ç–∫–∞"},
    {"question": "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏e –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "expected": "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "category": "–æ–ø–µ—á–∞—Ç–∫–∞"},
    
    # –°–º–µ—à–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    {"question": "–ù–∞—Ü–µ–Ω–∫–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∞", "expected": "–Ω–∞—Ü–µ–Ω–∫–∞", "category": "—Å–º–µ—à–∞–Ω–Ω—ã–π"},
    {"question": "–ë–∞–ª–∞–Ω—Å –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "expected": "–±–∞–ª–∞–Ω—Å", "category": "—Å–º–µ—à–∞–Ω–Ω—ã–π"},
    
    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    {"question": "–ö–∞–∫ –≤—ã–∑–≤–∞—Ç—å —Ç–∞–∫—Å–∏?", "expected": "fallback", "category": "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"},
    {"question": "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –ø–æ–µ–∑–¥–∫–∞?", "expected": "fallback", "category": "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"},
    {"question": "–ì–¥–µ –º–æ–π –≤–æ–¥–∏—Ç–µ–ª—å?", "expected": "fallback", "category": "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"},
]

def test_local_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–û–ö–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    from main import SIMPLE_ANSWERS
    
    results = []
    correct = 0
    total = len(TEST_QUESTIONS)
    
    for i, test_case in enumerate(TEST_QUESTIONS, 1):
        question = test_case["question"]
        expected = test_case["expected"]
        category = test_case["category"]
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ (–∫–∞–∫ –≤ main.py)
        text = question.lower()
        found_answer = None
        found_keyword = None
        
        for keyword, answer in SIMPLE_ANSWERS.items():
            if keyword in text:
                found_answer = answer
                found_keyword = keyword
                break
        
        if found_keyword:
            result = "‚úÖ CORRECT" if found_keyword == expected else "‚ùå WRONG"
            if found_keyword == expected:
                correct += 1
        else:
            result = "‚úÖ CORRECT" if expected == "fallback" else "‚ùå WRONG"
            if expected == "fallback":
                correct += 1
            found_keyword = "fallback"
            found_answer = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏."
        
        print(f"{i:2d}. {result} | {category:12s} | {question:30s} | {found_keyword:10s}")
        
        results.append({
            "question": question,
            "expected": expected,
            "actual": found_keyword,
            "category": category,
            "correct": found_keyword == expected,
            "answer": found_answer[:50] + "..." if len(found_answer) > 50 else found_answer
        })
    
    accuracy = (correct / total) * 100
    print("=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –õ–û–ö–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct}/{total}")
    print(f"   üìà –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1f}%")
    
    return results, accuracy

def test_api_system(base_url="http://localhost:8000"):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API —Å–∏—Å—Ç–µ–º—É"""
    print(f"\nüåê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –°–ò–°–¢–ï–ú–´ ({base_url})")
    print("=" * 50)
    
    results = []
    correct = 0
    total = len(TEST_QUESTIONS)
    
    for i, test_case in enumerate(TEST_QUESTIONS, 1):
        question = test_case["question"]
        expected = test_case["expected"]
        category = test_case["category"]
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
            response = requests.post(
                f"{base_url}/chat",
                json={
                    "text": question,
                    "user_id": "test_user",
                    "locale": "ru"
                },
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                actual_intent = data.get("intent", "unknown")
                actual_source = data.get("source", "unknown")
                actual_response = data.get("response", "")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
                if actual_source == "simple":
                    found_keyword = actual_intent
                else:
                    found_keyword = "fallback"
                
                result = "‚úÖ CORRECT" if found_keyword == expected else "‚ùå WRONG"
                if found_keyword == expected:
                    correct += 1
                
                print(f"{i:2d}. {result} | {category:12s} | {question:30s} | {found_keyword:10s}")
                
                results.append({
                    "question": question,
                    "expected": expected,
                    "actual": found_keyword,
                    "category": category,
                    "correct": found_keyword == expected,
                    "response": actual_response[:50] + "..." if len(actual_response) > 50 else actual_response,
                    "api_response": data
                })
            else:
                print(f"{i:2d}. ‚ùå ERROR | {category:12s} | {question:30s} | HTTP {response.status_code}")
                results.append({
                    "question": question,
                    "expected": expected,
                    "actual": "error",
                    "category": category,
                    "correct": False,
                    "error": f"HTTP {response.status_code}"
                })
                
        except Exception as e:
            print(f"{i:2d}. ‚ùå ERROR | {category:12s} | {question:30s} | {str(e)[:20]}")
            results.append({
                "question": question,
                "expected": expected,
                "actual": "error",
                "category": category,
                "correct": False,
                "error": str(e)
            })
    
    accuracy = (correct / total) * 100
    print("=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ API –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct}/{total}")
    print(f"   üìà –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1f}%")
    
    return results, accuracy

def analyze_results(local_results, api_results):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\nüìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("=" * 50)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = {}
    for result in local_results:
        cat = result["category"]
        if cat not in categories:
            categories[cat] = {"total": 0, "correct": 0}
        categories[cat]["total"] += 1
        if result["correct"]:
            categories[cat]["correct"] += 1
    
    print("üìà –¢–û–ß–ù–û–°–¢–¨ –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
    for cat, stats in categories.items():
        accuracy = (stats["correct"] / stats["total"]) * 100
        print(f"   {cat:12s}: {stats['correct']:2d}/{stats['total']:2d} ({accuracy:5.1f}%)")
    
    # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    print("\n‚ùå –ü–†–û–ë–õ–ï–ú–ù–´–ï –í–û–ü–†–û–°–´:")
    for result in local_results:
        if not result["correct"]:
            print(f"   ‚ùå {result['question']:30s} | –û–∂–∏–¥–∞–ª–æ—Å—å: {result['expected']:10s} | –ü–æ–ª—É—á–µ–Ω–æ: {result['actual']:10s}")

def save_results(local_results, api_results, local_accuracy, api_accuracy):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"test_results_{timestamp}.json"
    
    data = {
        "timestamp": timestamp,
        "local_results": {
            "accuracy": local_accuracy,
            "total_tests": len(local_results),
            "results": local_results
        },
        "api_results": {
            "accuracy": api_accuracy,
            "total_tests": len(api_results),
            "results": api_results
        }
    }
    
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")

if __name__ == "__main__":
    print("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ò–ò –ú–û–î–ï–õ–ò APARU")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    local_results, local_accuracy = test_local_system()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Å–∏—Å—Ç–µ–º—É (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
    try:
        api_results, api_accuracy = test_api_system()
    except Exception as e:
        print(f"\n‚ö†Ô∏è API —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ: {e}")
        api_results, api_accuracy = [], 0
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    analyze_results(local_results, api_results)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    save_results(local_results, api_results, local_accuracy, api_accuracy)
    
    print("\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
