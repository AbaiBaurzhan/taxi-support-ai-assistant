#!/usr/bin/env python3
"""
Улучшенная система поиска для APARU LLM
Расширенная база знаний с большим количеством вариаций
"""

import json
import re
from pathlib import Path
from typing import List, Dict, Tuple

class EnhancedAPARUSearch:
    def __init__(self):
        """Инициализация улучшенной системы поиска APARU"""
        
        # База знаний
        self.knowledge_base = []
        
        # Расширенные маппинги с большим количеством вариаций
        self.question_mappings = {
            "наценка": {
                "questions": ["что такое наценка", "что означает наценка"],
                "contexts": [
                    "почему дорого", "почему так дорого", "откуда цена", "почему высокая цена",
                    "зачем наценка", "что такое surge pricing", "динамическое ценообразование",
                    "повышенная стоимость", "доплата", "почему цена выше"
                ],
                "keywords": ["наценка", "цена", "стоимость", "дорого", "тариф", "спрос", "динамическое"]
            },
            "пополнение": {
                "questions": ["как пополнить баланс"],
                "contexts": [
                    "как заплатить", "как оплатить", "где пополнить", "как добавить деньги",
                    "как внести средства", "как пополнить счет", "где заплатить",
                    "как оплатить поездку", "где найти пополнение"
                ],
                "keywords": ["пополнить", "баланс", "счет", "деньги", "оплатить", "платеж", "qiwi", "kaspi"]
            },
            "комфорт": {
                "questions": ["что такое тариф комфорт", "что такое комфорт"],
                "contexts": [
                    "комфорт класс", "премиум такси", "новая машина", "что такое комфорт",
                    "чем отличается комфорт", "комфорт машина", "премиум класс"
                ],
                "keywords": ["комфорт", "премиум", "класс", "машина", "новая", "лучше"]
            },
            "расценка": {
                "questions": ["как узнать расценку"],
                "contexts": [
                    "как узнать цену", "где найти цену", "как узнать стоимость",
                    "где посмотреть цену", "как узнать сколько стоит", "где найти расценку"
                ],
                "keywords": ["расценка", "цена", "стоимость", "тариф", "посмотреть", "узнать"]
            },
            "предварительный": {
                "questions": ["как сделать предварительный заказ"],
                "contexts": [
                    "можно ли заказать заранее", "как заказать заранее", "можно ли забронировать",
                    "как забронировать", "предварительный заказ", "заказ на время"
                ],
                "keywords": ["предварительный", "заранее", "забронировать", "заказ", "время"]
            },
            "доставка": {
                "questions": ["как зарегистрировать заказ доставки"],
                "contexts": [
                    "как заказать доставку", "как доставить посылку", "курьерская служба",
                    "доставка товара", "курьер", "доставить вещи", "доставить документы"
                ],
                "keywords": ["доставка", "курьер", "товар", "посылка", "доставить", "вещи", "документы"]
            },
            "водитель": {
                "questions": ["как мне принимать заказы и что для этого нужно"],
                "contexts": [
                    "как стать водителем", "как работать водителем", "как начать работать",
                    "как стать партнером", "работа водителем", "регистрация водителя"
                ],
                "keywords": ["водитель", "заказы", "работать", "стать", "партнер", "регистрация"]
            },
            "моточасы": {
                "questions": ["что такое моточасы"],
                "contexts": [
                    "почему считают время", "оплата за время", "время поездки",
                    "считают время", "тариф за время", "оплата времени"
                ],
                "keywords": ["моточасы", "время", "поездка", "оплата", "считают", "минуты"]
            },
            "таксометр": {
                "questions": ["как работать с таксометром"],
                "contexts": [
                    "как пользоваться таксометром", "как включить таксометр",
                    "как управлять таксометром", "работа с таксометром"
                ],
                "keywords": ["таксометр", "работать", "пользоваться", "включить", "управлять"]
            },
            "приложение": {
                "questions": ["приложение не работает что делать"],
                "contexts": [
                    "приложение не открывается", "приложение зависает", "проблемы с приложением",
                    "приложение не запускается", "ошибка приложения", "приложение не отвечает"
                ],
                "keywords": ["приложение", "не работает", "не открывается", "зависает", "проблема", "ошибка"]
            },
            "отмена": {
                "questions": ["как отменить заказ"],
                "contexts": [
                    "отменить поездку", "отменить заказ", "отказ от поездки",
                    "не нужен заказ", "передумал", "отменить вызов"
                ],
                "keywords": ["отменить", "отказ", "передумал", "не нужен", "отмена"]
            },
            "водитель_не_приехал": {
                "questions": ["что делать если водитель не приехал"],
                "contexts": [
                    "водитель не приехал", "водитель опоздал", "водитель не пришел",
                    "ждать водителя", "водитель не появился", "проблема с водителем"
                ],
                "keywords": ["водитель", "не приехал", "опоздал", "ждать", "проблема"]
            },
            "связь_с_водителем": {
                "questions": ["как связаться с водителем"],
                "contexts": [
                    "позвонить водителю", "связаться с водителем", "написать водителю",
                    "связь с водителем", "контакт водителя", "номер водителя"
                ],
                "keywords": ["связаться", "позвонить", "водитель", "контакт", "номер", "написать"]
            },
            "отслеживание": {
                "questions": ["как узнать где находится водитель"],
                "contexts": [
                    "где водитель", "отследить водителя", "местоположение водителя",
                    "карта водителя", "маршрут водителя", "где едет водитель"
                ],
                "keywords": ["где", "водитель", "отследить", "местоположение", "карта", "маршрут"]
            },
            "эконом": {
                "questions": ["что такое эконом тариф"],
                "contexts": [
                    "эконом класс", "базовый тариф", "обычное такси",
                    "дешевое такси", "стандартный тариф"
                ],
                "keywords": ["эконом", "базовый", "обычный", "дешевый", "стандартный"]
            },
            "универсал": {
                "questions": ["как работает универсал"],
                "contexts": [
                    "универсал тариф", "большой багаж", "крупногабаритный груз",
                    "много вещей", "багажник", "грузовое отделение"
                ],
                "keywords": ["универсал", "багаж", "груз", "вещи", "багажник"]
            },
            "грузовое": {
                "questions": ["можно ли заказать грузовое такси"],
                "contexts": [
                    "грузовое такси", "перевозка груза", "крупный груз",
                    "мебель", "техника", "грузовик"
                ],
                "keywords": ["грузовое", "груз", "перевозка", "мебель", "техника"]
            },
            "эвакуатор": {
                "questions": ["как заказать эвакуатор"],
                "contexts": [
                    "эвакуатор", "буксировка", "поломка автомобиля",
                    "не заводится", "авария", "транспортировка авто"
                ],
                "keywords": ["эвакуатор", "буксировка", "поломка", "не заводится", "авария"]
            },
            "неправильное_списание": {
                "questions": ["что делать если списали неправильную сумму"],
                "contexts": [
                    "неправильное списание", "двойное списание", "ошибка в платеже",
                    "списали лишнее", "неправильная сумма", "ошибка списания"
                ],
                "keywords": ["неправильное", "списание", "ошибка", "сумма", "платеж"]
            },
            "справка": {
                "questions": ["как получить справку о поездке"],
                "contexts": [
                    "справка о поездке", "документ о поездке", "квитанция",
                    "подтверждение поездки", "отчет о поездке"
                ],
                "keywords": ["справка", "документ", "квитанция", "подтверждение", "отчет"]
            },
            "наличные": {
                "questions": ["можно ли оплатить наличными"],
                "contexts": [
                    "оплата наличными", "деньги наличными", "наличные деньги",
                    "оплата купюрами", "наличный расчет"
                ],
                "keywords": ["наличные", "деньги", "купюры", "наличный", "расчет"]
            },
            "карта": {
                "questions": ["как привязать банковскую карту"],
                "contexts": [
                    "привязать карту", "добавить карту", "банковская карта",
                    "платежная карта", "visa", "mastercard"
                ],
                "keywords": ["карта", "привязать", "добавить", "банковская", "платежная"]
            },
            "забытые_вещи": {
                "questions": ["что делать если забыл вещи в такси"],
                "contexts": [
                    "забыл вещи", "забыл в такси", "потерял вещи",
                    "оставил вещи", "забыл сумку", "забыл телефон"
                ],
                "keywords": ["забыл", "вещи", "потерял", "оставил", "сумка", "телефон"]
            },
            "отзыв": {
                "questions": ["как оставить отзыв о поездке"],
                "contexts": [
                    "оставить отзыв", "оценить поездку", "оценка водителя",
                    "отзыв о водителе", "рейтинг водителя"
                ],
                "keywords": ["отзыв", "оценить", "оценка", "рейтинг", "водитель"]
            },
            "промокод": {
                "questions": ["что такое промокод", "как ввести промокод"],
                "contexts": [
                    "промокод", "скидка", "промо код", "код скидки",
                    "ввести промокод", "активировать промокод"
                ],
                "keywords": ["промокод", "скидка", "промо", "код", "ввести", "активировать"]
            },
            "заказ_для_другого": {
                "questions": ["можно ли заказать такси для другого человека"],
                "contexts": [
                    "заказ для другого", "такси для друга", "заказ для родственника",
                    "такси для мамы", "заказ для папы"
                ],
                "keywords": ["другого", "друга", "родственника", "мамы", "папы"]
            },
            "рейтинг_водителей": {
                "questions": ["как работает система рейтинга водителей"],
                "contexts": [
                    "рейтинг водителей", "система рейтинга", "оценка водителей",
                    "качество водителей", "лучшие водители"
                ],
                "keywords": ["рейтинг", "водителей", "система", "оценка", "качество"]
            },
            "жалоба_на_водителя": {
                "questions": ["что делать если водитель ведет себя неподобающе"],
                "contexts": [
                    "жалоба на водителя", "водитель ведет себя плохо", "неподобающее поведение",
                    "плохой водитель", "жалоба", "проблема с водителем"
                ],
                "keywords": ["жалоба", "водитель", "плохо", "неподобающе", "проблема"]
            }
        }
        
    def load_knowledge_base(self, kb_file: str = "database_Aparu/BZ.txt", extended_file: str = "database_Aparu/extended_BZ.txt"):
        """Загружает и обрабатывает расширенную базу знаний"""
        
        print("📚 Загружаем расширенную базу знаний...")
        
        # Читаем основную базу
        with open(kb_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Читаем расширенную базу
        try:
            with open(extended_file, 'r', encoding='utf-8') as f:
                extended_content = f.read()
            content += "\n" + extended_content
            print("✅ Расширенная база знаний загружена")
        except FileNotFoundError:
            print("⚠️ Расширенная база знаний не найдена, используем основную")
        
        # Парсим вопросы и ответы
        sections = content.split('- question:')
        
        for section in sections[1:]:
            lines = section.strip().split('\n')
            if len(lines) >= 2:
                question = lines[0].strip()
                answer = '\n'.join(lines[1:]).strip()
                
                # Создаем запись
                kb_entry = {
                    "question": question,
                    "answer": answer,
                    "similarity_score": 0.0
                }
                
                self.knowledge_base.append(kb_entry)
        
        print(f"✅ Загружено {len(self.knowledge_base)} записей")
        return self.knowledge_base
    
    def search(self, query: str, top_k: int = 3) -> List[Dict]:
        """Улучшенный поиск с расширенными маппингами"""
        
        query_lower = query.lower().strip()
        results = []
        
        # Ищем по расширенным маппингам
        for category, mappings in self.question_mappings.items():
            # Проверяем контексты
            for context in mappings["contexts"]:
                if context in query_lower:
                    # Ищем соответствующий вопрос
                    for item in self.knowledge_base:
                        question_lower = item['question'].lower().strip()
                        
                        # Проверяем точные совпадения
                        for exact_question in mappings["questions"]:
                            if exact_question in question_lower:
                                item_copy = item.copy()
                                item_copy['similarity_score'] = 60.0  # Повышаем score
                                results.append(item_copy)
                                break
                        
                        # Проверяем ключевые слова
                        for keyword in mappings["keywords"]:
                            if keyword in question_lower:
                                item_copy = item.copy()
                                item_copy['similarity_score'] = 40.0
                                results.append(item_copy)
                                break
            
            # Проверяем ключевые слова напрямую
            for keyword in mappings["keywords"]:
                if keyword in query_lower:
                    for item in self.knowledge_base:
                        question_lower = item['question'].lower().strip()
                        
                        # Проверяем точные совпадения
                        for exact_question in mappings["questions"]:
                            if exact_question in question_lower:
                                item_copy = item.copy()
                                item_copy['similarity_score'] = 50.0
                                results.append(item_copy)
                                break
                        
                        # Проверяем ключевые слова
                        if keyword in question_lower:
                            item_copy = item.copy()
                            item_copy['similarity_score'] = 30.0
                            results.append(item_copy)
        
        # Убираем дубликаты
        seen = set()
        unique_results = []
        for result in results:
            if result['question'] not in seen:
                seen.add(result['question'])
                unique_results.append(result)
        
        # Сортируем по score
        unique_results.sort(key=lambda x: x['similarity_score'], reverse=True)
        return unique_results[:top_k]
    
    def get_answer(self, query: str) -> str:
        """Получает ответ на вопрос с улучшенной уверенностью"""
        
        # Ищем похожие записи
        results = self.search(query, top_k=1)
        
        if not results:
            return "Извините, я не нашел подходящего ответа в базе знаний."
        
        # Берем лучший результат
        best_match = results[0]
        
        # Определяем уверенность (снижаем порог для лучшего покрытия)
        confidence = min(best_match["similarity_score"] / 60.0, 1.0)
        
        if confidence > 0.3:  # Снижаем порог с 0.4 до 0.3
            # Достаточная уверенность - возвращаем ответ
            return best_match["answer"]
        else:
            # Низкая уверенность - возвращаем общий ответ
            return "Извините, я не уверен в ответе. Возможно, вы имели в виду что-то другое?"

# Глобальный экземпляр
enhanced_aparu_search = EnhancedAPARUSearch()
enhanced_aparu_search.load_knowledge_base()

def get_enhanced_aparu_answer(query: str) -> str:
    """Получает ответ от улучшенной системы поиска APARU"""
    return enhanced_aparu_search.get_answer(query)

if __name__ == "__main__":
    print("🚀 Создание улучшенной системы поиска APARU...")
    
    # Тестируем
    test_queries = [
        "Почему так дорого?",
        "Как заплатить за поездку?",
        "Можно ли заказать заранее?",
        "Как стать водителем?",
        "Приложение не открывается",
        "Что означает наценка?",
        "Где найти цену?",
        "Как доставить посылку?",
        "Что такое комфорт?",
        "Почему считают время?",
        "Как отменить заказ?",
        "Водитель не приехал",
        "Как связаться с водителем?",
        "Где находится водитель?",
        "Что такое эконом?",
        "Как работает универсал?",
        "Можно ли заказать грузовое?",
        "Как заказать эвакуатор?",
        "Списали неправильную сумму",
        "Как получить справку?",
        "Можно ли оплатить наличными?",
        "Как привязать карту?",
        "Забыл вещи в такси",
        "Как оставить отзыв?",
        "Что такое промокод?",
        "Можно ли заказать для мамы?",
        "Как работает рейтинг?",
        "Водитель ведет себя плохо"
    ]
    
    print("\n🔍 Результаты тестирования:")
    
    success_count = 0
    total_count = len(test_queries)
    
    for query in test_queries:
        print(f"\n❓ Вопрос: {query}")
        answer = get_enhanced_aparu_answer(query)
        
        if "извините" not in answer.lower() and "не уверен" not in answer.lower():
            success_count += 1
            print(f"✅ Ответ: {answer[:100]}...")
        else:
            print(f"❌ Ответ: {answer}")
    
    print(f"\n📊 Статистика: {success_count}/{total_count} успешных ответов ({success_count/total_count*100:.1f}%)")
    print("\n✅ Улучшенная система поиска готова!")
    print("🎯 Теперь модель лучше понимает контекст!")
