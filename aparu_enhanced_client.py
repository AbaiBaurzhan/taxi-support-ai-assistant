#!/usr/bin/env python3
"""
üîß APARU Enhanced Integration
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å APARU —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
"""

import json
import logging
import requests
import os
import pickle
from typing import Dict, Any, Optional, List
from pathlib import Path

logger = logging.getLogger(__name__)

class APARUEnhancedClient:
    def __init__(self, model_name: str = "aparu-support", use_ollama: bool = True):
        self.use_ollama = use_ollama
        self.model_name = model_name
        self.knowledge_base = None
        
        if use_ollama:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ LLM
            self.llm_url = os.getenv("LLM_URL", "http://localhost:11434")
            self.ollama_url = f"{self.llm_url}/api/generate"
            self.llm_enabled = os.getenv("LLM_ENABLED", "true").lower() == "true"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å LLM
            if self.llm_enabled:
                try:
                    response = requests.get(f"{self.llm_url}/api/tags", timeout=5)
                    if response.status_code != 200:
                        logger.warning("LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                        self.use_ollama = False
                except:
                    logger.warning("LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                    self.use_ollama = False
            
            if not self.llm_enabled:
                logger.warning("LLM –æ—Ç–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                self.use_ollama = False
        else:
            logger.warning("Heavy ML libraries not available, using fallback responses")
    
    def load_aparu_knowledge_base(self, index_path: str = "aparu_knowledge_index.pkl"):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±—É—á–µ–Ω–Ω—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π APARU"""
        try:
            if not Path(index_path).exists():
                logger.warning(f"–§–∞–π–ª {index_path} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                return False
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω–¥–µ–∫—Å
            with open(index_path, 'rb') as f:
                data = pickle.load(f)
            
            self.knowledge_base = data['knowledge_base']
            logger.info(f"‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π APARU –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {len(self.knowledge_base)} –∑–∞–ø–∏—Å–µ–π")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π APARU: {e}")
            return False
    
    def generate_response(self, prompt: str, max_length: int = 200) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ APARU"""
        try:
            if self.use_ollama:
                return self._generate_with_aparu_model(prompt, max_length)
            else:
                return self._generate_fallback(prompt)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."
    
    def _generate_with_aparu_model(self, prompt: str, max_length: int) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ APARU"""
        try:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π, –∏—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if self.knowledge_base:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ –ø—Ä–æ–º–ø—Ç–∞
                user_question = self._extract_question_from_prompt(prompt)
                
                # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π APARU
                similar_items = self._search_aparu_knowledge(user_question)
                
                if similar_items:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π APARU
                    context = self._build_aparu_context(similar_items)
                    enhanced_prompt = self._enhance_prompt_with_aparu_context(prompt, context)
                else:
                    enhanced_prompt = prompt
            else:
                enhanced_prompt = prompt
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ APARU
            payload = {
                "model": self.model_name,
                "prompt": enhanced_prompt,
                "stream": False,
                "options": {
                    "temperature": 0.7,
                    "max_tokens": max_length
                }
            }
            
            response = requests.post(self.ollama_url, json=payload, timeout=30)
            response.raise_for_status()
            
            result = response.json()
            return result.get("response", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏.")
            
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Ollama: {e}")
            return self._generate_fallback(prompt)
    
    def _extract_question_from_prompt(self, prompt: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–æ–º–ø—Ç–∞"""
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É "–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
        if "–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:" in prompt:
            return prompt.split("–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")[-1].strip()
        return prompt
    
    def _search_aparu_knowledge(self, question: str, top_k: int = 3) -> List[Dict]:
        """–£–º–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π APARU —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        if not self.knowledge_base:
            return []
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ø–æ–∏—Å–∫–∞
        try:
            from smart_context_search import SmartContextSearch
            
            # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –ø–æ–∏—Å–∫–∞ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞)
            if not hasattr(self, 'smart_search'):
                self.smart_search = SmartContextSearch()
                self.smart_search.load_knowledge_base()
            
            # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –∑–∞–ø–∏—Å–∏
            results = self.smart_search.search(question, top_k=top_k)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            formatted_results = []
            for result in results:
                formatted_results.append({
                    'question': result['question'],
                    'answer': result['answer'],
                    'similarity_score': result['similarity_score'],
                    'category': result.get('category', 'general'),
                    'contexts': result.get('contexts', [])
                })
            
            return formatted_results
            
        except ImportError:
            # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É –ø–æ–∏—Å–∫—É
            return self._simple_search(question, top_k)
    
    def _simple_search(self, question: str, top_k: int = 3) -> List[Dict]:
        """–ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (fallback)"""
        question_lower = question.lower()
        results = []
        
        for item in self.knowledge_base:
            # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            score = 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –≤–æ–ø—Ä–æ—Å–µ
            for keyword in item.get('keywords', []):
                if keyword.lower() in question_lower:
                    score += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ –≤–æ–ø—Ä–æ—Å–∞
            if item['question'].lower() in question_lower:
                score += 2
            
            if score > 0:
                results.append({
                    **item,
                    'similarity_score': score / 10.0  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º
                })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        results.sort(key=lambda x: x['similarity_score'], reverse=True)
        return results[:top_k]
    
    def _build_aparu_context(self, similar_items: List[Dict]) -> str:
        """–°—Ç—Ä–æ–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π APARU"""
        context_parts = []
        
        for item in similar_items:
            context_parts.append(f"–í–æ–ø—Ä–æ—Å: {item['question']}")
            context_parts.append(f"–û—Ç–≤–µ—Ç: {item['answer']}")
            if item.get('keywords'):
                context_parts.append(f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(item['keywords'][:5])}")
            context_parts.append("---")
        
        return "\n".join(context_parts)
    
    def _enhance_prompt_with_aparu_context(self, original_prompt: str, context: str) -> str:
        """–£–ª—É—á—à–∞–µ—Ç –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π APARU"""
        enhanced_prompt = f"""–¢—ã - –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–∞–∫—Å–∏-—Å–µ—Ä–≤–∏—Å–∞ APARU.

–ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π APARU –¥–ª—è –æ—Ç–≤–µ—Ç–∞:

{context}

–ü—Ä–∞–≤–∏–ª–∞ –æ—Ç–≤–µ—Ç–∞:
- –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–π —Å "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ"
- –û—Ç–≤–µ—á–∞–π –≤–µ–∂–ª–∏–≤–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ
- –ó–∞–∫–∞–Ω—á–∏–≤–∞–π "–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ –ê–ü–ê–†–£"
- –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É
- –ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π APARU –≤—ã—à–µ
- –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç–∞, –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
- –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ

{original_prompt}

–û—Ç–≤–µ—Ç:"""
        
        return enhanced_prompt
    
    def _generate_fallback(self, prompt: str) -> str:
        """–ü—Ä–æ—Å—Ç–æ–π fallback —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π APARU"""
        prompt_lower = prompt.lower()
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π APARU, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë –¥–ª—è fallback
        if self.knowledge_base:
            user_question = self._extract_question_from_prompt(prompt)
            similar_items = self._search_aparu_knowledge(user_question, top_k=1)
            
            if similar_items and similar_items[0]['similarity_score'] > 0.3:
                return similar_items[0]['answer']
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ fallback –æ—Ç–≤–µ—Ç—ã –≤ —Å—Ç–∏–ª–µ APARU
        if "–Ω–∞—Ü–µ–Ω–∫–∞" in prompt_lower:
            return "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –ù–∞—Ü–µ–Ω–∫–∞ —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é —Ç–∞—Ä–∏—Ñ–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ö–æ–º–ø–∞–Ω–∏–∏ –∏ –µ–µ –Ω–∞–ª–∏—á–∏–µ —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç—Å—è –æ–±—ä–µ–º —Å–ø—Ä–æ—Å–∞, –Ω–∞ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—ã–π –º–æ–º–µ–Ω—Ç. –° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ –ê–ü–ê–†–£."
        elif "—Ç–∞—Ä–∏—Ñ" in prompt_lower or "—Ü–µ–Ω–∞" in prompt_lower:
            return "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –í –≤–∏–¥—É –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤, –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ APARU –≤—ã–±—Ä–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Ñ–æ—Ä–º–∞ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è - —Ç–∞–∫—Å–æ–º–µ—Ç—Ä. –° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ –ê–ü–ê–†–£."
        elif "–±–∞–ª–∞–Ω—Å" in prompt_lower:
            return "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É QIWI, Cyberplat –∏–ª–∏ –ö–∞—Å—Å–∞24, —á–µ—Ä–µ–∑ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ QIWI –∏ Kaspi. –° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ –ê–ü–ê–†–£."
        elif "–≤–æ–¥–∏—Ç–µ–ª—å" in prompt_lower:
            return "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ APARU –±–µ—Å–ø–ª–∞—Ç–Ω–æ –≤ Google Play/App store. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –∫–æ–¥. –° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ –ê–ü–ê–†–£."
        else:
            return "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å, —è –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç. –° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ –ê–ü–ê–†–£."
    
    def create_aparu_context_prompt(self, user_message: str, intent: str, locale: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–∞–∫—Å–∏-—Å–µ—Ä–≤–∏—Å–∞ APARU —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π"""
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π APARU, –∏—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        context_info = ""
        if self.knowledge_base:
            similar_items = self._search_aparu_knowledge(user_message, top_k=2)
            if similar_items and similar_items[0]['similarity_score'] > 0.2:
                context_info = f"\n\n–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π APARU:\n"
                for item in similar_items:
                    context_info += f"–í–æ–ø—Ä–æ—Å: {item['question']}\n"
                    context_info += f"–û—Ç–≤–µ—Ç: {item['answer']}\n\n"
        
        system_prompt = f"""–¢—ã - –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–∞–∫—Å–∏-—Å–µ—Ä–≤–∏—Å–∞ APARU. 
–û—Ç–≤–µ—á–∞–π –Ω–∞ —è–∑—ã–∫–µ: {locale}
–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞: {intent}
{context_info}
–ü—Ä–∞–≤–∏–ª–∞ –æ—Ç–≤–µ—Ç–∞:
- –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–π —Å "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ"
- –û—Ç–≤–µ—á–∞–π –≤–µ–∂–ª–∏–≤–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ
- –ó–∞–∫–∞–Ω—á–∏–≤–∞–π "–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ –ê–ü–ê–†–£"
- –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É
- –ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π APARU –≤—ã—à–µ
- –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç–∞, –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
- –î–ª—è –∂–∞–ª–æ–± –≤—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–π —ç—Å–∫–∞–ª–∞—Ü–∏—é –∫ —á–µ–ª–æ–≤–µ–∫—É
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π, –∫–∞–∑–∞—Ö—Å–∫–∏–π –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç locale

–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_message}

–û—Ç–≤–µ—Ç:"""

        return system_prompt
    
    def get_aparu_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π APARU"""
        if self.knowledge_base:
            categories = {}
            for item in self.knowledge_base:
                category = item.get('category', 'general')
                categories[category] = categories.get(category, 0) + 1
            
            return {
                'total_questions': len(self.knowledge_base),
                'categories': categories,
                'source': 'APARU BZ.txt'
            }
        return {"error": "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π APARU –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
aparu_enhanced_client = APARUEnhancedClient()

def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ APARU enhanced client"""
    logging.basicConfig(level=logging.INFO)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π APARU
    if aparu_enhanced_client.load_aparu_knowledge_base():
        print("‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π APARU –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        test_questions = [
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞—Ü–µ–Ω–∫–∞?",
            "–ö–∞–∫ —É–∑–Ω–∞—Ç—å —Ä–∞—Å—Ü–µ–Ω–∫—É?",
            "–ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å?",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–æ—Ç–æ—á–∞—Å—ã?",
            "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–∞–∫—Å–æ–º–µ—Ç—Ä?"
        ]
        
        for question in test_questions:
            print(f"\nüìù –¢–µ—Å—Ç: {question}")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç
            prompt = aparu_enhanced_client.create_aparu_context_prompt(question, "faq", "RU")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = aparu_enhanced_client.generate_response(prompt)
            print(f"‚úÖ –û—Ç–≤–µ—Ç: {response[:150]}...")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = aparu_enhanced_client.get_aparu_stats()
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π APARU")

if __name__ == "__main__":
    main()
