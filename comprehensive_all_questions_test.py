#!/usr/bin/env python3
"""
üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –ü–û –í–°–ï–ú –í–û–ü–†–û–°–ê–ú –ò–ó –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã, –≤–∞—Ä–∏–∞—Ü–∏–∏, —Å–∏–Ω–æ–Ω–∏–º—ã –∏ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—ã
"""

import json
import logging
import time
from datetime import datetime
from typing import Dict, List, Any, Tuple
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ComprehensiveQuestionTester:
    def __init__(self):
        self.test_results = {
            'total_tests': 0,
            'successful_tests': 0,
            'failed_tests': 0,
            'category_results': {},
            'detailed_results': [],
            'performance_metrics': {
                'avg_response_time': 0.0,
                'min_response_time': float('inf'),
                'max_response_time': 0.0
            }
        }
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        self.knowledge_base = self._load_knowledge_base()
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        try:
            from enhanced_search_client import get_enhanced_answer
            self.search_function = get_enhanced_answer
            logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è enhanced_search_client")
        except ImportError:
            try:
                from morphological_search_client import get_enhanced_answer
                self.search_function = get_enhanced_answer
                logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è morphological_search_client")
            except ImportError:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É")
                self.search_function = None
    
    def _load_knowledge_base(self) -> List[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∏–∑ BZ.txt"""
        try:
            with open('BZ.txt', 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
            return []
    
    def generate_test_questions(self) -> List[Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã"""
        test_questions = []
        
        for idx, item in enumerate(self.knowledge_base):
            category = self._extract_category(item)
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –≤–∞—Ä–∏–∞—Ü–∏–π
            for variation in item.get('question_variations', []):
                test_questions.append({
                    'question': variation,
                    'category': category,
                    'type': 'original_variation',
                    'expected_answer': item.get('answer', ''),
                    'source': f'BZ.txt item {idx+1}'
                })
            
            # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∫–∞–∫ –≤–æ–ø—Ä–æ—Å—ã
            for keyword in item.get('keywords', []):
                test_questions.append({
                    'question': f"–ß—Ç–æ —Ç–∞–∫–æ–µ {keyword}?",
                    'category': category,
                    'type': 'keyword_question',
                    'expected_answer': item.get('answer', ''),
                    'source': f'BZ.txt item {idx+1} keyword'
                })
            
            # –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            morph_variations = self._generate_morphological_variations(item)
            for morph_var in morph_variations:
                test_questions.append({
                    'question': morph_var,
                    'category': category,
                    'type': 'morphological',
                    'expected_answer': item.get('answer', ''),
                    'source': f'BZ.txt item {idx+1} morphological'
                })
            
            # –°–∏–Ω–æ–Ω–∏–º–∏—á–µ—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            synonym_variations = self._generate_synonym_variations(item)
            for syn_var in synonym_variations:
                test_questions.append({
                    'question': syn_var,
                    'category': category,
                    'type': 'synonym',
                    'expected_answer': item.get('answer', ''),
                    'source': f'BZ.txt item {idx+1} synonym'
                })
        
        return test_questions
    
    def _extract_category(self, item: Dict[str, Any]) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        keywords = item.get('keywords', [])
        
        if any(kw in ['–Ω–∞—Ü–µ–Ω–∫–∞', '–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç', '–¥–æ–ø–ª–∞—Ç–∞', '–Ω–∞–¥–±–∞–≤–∫–∞'] for kw in keywords):
            return '–ù–ê–¶–ï–ù–ö–ê'
        elif any(kw in ['–¥–æ—Å—Ç–∞–≤–∫–∞', '–∫—É—Ä—å–µ—Ä', '–ø–æ—Å—ã–ª–∫–∞'] for kw in keywords):
            return '–î–û–°–¢–ê–í–ö–ê'
        elif any(kw in ['–±–∞–ª–∞–Ω—Å', '—Å—á–µ—Ç', '–ø–æ–ø–æ–ª–Ω–∏—Ç—å'] for kw in keywords):
            return '–ë–ê–õ–ê–ù–°'
        elif any(kw in ['–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', '–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ', '—Ä–∞–±–æ—Ç–∞—Ç—å'] for kw in keywords):
            return '–ü–†–ò–õ–û–ñ–ï–ù–ò–ï'
        elif any(kw in ['—Ç–∞—Ä–∏—Ñ', '–∫–æ–º—Ñ–æ—Ä—Ç', '–∫–ª–∞—Å—Å'] for kw in keywords):
            return '–¢–ê–†–ò–§'
        elif any(kw in ['–º–æ—Ç–æ—á–∞—Å—ã', '–≤—Ä–µ–º—è', '–º–∏–Ω—É—Ç—ã'] for kw in keywords):
            return '–ú–û–¢–û–ß–ê–°–´'
        else:
            return '–û–ë–©–ò–ï'
    
    def _generate_morphological_variations(self, item: Dict[str, Any]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤–æ–ø—Ä–æ—Å–æ–≤"""
        variations = []
        
        # –ë–∞–∑–æ–≤—ã–µ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        morph_changes = {
            '–Ω–∞—Ü–µ–Ω–∫–∞': ['–Ω–∞—Ü–µ–Ω–∫–∏', '–Ω–∞—Ü–µ–Ω–∫—É', '–Ω–∞—Ü–µ–Ω–∫–æ–π', '–Ω–∞—Ü–µ–Ω–∫–µ'],
            '–¥–æ—Å—Ç–∞–≤–∫–∞': ['–¥–æ—Å—Ç–∞–≤–∫–∏', '–¥–æ—Å—Ç–∞–≤–∫—É', '–¥–æ—Å—Ç–∞–≤–∫–æ–π', '–¥–æ—Å—Ç–∞–≤–∫–µ'],
            '–±–∞–ª–∞–Ω—Å': ['–±–∞–ª–∞–Ω—Å–∞', '–±–∞–ª–∞–Ω—Å—É', '–±–∞–ª–∞–Ω—Å–æ–º', '–±–∞–ª–∞–Ω—Å–µ'],
            '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ': ['–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é', '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º', '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏'],
            '—Ç–∞—Ä–∏—Ñ': ['—Ç–∞—Ä–∏—Ñ–∞', '—Ç–∞—Ä–∏—Ñ—É', '—Ç–∞—Ä–∏—Ñ–æ–º', '—Ç–∞—Ä–∏—Ñ–µ'],
            '–∫–æ–º—Ñ–æ—Ä—Ç': ['–∫–æ–º—Ñ–æ—Ä—Ç–∞', '–∫–æ–º—Ñ–æ—Ä—Ç—É', '–∫–æ–º—Ñ–æ—Ä—Ç–æ–º', '–∫–æ–º—Ñ–æ—Ä—Ç–µ']
        }
        
        for variation in item.get('question_variations', [])[:3]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3
            for base_word, morph_forms in morph_changes.items():
                if base_word in variation.lower():
                    for morph_form in morph_forms:
                        new_variation = variation.replace(base_word, morph_form)
                        variations.append(new_variation)
        
        return variations[:10]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    
    def _generate_synonym_variations(self, item: Dict[str, Any]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–Ω–æ–Ω–∏–º–∏—á–µ—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤–æ–ø—Ä–æ—Å–æ–≤"""
        variations = []
        
        # –°–∏–Ω–æ–Ω–∏–º—ã –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        synonyms = {
            '–Ω–∞—Ü–µ–Ω–∫–∞': ['–¥–æ—Ä–æ–≥–æ', '–ø–æ–¥–æ—Ä–æ–∂–∞–Ω–∏–µ', '–ø–æ–≤—ã—à–µ–Ω–∏–µ'],
            '–¥–æ—Å—Ç–∞–≤–∫–∞': ['–∫—É—Ä—å–µ—Ä', '–ø–æ—Å—ã–ª–∫–∞', '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å'],
            '–±–∞–ª–∞–Ω—Å': ['—Å—á–µ—Ç', '–∫–æ—à–µ–ª–µ–∫', '–ø–æ–ø–æ–ª–Ω–∏—Ç—å'],
            '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ': ['–ø—Ä–æ–≥—Ä–∞–º–º–∞', '—Å–æ—Ñ—Ç', '—Ä–∞–±–æ—Ç–∞—Ç—å'],
            '—Ç–∞—Ä–∏—Ñ': ['–∫–ª–∞—Å—Å', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Ü–µ–Ω–∞'],
            '–∫–æ–º—Ñ–æ—Ä—Ç': ['—É–¥–æ–±—Å—Ç–≤–æ', '–ø—Ä–µ–º–∏—É–º', '–≤—ã—Å—à–∏–π']
        }
        
        for variation in item.get('question_variations', [])[:2]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 2
            for base_word, syn_forms in synonyms.items():
                if base_word in variation.lower():
                    for syn_form in syn_forms:
                        new_variation = variation.replace(base_word, syn_form)
                        variations.append(new_variation)
        
        return variations[:8]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    
    def run_comprehensive_test(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç"""
        if not self.search_function:
            logger.error("‚ùå –ü–æ–∏—Å–∫–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")
            return self.test_results
        
        logger.info("üß™ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        test_questions = self.generate_test_questions()
        logger.info(f"üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(test_questions)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        for i, test_case in enumerate(test_questions):
            logger.info(f"üîç –¢–µ—Å—Ç {i+1}/{len(test_questions)}: {test_case['question'][:50]}...")
            
            start_time = time.time()
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —Å–∏—Å—Ç–µ–º—ã
                answer = self.search_function(test_case['question'])
                response_time = time.time() - start_time
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
                is_successful = answer != "–ù—É–∂–Ω–∞ —É—Ç–æ—á–Ω—è—é—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
                self.test_results['total_tests'] += 1
                if is_successful:
                    self.test_results['successful_tests'] += 1
                else:
                    self.test_results['failed_tests'] += 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                category = test_case['category']
                if category not in self.test_results['category_results']:
                    self.test_results['category_results'][category] = {
                        'total': 0, 'successful': 0, 'failed': 0
                    }
                
                self.test_results['category_results'][category]['total'] += 1
                if is_successful:
                    self.test_results['category_results'][category]['successful'] += 1
                else:
                    self.test_results['category_results'][category]['failed'] += 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                self.test_results['performance_metrics']['avg_response_time'] = (
                    (self.test_results['performance_metrics']['avg_response_time'] * 
                     (self.test_results['total_tests'] - 1) + response_time) / 
                    self.test_results['total_tests']
                )
                
                self.test_results['performance_metrics']['min_response_time'] = min(
                    self.test_results['performance_metrics']['min_response_time'], response_time
                )
                
                self.test_results['performance_metrics']['max_response_time'] = max(
                    self.test_results['performance_metrics']['max_response_time'], response_time
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                self.test_results['detailed_results'].append({
                    'question': test_case['question'],
                    'category': test_case['category'],
                    'type': test_case['type'],
                    'answer': answer[:100] + "..." if len(answer) > 100 else answer,
                    'is_successful': is_successful,
                    'response_time': response_time,
                    'source': test_case['source']
                })
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {i+1}: {e}")
                self.test_results['total_tests'] += 1
                self.test_results['failed_tests'] += 1
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        self._calculate_final_metrics()
        
        return self.test_results
    
    def _calculate_final_metrics(self):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏"""
        if self.test_results['total_tests'] > 0:
            self.test_results['success_rate'] = (
                self.test_results['successful_tests'] / self.test_results['total_tests']
            )
        
        # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for category, metrics in self.test_results['category_results'].items():
            if metrics['total'] > 0:
                metrics['success_rate'] = metrics['successful'] / metrics['total']
    
    def save_results(self, filename: str = None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞"""
        if not filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"comprehensive_test_results_{timestamp}.json"
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(self.test_results, f, ensure_ascii=False, indent=2)
        
        logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
        return filename
    
    def print_summary(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        print("\n" + "="*60)
        print("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –ü–û –í–°–ï–ú –í–û–ü–†–û–°–ê–ú - –†–ï–ó–£–õ–¨–¢–ê–¢–´")
        print("="*60)
        
        print(f"\nüìä –û–ë–©–ò–ï –ú–ï–¢–†–ò–ö–ò:")
        print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {self.test_results['total_tests']}")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {self.test_results['successful_tests']}")
        print(f"   –ù–µ—É–¥–∞—á–Ω—ã—Ö: {self.test_results['failed_tests']}")
        print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {self.test_results.get('success_rate', 0):.1%}")
        
        print(f"\n‚è±Ô∏è –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {self.test_results['performance_metrics']['avg_response_time']:.3f}s")
        print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {self.test_results['performance_metrics']['min_response_time']:.3f}s")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {self.test_results['performance_metrics']['max_response_time']:.3f}s")
        
        print(f"\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
        for category, metrics in self.test_results['category_results'].items():
            success_rate = metrics.get('success_rate', 0)
            status = "‚úÖ" if success_rate >= 0.8 else "‚ö†Ô∏è" if success_rate >= 0.6 else "‚ùå"
            print(f"   {status} {category}: {success_rate:.1%} ({metrics['successful']}/{metrics['total']})")
        
        print(f"\nüîç –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        failed_questions = [r for r in self.test_results['detailed_results'] if not r['is_successful']]
        if failed_questions:
            print(f"   –ù–µ—É–¥–∞—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã ({len(failed_questions)}):")
            for result in failed_questions[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                print(f"     ‚ùå {result['question'][:60]}...")
        else:
            print("   ‚úÖ –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –ü–û –í–°–ï–ú –í–û–ü–†–û–°–ê–ú –ò–ó –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô")
    print("="*60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä
    tester = ComprehensiveQuestionTester()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    results = tester.run_comprehensive_test()
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    tester.print_summary()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    filename = tester.save_results()
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {filename}")
    print("\nüéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")

if __name__ == "__main__":
    main()
