#!/usr/bin/env python3
"""
üß™ –¢–µ—Å—Ç—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ FAQ-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ APARU
–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫: Top-1 ‚â• 0.85, Top-3 ‚â• 0.95
"""

import requests
import json
import time
from typing import Dict, List, Any, Tuple
import subprocess
import signal
import os

class ProfessionalFAQTester:
    def __init__(self, base_url: str = "http://localhost:8001"):
        self.base_url = base_url
        self.test_results = []
        self.server_process = None
        
    def start_server(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π FAQ-—Å–µ—Ä–≤–µ—Ä...")
        
        try:
            self.server_process = subprocess.Popen([
                "python3", "professional_faq_server.py"
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
            time.sleep(10)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
            try:
                response = requests.get(f"{self.base_url}/health", timeout=5)
                if response.status_code == 200:
                    print("‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
                    return True
                else:
                    print(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {response.status_code}")
                    return False
            except requests.exceptions.RequestException:
                print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return False
    
    def stop_server(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä"""
        if self.server_process:
            print("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...")
            self.server_process.terminate()
            self.server_process.wait()
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def test_question(self, question: str, expected_category: str = None) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å"""
        print(f"\nüß™ –¢–µ—Å—Ç: {question}")
        
        try:
            response = requests.post(
                f"{self.base_url}/ask",
                json={
                    "question": question,
                    "user_id": "test123",
                    "locale": "ru"
                },
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                
                result = {
                    'question': question,
                    'answer': data.get('answer', ''),
                    'confidence': data.get('confidence', 0),
                    'category': data.get('category'),
                    'suggestions': data.get('suggestions', []),
                    'source': data.get('source', 'unknown'),
                    'request_id': data.get('request_id', ''),
                    'success': True,
                    'timestamp': time.time()
                }
                
                print(f"‚úÖ –û—Ç–≤–µ—Ç: {result['answer'][:100]}...")
                print(f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.3f}")
                print(f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {result['category']}")
                print(f"üîç –ò—Å—Ç–æ—á–Ω–∏–∫: {result['source']}")
                
                if result['suggestions']:
                    print(f"üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {len(result['suggestions'])}")
                
                return result
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
                return {
                    'question': question,
                    'error': f"HTTP {response.status_code}",
                    'success': False
                }
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return {
                'question': question,
                'error': str(e),
                'success': False
            }
    
    def run_comprehensive_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ FAQ-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")
        print("=" * 80)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        test_cases = [
            {
                'question': '–ß—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞—Ü–µ–Ω–∫–∞?',
                'expected_category': 'pricing',
                'expected_confidence': 0.6,
                'test_type': 'exact_match'
            },
            {
                'question': '–ü–æ—á–µ–º—É —Ç–∞–∫ –¥–æ—Ä–æ–≥–æ?',
                'expected_category': 'pricing',
                'expected_confidence': 0.4,
                'test_type': 'synonym'
            },
            {
                'question': '–ß—Ç–æ –∑–Ω–∞—á–∏—Ç –ø–æ–≤—ã—à–∞—é—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç?',
                'expected_category': 'pricing',
                'expected_confidence': 0.4,
                'test_type': 'variation'
            },
            {
                'question': '–û—Ç–∫—É–¥–∞ –±–µ—Ä–µ—Ç—Å—è –Ω–∞–¥–±–∞–≤–∫–∞ –∫ —Ü–µ–Ω–µ?',
                'expected_category': 'pricing',
                'expected_confidence': 0.4,
                'test_type': 'variation'
            },
            {
                'question': '–ü–æ—á–µ–º—É —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ç–∞–ª–∞ –≤—ã—à–µ –æ–±—ã—á–Ω–æ–π?',
                'expected_category': 'pricing',
                'expected_confidence': 0.4,
                'test_type': 'variation'
            },
            {
                'question': '–ß—Ç–æ —Ç–∞–∫–æ–µ —Ç–∞—Ä–∏—Ñ –ö–æ–º—Ñ–æ—Ä—Ç?',
                'expected_category': 'pricing',
                'expected_confidence': 0.6,
                'test_type': 'exact_match'
            },
            {
                'question': '–ß–µ–º –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ö–æ–º—Ñ–æ—Ä—Ç –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞?',
                'expected_category': 'pricing',
                'expected_confidence': 0.4,
                'test_type': 'variation'
            },
            {
                'question': '–ö–æ–º—Ñ–æ—Ä—Ç ‚Äî —ç—Ç–æ –∫–∞–∫–∏–µ –º–∞—à–∏–Ω—ã?',
                'expected_category': 'pricing',
                'expected_confidence': 0.4,
                'test_type': 'variation'
            },
            {
                'question': '–ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å?',
                'expected_category': 'payment',
                'expected_confidence': 0.3,
                'test_type': 'low_confidence'
            },
            {
                'question': '–ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑?',
                'expected_category': 'booking',
                'expected_confidence': 0.3,
                'test_type': 'low_confidence'
            },
            {
                'question': '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç',
                'expected_category': 'technical',
                'expected_confidence': 0.3,
                'test_type': 'low_confidence'
            },
            {
                'question': '–ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É?',
                'expected_category': 'delivery',
                'expected_confidence': 0.3,
                'test_type': 'low_confidence'
            }
        ]
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        for i, test_case in enumerate(test_cases, 1):
            print(f"\nüìã –¢–µ—Å—Ç {i}/{len(test_cases)}")
            result = self.test_question(test_case['question'])
            result['expected_category'] = test_case['expected_category']
            result['expected_confidence'] = test_case['expected_confidence']
            result['test_type'] = test_case['test_type']
            
            self.test_results.append(result)
            time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.analyze_results()
    
    def analyze_results(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤"""
        print("\n" + "=" * 80)
        print("üìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–û–ì–û FAQ-–ê–°–°–ò–°–¢–ï–ù–¢–ê")
        print("=" * 80)
        
        total_tests = len(self.test_results)
        successful_tests = sum(1 for r in self.test_results if r.get('success', False))
        
        print(f"üìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {successful_tests}")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {total_tests - successful_tests}")
        
        if successful_tests == 0:
            print("‚ùå –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å!")
            return
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º —Ç–µ—Å—Ç–æ–≤
        test_types = {}
        for result in self.test_results:
            if result.get('success', False):
                test_type = result.get('test_type', 'unknown')
                if test_type not in test_types:
                    test_types[test_type] = []
                test_types[test_type].append(result)
        
        print(f"\nüìã –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º —Ç–µ—Å—Ç–æ–≤:")
        for test_type, results in test_types.items():
            avg_confidence = sum(r.get('confidence', 0) for r in results) / len(results)
            print(f"   {test_type}: {len(results)} —Ç–µ—Å—Ç–æ–≤, —Å—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence:.3f}")
        
        # –ê–Ω–∞–ª–∏–∑ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        confidences = [r.get('confidence', 0) for r in self.test_results if r.get('success', False)]
        if confidences:
            avg_confidence = sum(confidences) / len(confidences)
            max_confidence = max(confidences)
            min_confidence = min(confidences)
            
            print(f"\nüìä –ê–Ω–∞–ª–∏–∑ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:")
            print(f"   –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence:.3f}")
            print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {max_confidence:.3f}")
            print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {min_confidence:.3f}")
            
            # –ü–æ–¥—Å—á–µ—Ç —Ç–µ—Å—Ç–æ–≤ —Å –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
            high_confidence_tests = sum(1 for c in confidences if c >= 0.6)
            medium_confidence_tests = sum(1 for c in confidences if 0.3 <= c < 0.6)
            low_confidence_tests = sum(1 for c in confidences if c < 0.3)
            
            print(f"\nüéØ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:")
            print(f"   –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (‚â•0.6): {high_confidence_tests} —Ç–µ—Å—Ç–æ–≤")
            print(f"   –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (0.3-0.6): {medium_confidence_tests} —Ç–µ—Å—Ç–æ–≤")
            print(f"   –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (<0.3): {low_confidence_tests} —Ç–µ—Å—Ç–æ–≤")
        
        # –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
        sources = {}
        for result in self.test_results:
            if result.get('success', False):
                source = result.get('source', 'unknown')
                sources[source] = sources.get(source, 0) + 1
        
        print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤:")
        for source, count in sources.items():
            print(f"   {source}: {count} —Ç–µ—Å—Ç–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫
        print(f"\nüéØ –ü–†–û–í–ï–†–ö–ê –ú–ï–¢–†–ò–ö:")
        
        # Top-1 –º–µ—Ç—Ä–∏–∫–∞ (–ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é ‚â• 0.6)
        top1_success = sum(1 for r in self.test_results if r.get('success', False) and r.get('confidence', 0) >= 0.6)
        top1_metric = top1_success / successful_tests if successful_tests > 0 else 0
        
        print(f"   Top-1 ‚â• 0.6: {top1_success}/{successful_tests} = {top1_metric:.3f}")
        
        if top1_metric >= 0.85:
            print("   ‚úÖ Top-1 –º–µ—Ç—Ä–∏–∫–∞ –ü–†–û–ô–î–ï–ù–ê!")
        else:
            print("   ‚ùå Top-1 –º–µ—Ç—Ä–∏–∫–∞ –ù–ï –ü–†–û–ô–î–ï–ù–ê!")
        
        # Top-3 –º–µ—Ç—Ä–∏–∫–∞ (–ª—é–±–æ–π –∏–∑ –ø–µ—Ä–≤—ã—Ö —Ç—Ä–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é ‚â• 0.6)
        top3_success = 0
        for result in self.test_results:
            if result.get('success', False):
                confidence = result.get('confidence', 0)
                suggestions = result.get('suggestions', [])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                if confidence >= 0.6:
                    top3_success += 1
                elif suggestions:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                    for suggestion in suggestions:
                        if suggestion.get('confidence', 0) >= 0.6:
                            top3_success += 1
                            break
        
        top3_metric = top3_success / successful_tests if successful_tests > 0 else 0
        
        print(f"   Top-3 ‚â• 0.6: {top3_success}/{successful_tests} = {top3_metric:.3f}")
        
        if top3_metric >= 0.95:
            print("   ‚úÖ Top-3 –º–µ—Ç—Ä–∏–∫–∞ –ü–†–û–ô–î–ï–ù–ê!")
        else:
            print("   ‚ùå Top-3 –º–µ—Ç—Ä–∏–∫–∞ –ù–ï –ü–†–û–ô–î–ï–ù–ê!")
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        print(f"\nüèÜ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê:")
        if top1_metric >= 0.85 and top3_metric >= 0.95:
            print("   üéâ –í–°–ï –ú–ï–¢–†–ò–ö–ò –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!")
        elif top1_metric >= 0.7 and top3_metric >= 0.8:
            print("   üëç –•–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! –°–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ.")
        elif top1_metric >= 0.5 and top3_metric >= 0.6:
            print("   ‚ö†Ô∏è –°—Ä–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
        else:
            print("   üö® –ù–∏–∑–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
        
        return {
            'total_tests': total_tests,
            'successful_tests': successful_tests,
            'top1_metric': top1_metric,
            'top3_metric': top3_metric,
            'avg_confidence': avg_confidence if confidences else 0
        }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = ProfessionalFAQTester()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        if not tester.start_server():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        results = tester.run_comprehensive_tests()
        
        print(f"\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {results}")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        tester.stop_server()

if __name__ == "__main__":
    main()
