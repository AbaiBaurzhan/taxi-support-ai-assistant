#!/usr/bin/env python3
"""
üîç –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ APARU
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
"""

import json
import logging
import pickle
from typing import Dict, List, Any, Optional
from fuzzywuzzy import fuzz
import re

logger = logging.getLogger(__name__)

class EnhancedAPARUSearch:
    def __init__(self, knowledge_base_path: str = "enhanced_aparu_knowledge_base.json", 
                 index_path: str = "enhanced_search_index.pkl"):
        self.knowledge_base_path = knowledge_base_path
        self.index_path = index_path
        self.knowledge_base = []
        self.keyword_index = {}
        self.question_index = {}
        
        self._load_knowledge_base()
        self._load_search_index()
    
    def _load_knowledge_base(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"""
        try:
            with open(self.knowledge_base_path, 'r', encoding='utf-8') as f:
                self.knowledge_base = json.load(f)
            logger.info(f"‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {len(self.knowledge_base)} –∑–∞–ø–∏—Å–µ–π")
        except FileNotFoundError:
            logger.error(f"‚ùå –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.knowledge_base_path}")
            self.knowledge_base = []
    
    def _load_search_index(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å"""
        try:
            with open(self.index_path, 'rb') as f:
                index_data = pickle.load(f)
                self.keyword_index = index_data.get('keyword_index', {})
                self.question_index = index_data.get('question_index', {})
            logger.info(f"‚úÖ –ü–æ–∏—Å–∫–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –∑–∞–≥—Ä—É–∂–µ–Ω: {len(self.keyword_index)} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
        except FileNotFoundError:
            logger.error(f"‚ùå –ü–æ–∏—Å–∫–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.index_path}")
            self.keyword_index = {}
            self.question_index = {}
    
    def search_by_keywords(self, question: str, threshold: float = 0.3) -> Optional[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        question_lower = question.lower()
        best_match = None
        best_score = 0
        
        # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        for keyword, indices in self.keyword_index.items():
            if keyword.lower() in question_lower:
                for idx in indices:
                    if idx < len(self.knowledge_base):
                        item = self.knowledge_base[idx]
                        score = fuzz.ratio(question_lower, keyword.lower()) + 20
                        if score > best_score:
                            best_score = score
                            best_match = item
        
        if best_score / 100.0 >= threshold:
            return best_match
        return None
    
    def search_by_question(self, question: str, threshold: float = 0.4) -> Optional[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –≤–æ–ø—Ä–æ—Å–∞"""
        question_lower = question.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if question_lower in self.question_index:
            idx = self.question_index[question_lower]
            if idx < len(self.knowledge_base):
                return self.knowledge_base[idx]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—á–µ—Ç–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        best_match = None
        best_score = 0
        
        for item in self.knowledge_base:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –≤–æ–ø—Ä–æ—Å
            score = fuzz.ratio(question_lower, item['question'].lower())
            if score > best_score:
                best_score = score
                best_match = item
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—Ä–∏–∞—Ü–∏–∏
            for variation in item.get('variations', []):
                score = fuzz.ratio(question_lower, variation.lower())
                if score > best_score:
                    best_score = score
                    best_match = item
        
        if best_score / 100.0 >= threshold:
            return best_match
        return None
    
    def search_by_category(self, question: str, category: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        category_items = [item for item in self.knowledge_base if item.get('category') == category]
        
        if not category_items:
            return None
        
        question_lower = question.lower()
        best_match = None
        best_score = 0
        
        for item in category_items:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –≤–æ–ø—Ä–æ—Å
            score = fuzz.ratio(question_lower, item['question'].lower())
            if score > best_score:
                best_score = score
                best_match = item
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—Ä–∏–∞—Ü–∏–∏
            for variation in item.get('variations', []):
                score = fuzz.ratio(question_lower, variation.lower())
                if score > best_score:
                    best_score = score
                    best_match = item
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            for keyword in item.get('keywords', []):
                if keyword.lower() in question_lower:
                    score = fuzz.ratio(question_lower, keyword.lower()) + 30
                    if score > best_score:
                        best_score = score
                        best_match = item
        
        return best_match
    
    def get_enhanced_answer(self, question: str, threshold: float = 0.3) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –ø–æ–∏—Å–∫–∞
        """
        question_lower = question.lower()
        
        # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–∞
        category = self._categorize_question(question_lower)
        
        # 2. –ü—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
        result = self.search_by_question(question, threshold=0.6)
        if result:
            return {
                'answer': result['answer'],
                'confidence': 0.95,
                'source': 'exact_match',
                'category': category,
                'keywords': result.get('keywords', []),
                'variations': result.get('variations', [])
            }
        
        # 3. –ü—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        result = self.search_by_keywords(question, threshold=0.4)
        if result:
            return {
                'answer': result['answer'],
                'confidence': 0.85,
                'source': 'keyword_match',
                'category': category,
                'keywords': result.get('keywords', []),
                'variations': result.get('variations', [])
            }
        
        # 4. –ü—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        result = self.search_by_category(question, category)
        if result:
            return {
                'answer': result['answer'],
                'confidence': 0.75,
                'source': 'category_match',
                'category': category,
                'keywords': result.get('keywords', []),
                'variations': result.get('variations', [])
            }
        
        # 5. –û–±—â–∏–π –ø–æ–∏—Å–∫
        result = self.search_by_question(question, threshold=threshold)
        if result:
            return {
                'answer': result['answer'],
                'confidence': 0.65,
                'source': 'fuzzy_match',
                'category': category,
                'keywords': result.get('keywords', []),
                'variations': result.get('variations', [])
            }
        
        # 6. Fallback
        return {
            'answer': "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –Ω–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
            'confidence': 0.0,
            'source': 'fallback',
            'category': category,
            'keywords': [],
            'variations': []
        }
    
    def _categorize_question(self, question: str) -> str:
        """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å"""
        if any(word in question for word in ['–Ω–∞—Ü–µ–Ω–∫–∞', '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Ä–∞—Å—Ü–µ–Ω–∫–∞', '–¥–æ—Ä–æ–≥–æ', '–¥–µ—à–µ–≤–æ']):
            return 'pricing'
        elif any(word in question for word in ['–∑–∞–∫–∞–∑', '–ø–æ–µ–∑–¥–∫–∞', '—Ç–∞–∫—Å–∏', '–≤—ã–∑–æ–≤', '–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π']):
            return 'booking'
        elif any(word in question for word in ['–±–∞–ª–∞–Ω—Å', '–ø–æ–ø–æ–ª–Ω–∏—Ç—å', '–æ–ø–ª–∞—Ç–∞', '–ø–ª–∞—Ç–µ–∂', '–∫–∞—Ä—Ç–∞']):
            return 'payment'
        elif any(word in question for word in ['–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', '—Ç–∞–∫—Å–æ–º–µ—Ç—Ä', '–º–æ—Ç–æ—á–∞—Å—ã', 'gps', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç']):
            return 'technical'
        elif any(word in question for word in ['–¥–æ—Å—Ç–∞–≤–∫–∞', '–∫—É—Ä—å–µ—Ä', '–ø–æ—Å—ã–ª–∫–∞']):
            return 'delivery'
        elif any(word in question for word in ['–≤–æ–¥–∏—Ç–µ–ª—å', '–∫–æ–Ω—Ç–∞–∫—Ç—ã', '—Å–≤—è–∑—å', '–ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã']):
            return 'driver'
        elif any(word in question for word in ['–æ—Ç–º–µ–Ω–∏—Ç—å', '–æ—Ç–º–µ–Ω–∞', '–æ—Ç–∫–∞–∑']):
            return 'cancellation'
        elif any(word in question for word in ['–∂–∞–ª–æ–±–∞', '–ø—Ä–æ–±–ª–µ–º–∞', '–Ω–µ–¥–æ–≤–æ–ª–µ–Ω']):
            return 'complaint'
        else:
            return 'general'
    
    def get_statistics(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        categories = {}
        total_variations = 0
        total_keywords = 0
        
        for item in self.knowledge_base:
            cat = item.get('category', 'general')
            categories[cat] = categories.get(cat, 0) + 1
            total_variations += len(item.get('variations', []))
            total_keywords += len(item.get('keywords', []))
        
        return {
            'total_records': len(self.knowledge_base),
            'categories': categories,
            'total_variations': total_variations,
            'total_keywords': total_keywords,
            'avg_variations_per_record': total_variations / len(self.knowledge_base) if self.knowledge_base else 0,
            'avg_keywords_per_record': total_keywords / len(self.knowledge_base) if self.knowledge_base else 0
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ main.py
_enhanced_search = EnhancedAPARUSearch()

def get_enhanced_answer(question: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç"""
    result = _enhanced_search.get_enhanced_answer(question)
    return result['answer']

def get_enhanced_answer_with_metadata(question: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏"""
    return _enhanced_search.get_enhanced_answer(question)

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø–æ–∏—Å–∫–∞
    search = EnhancedAPARUSearch()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = search.get_statistics()
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:")
    print(f"   –ó–∞–ø–∏—Å–µ–π: {stats['total_records']}")
    print(f"   –í–∞—Ä–∏–∞—Ü–∏–π: {stats['total_variations']}")
    print(f"   –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {stats['total_keywords']}")
    print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤–∞—Ä–∏–∞—Ü–∏–π –Ω–∞ –∑–∞–ø–∏—Å—å: {stats['avg_variations_per_record']:.1f}")
    print(f"   –°—Ä–µ–¥–Ω–µ–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –Ω–∞ –∑–∞–ø–∏—Å—å: {stats['avg_keywords_per_record']:.1f}")
    
    print(f"\nüìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    for cat, count in stats['categories'].items():
        print(f"   {cat}: {count} –∑–∞–ø–∏—Å–µ–π")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
    test_questions = [
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞—Ü–µ–Ω–∫–∞?",
        "–ü–æ—á–µ–º—É —Ç–∞–∫ –¥–æ—Ä–æ–≥–æ?",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ç–∞—Ä–∏—Ñ –ö–æ–º—Ñ–æ—Ä—Ç?",
        "–ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å?"
    ]
    
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞:")
    for question in test_questions:
        result = search.get_enhanced_answer(question)
        print(f"‚ùì {question}")
        print(f"‚úÖ {result['answer'][:100]}...")
        print(f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.2f}, –ò—Å—Ç–æ—á–Ω–∏–∫: {result['source']}")
        print()
