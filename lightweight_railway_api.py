#!/usr/bin/env python3
"""
‚òÅÔ∏è –õ–µ–≥–∫–∏–π Railway API - —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
–ë–µ–∑ AI –º–æ–¥–µ–ª–∏, —Ç–æ–ª—å–∫–æ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è
"""

import requests
import json
import logging
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import Dict, Any, Optional
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(title="APARU Lightweight API", version="1.0.0")

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class ChatRequest(BaseModel):
    text: str
    user_id: str
    locale: str = "ru"

class ChatResponse(BaseModel):
    response: str
    intent: str
    confidence: float
    source: str
    timestamp: str

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
LOCAL_MODEL_URL = os.getenv("LOCAL_MODEL_URL", "http://localhost:11434")
RAILWAY_MODE = os.getenv("RAILWAY_MODE", "true").lower() == "true"

class LightweightAPIClient:
    def __init__(self):
        self.local_model_available = False
        self._check_local_model()
    
    def _check_local_model(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        try:
            response = requests.get(f"{LOCAL_MODEL_URL}/api/tags", timeout=5)
            if response.status_code == 200:
                self.local_model_available = True
                logger.info("‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞")
            else:
                logger.warning("‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
    
    def _query_local_model(self, question: str) -> Optional[str]:
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç —É –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        try:
            payload = {
                "model": "aparu-senior-ai",
                "prompt": f"–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–∞–∫—Å–∏-–∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞ APARU: {question}",
                "stream": False
            }
            
            response = requests.post(
                f"{LOCAL_MODEL_URL}/api/generate",
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                return result.get('response', '').strip()
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏: {response.status_code}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏: {e}")
            return None
    
    def get_answer(self, question: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        if self.local_model_available:
            answer = self._query_local_model(question)
            if answer:
                return {
                    'answer': answer,
                    'source': 'local_model',
                    'confidence': 0.95,
                    'intent': 'faq'
                }
        
        # Fallback –æ—Ç–≤–µ—Ç
        return {
            'answer': '–õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.',
            'source': 'error',
            'confidence': 0.0,
            'intent': 'error'
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
api_client = LightweightAPIClient()

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
    return {
        "status": "healthy",
        "railway_mode": RAILWAY_MODE,
        "local_model_available": api_client.local_model_available,
        "local_model_url": LOCAL_MODEL_URL
    }

@app.post("/chat", response_model=ChatResponse)
async def chat_endpoint(request: ChatRequest):
    """–û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —á–∞—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
        result = api_client.get_answer(request.text)
        
        return ChatResponse(
            response=result['answer'],
            intent=result['intent'],
            confidence=result['confidence'],
            source=result['source'],
            timestamp=datetime.now().isoformat()
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ chat_endpoint: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@app.get("/status")
async def get_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
    return {
        "railway_mode": RAILWAY_MODE,
        "local_model_available": api_client.local_model_available,
        "local_model_url": LOCAL_MODEL_URL,
        "description": "–õ–µ–≥–∫–∏–π API –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏"
    }

if __name__ == "__main__":
    import uvicorn
    from datetime import datetime
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ª–µ–≥–∫–æ–≥–æ Railway API...")
    logger.info(f"   –†–µ–∂–∏–º Railway: {RAILWAY_MODE}")
    logger.info(f"   URL –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏: {LOCAL_MODEL_URL}")
    
    uvicorn.run(app, host="0.0.0.0", port=8000)
